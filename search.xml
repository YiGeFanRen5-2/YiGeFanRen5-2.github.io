<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>踏板验证</title>
      <link href="/undefined/61401.html"/>
      <url>/undefined/61401.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本文使用模型个人绘制未有尺寸要求，未进行优化，仅查看最大应力位置；所有参数均个人随机定义</p></div><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><table>  <tr>      <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_pedal_20240812.jpg" style="zoom:35%;" alt="踏板示意图"></td>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/pedal_3d_20240820.png" style="zoom:35%;" alt="踏板3D"></td>  </tr></table><h2 id="踏板验证流程"><a href="#踏板验证流程" class="headerlink" title="踏板验证流程"></a>踏板验证流程</h2><h3 id="设置材料"><a href="#设置材料" class="headerlink" title="设置材料"></a>设置材料</h3><ul><li>选取系统自带的PA（类型）6材料</li></ul><h3 id="设置约束"><a href="#设置约束" class="headerlink" title="设置约束"></a>设置约束</h3><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/pedal_fix_20240820.png" style="zoom:50%;"></p><ul><li>在支撑处及圆面添加固定约束</li></ul><h3 id="加载载荷"><a href="#加载载荷" class="headerlink" title="加载载荷"></a>加载载荷</h3><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/pedal_zh_20240820.png" style="zoom:65%;"></p><ul><li>在踏板面添加80N载荷</li></ul><h3 id="划分网格"><a href="#划分网格" class="headerlink" title="划分网格"></a>划分网格</h3><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/pedal_mesh_20240820.png" style="zoom:30%;"></p><ul><li>设置单元大小为2mm</li></ul><h3 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h3><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/pedal_result_20240820.png" style="zoom:40%;"></p><ul><li>获取应力图解，查看最大应力处</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 工作流 </tag>
            
            <tag> 有限元分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电子油门踏板</title>
      <link href="/undefined/44993.html"/>
      <url>/undefined/44993.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><a href="https://www.doc88.com/p-7364820327946.html">参考文档：QC/T977-2014 汽车电子油门踏板总成技术条件</a></p></div><h2 id="简称"><a href="#简称" class="headerlink" title="简称"></a>简称</h2><ul><li>电子油门踏板总成：electrical accelerator pedal module (APM)</li><li>电子油门踏板位置传感器：electrical accelerator position sensor（APS）</li></ul><h2 id="传统拉线油门踏板"><a href="#传统拉线油门踏板" class="headerlink" title="传统拉线油门踏板"></a>传统拉线油门踏板</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_ctlx_20240905.jpeg" style="zoom:33%;"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_01_20240810.jpg" style="zoom:30%;"></p><ul><li>是一种通过内部电子结构将驾驶员的驾驶意图转化为电子信号，通过总线传输给发动机控制器（ECU），由ECU根据整车的工况运算后，合理的调整整车动力系统，从而实现驾驶员目的</li></ul><h2 id="组成结构"><a href="#组成结构" class="headerlink" title="组成结构"></a>组成结构</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_02_20240810.jpg" style="zoom:30%;"></p><ul><li>踏板：负责接收驾驶员的踩踏动作</li><li>壳体：固定踏板，提供稳定的支撑</li><li>弹簧：松开踏板时提供复位功能</li><li>踏板位置传感器：将加载的指定电压通过内部电路转化为指定的输出信号（电压值）</li><li>机座：用于汽车安装</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><ul><li><p>悬挂式</p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_xgs_20240810.jpg" style="zoom:25%;"></p></li><li><p>地板式（风琴式）</p></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_dbs_20240810.jpg" style="zoom:24%;"></p><h3 id="信号路数"><a href="#信号路数" class="headerlink" title="信号路数"></a>信号路数</h3><ul><li><p>双路输出</p><table>  <tr>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_signal2_20240810.png" style="zoom:27%;" alt="信号比例为2"></td>      <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_signal1_20240810.png" style="zoom:27%;" alt="信号比例为0"></td>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_signal3_20240810.png" style="zoom:27%;" alt="信号比例为1"></td>  </tr></table></li><li><p>三路输出</p></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_signal4_20240810.png" style="zoom:25%;"></p><h3 id="接触形式"><a href="#接触形式" class="headerlink" title="接触形式"></a>接触形式</h3><ul><li><p>接触式</p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_jcs_20240811.jpg" style="zoom:25%;"></p></li><li><p>非接触式</p></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_fjcs_20240811.jpg" style="zoom:25%;"></p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><h4 id="滑动变阻器原理"><a href="#滑动变阻器原理" class="headerlink" title="滑动变阻器原理"></a>滑动变阻器原理</h4><table>  <tr>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_yl_hdbzq_01_20240811.jpg" style="zoom:25%;" alt="厚膜电阻实物"></td>      <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_yl_hdbzq_02_20240811.png" style="zoom:25%;" alt="双路输出"></td>  </tr></table><ul><li>驾驶员踩踏踏板，改变了接入系统中的电阻，踏板的位置与接入系统中的电阻成比例关系，进而改变输出，通过测量输出变化，ECU就可以确定踏板的位置</li></ul><h4 id="霍尔效应原理"><a href="#霍尔效应原理" class="headerlink" title="霍尔效应原理"></a>霍尔效应原理</h4><table>  <tr>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_yl_hr_01_20240811.jpg" style="zoom:65%;" alt="实物"></td>      <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_yl_hr_02_20240811.gif" style="zoom:45%;" alt="霍尔元件工作原理"></td>  </tr></table><ul><li>霍尔效应：当电流通过导体时，如果该导体处于磁场中，就会在导体的两侧产生一种电势差，该电势差与磁场强度成正比      </li><li>当驾驶员踩下踏板时，霍尔元件会受到磁铁的作用，产生一个电场，进而产生电势差。电势差与踏板位置成正比，通过测量电势差的变化，ECU可以确定踏板位置</li></ul><h4 id="电感"><a href="#电感" class="headerlink" title="电感"></a>电感</h4><table>  <tr>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_yl_dg_01_20240811.jpg" style="zoom:35%;"></td>      <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_yl_dg_02_20240811.jpeg" style="zoom:35%;"></td>  </tr></table><ul><li>电磁感应式传感器（PLCD），其主要应用于线性位置测量领域</li><li>交流电流从激励线圈上流过，围绕着转子导电回路产生一个电磁场，产生的交流感应电流流经转子，反过来又产生一个反作用于接收线圈的电磁场。根据转子的位置在接收线圈上生成感应电压，并由电子元件进行测定</li><li>工作原理与温度无关，对机械容差不敏感</li></ul><h4 id="电容"><a href="#电容" class="headerlink" title="电容"></a>电容</h4><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_yl_rz_20240812.jpg" style="zoom:35%;"></p><ul><li><p>容栅式传感器</p></li><li><p>工作原理主要基于电容的变化。它包括固定容栅和可动容栅，这两者之间形成一对对电容。当可动容栅相对于固定容栅移动时，每对电容的面积会发生变化，从而导致电容值的变化。这个变化可以被用来测量线位移或角位移</p></li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_cs_20240812.png" style="zoom:35%;"></p><ul><li><p>怠速电压：低钳位电压</p></li><li><p>满载电压：高钳位电压</p></li><li><p>同步度：</p><script type="math/tex; mode=display">|U_{1}/(2U_{i1}) - U_{2}/U_{i2}| * 100\% ≤ 2\%</script><ul><li>U<sub>1</sub>：信号1的实测电压值</li><li>U<sub>i1</sub>：信号1的电源电压值</li><li>U<sub>2</sub>：信号2的实测电压值</li><li>U<sub>i2</sub>：信号2的电源电压值</li></ul></li><li><p>线性度</p><script type="math/tex; mode=display">|(U_{Ai,nom} - U_{Ai}) / U_{Bi}| * 100\% ≤ 3\%</script><ul><li>U<sub>Ai,nom</sub>：信号i的理论电压值</li><li>U<sub>Ai</sub>：信号i的实测电压值</li><li>U<sub>Bi</sub>：信号i的电源电压值</li></ul></li><li><p>力滞H</p><script type="math/tex; mode=display">|操纵力 - 回复力| / 操纵力 * 100\% ≤ 20\%</script></li></ul><h2 id="特殊结构"><a href="#特殊结构" class="headerlink" title="特殊结构"></a>特殊结构</h2><h3 id="kickdown"><a href="#kickdown" class="headerlink" title="kickdown"></a>kickdown</h3><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/KickDown_20240803.jpg" style="zoom:65%;"></p><ul><li>降档提速作用（详见：<a href="/undefined/6209.html" title="kickdown作用">kickdown作用</a>）</li></ul><h3 id="踏板"><a href="#踏板" class="headerlink" title="踏板"></a>踏板</h3><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/apm_pedal_20240812.jpg" style="zoom:35%;"></p><ul><li>（详见：<a href="/undefined/61401.html" title="踏板验证">踏板验证</a>）</li></ul><h2 id="失效模式"><a href="#失效模式" class="headerlink" title="失效模式"></a>失效模式</h2><h3 id="跛行失效模式"><a href="#跛行失效模式" class="headerlink" title="跛行失效模式"></a>跛行失效模式</h3><ul><li><p>Limp Mode 或 LIMP HOME Mode</p></li><li><p>是指汽车的电控设备出现故障的时候，一开始主要集中于发动机控制和变速箱单片机，在模块或者传感器信号出现故障的时候，模块仍旧能够完成基本的功能，使得汽车仍能以最低要求的性能水平行驶</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kickdown作用</title>
      <link href="/undefined/6209.html"/>
      <url>/undefined/6209.html</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>在自动变速器的设计中，‌当驾驶者深踏油门时，‌表示发动机不够力或驾驶者想加速，‌这时候自动变速器便会自动转低一至两档，‌协助加速。‌这一动作称为Kickdown</li></ul><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>电子油门踏板的kickdown作用是强制降挡，‌提高发动机转速，‌加大动力输出，‌让汽车迅速达到更猛烈的加速能力</li><li>‌在油车时代的作用是自动降档</li><li>在电动车上，‌Kickdown开关的角色转变为全力输出电机功率的开关，‌确保电机能够充分发挥其潜能。‌当触发Kickdown开关且系统允许的情况下，‌驱动电机将立即全力输出，‌将实际使用的电机功率瞬间提升至最高</li><li>为了全力支持电机的全功率输出，‌一些舒适性用电设备如空调系统、‌舒适加热等可能会临时降低功率或被禁用，‌以确保电机的全力输出</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 中性盐雾试验</title>
      <link href="/undefined/2169.html"/>
      <url>/undefined/2169.html</url>
      
        <content type="html"><![CDATA[<h2 id="NSS"><a href="#NSS" class="headerlink" title="NSS"></a>NSS</h2><ul><li>中性盐雾试验（Neutral Salt Spray Test）</li></ul><h2 id="常用标准"><a href="#常用标准" class="headerlink" title="常用标准"></a>常用标准</h2><ul><li>GB/T 10125-2012/ISO 9227:2006 人造气氛腐蚀试验 盐雾试验</li><li>GB/T 2423.17-2008/IEC 60068-2-11:1981 电工电子产品环境试验 第2部分：试验方法 试验Ka：盐雾</li><li>ASTM B117－2011：操作盐雾测试机 1 的标准实验方法</li><li>GB/T 2423.17-2008和 GB/T 10125-2012 中性盐雾试验</li></ul><h2 id="试验条件"><a href="#试验条件" class="headerlink" title="试验条件"></a>试验条件</h2><div class="table-container"><table><thead><tr><th style="text-align:center">条件</th><th style="text-align:center">指定值</th></tr></thead><tbody><tr><td style="text-align:center">温度</td><td style="text-align:center">35±2 ℃</td></tr><tr><td style="text-align:center">水平采集面积为80cm2的平均采集速率</td><td style="text-align:center">1.5±0.5 mL/h</td></tr><tr><td style="text-align:center">氯化钠收集溶液溶度</td><td style="text-align:center">50±5 g/L</td></tr><tr><td style="text-align:center">收集溶液的PH</td><td style="text-align:center">6.5~7.2</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工艺 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弹簧力的计算</title>
      <link href="/undefined/35642.html"/>
      <url>/undefined/35642.html</url>
      
        <content type="html"><![CDATA[<h2 id="普通圆柱压缩弹簧"><a href="#普通圆柱压缩弹簧" class="headerlink" title="普通圆柱压缩弹簧"></a>普通圆柱压缩弹簧</h2><script type="math/tex; mode=display">F = KX</script><script type="math/tex; mode=display">K = G * d^4 / 8 * N * D_{m}^3</script><ul><li><p>G：剪切模量（Mpa），碳钢80000（如65Mn），不锈钢72000</p></li><li><p>d：线径（mm）</p></li><li>N：有效圈数</li><li>D<sub>m</sub>：中径（mm）</li><li>K：弹簧系数</li><li>F：弹簧力（N）</li><li>X：拉压缩量（mm）</li></ul><h2 id="扭簧扭矩"><a href="#扭簧扭矩" class="headerlink" title="扭簧扭矩"></a>扭簧扭矩</h2><script type="math/tex; mode=display">T = P * R = E * d^4 * α  / (3660 * N * D_{m})</script><ul><li>T：扭矩（N·m）</li><li>d：线径（mm）</li><li>E：弹性模量（Mpa）</li><li><p>α：扭转角度（°）</p></li><li><p>N：有效圈数</p></li><li><p>D<sub>m</sub>：中径（mm）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3D模型</title>
      <link href="/undefined/55082.html"/>
      <url>/undefined/55082.html</url>
      
        <content type="html"><![CDATA[<h2 id="巴雷特"><a href="#巴雷特" class="headerlink" title="巴雷特"></a>巴雷特</h2><details class="folding-tag" red open><summary> 巴雷特 </summary>              <div class="content">              <details class="folding-tag" blue><summary> 2D图纸 </summary>              <div class="content">              <table>  <tr>  <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_all.jpg" alt="总图" style="zoom:25%;" class="rotated-image"></td>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_part0120240619.jpg" alt="部件1" style="zoom:25%;"></td>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_part0220240619.jpg" alt="部件2" style="zoom:25%;"></td>  </tr>  <tr>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_part0320240619.jpg" alt="部件3" style="zoom:25%;" class="rotated-image"></td>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_part0420240620.jpg" alt="部件4" style="zoom:25%;"></td>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_part0520240620.jpg" alt="部件5" style="zoom:25%;"></td>  </tr>  <tr>       <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_part0620240620.jpg" alt="部件6" style="zoom:25%;"></td>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_part0720240620.jpg" alt="部件7" style="zoom:25%;"></td>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_part0820240620.jpg" alt="部件8" style="zoom:25%;"></td>  </tr>  <tr>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_part0920240620.jpg" alt="部件9" style="zoom:25%;"></td>     <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_part1020240620.jpg" alt="部件10" style="zoom:25%;"></td>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_part1120240620.jpg" alt="部件11" style="zoom:25%;"></td>  </tr></table>              </div>            </details><details class="folding-tag"><summary> 3D模型 </summary>              <div class="content">              <p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/blt_3D20240620.png" style="zoom:25%;"></p>              </div>            </details>              </div>            </details><h2 id="游标卡尺"><a href="#游标卡尺" class="headerlink" title="游标卡尺"></a>游标卡尺</h2><details class="folding-tag" red open><summary> 游标卡尺 </summary>              <div class="content">              <details class="folding-tag" blue><summary> 2D图纸 </summary>              <div class="content">              <table>  <tr>  <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/ybkc_all_20240702.jpeg" alt="总图" style="zoom:20%;" class="rotated-image"></td>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/ybka_fc_20240702.jpeg" alt="部件1" style="zoom:20%;"></td>  </tr>  <tr>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/ybka_jgld_20240702.webp" alt="部件3" style="zoom:25%;" class="rotated-image"></td>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/ybkc_nmtt_20240702.webp" alt="部件4" style="zoom:25%;"></td>  </tr>  <tr>       <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/ybkc_sdc_20240702.webp" alt="部件6" style="zoom:25%;"></td>    <td><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/ybkc_ybc_20240702.webp" alt="部件7" style="zoom:25%;"></td>  </tr></table>              </div>            </details><details class="folding-tag"><summary> 3D模型 </summary>              <div class="content">              <p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/ybkc20240702.png" style="zoom:40%;"></p>              </div>            </details>              </div>            </details>]]></content>
      
      
      
        <tags>
            
            <tag> 资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AnsysWorkbench - 子弹击穿</title>
      <link href="/undefined/23230.html"/>
      <url>/undefined/23230.html</url>
      
        <content type="html"><![CDATA[<h2 id="分析模块"><a href="#分析模块" class="headerlink" title="分析模块"></a>分析模块</h2><ul><li>显示动力学模块</li></ul><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><ul><li>通过slidworks建立模型并导入workbench中</li></ul><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><ul><li>工程材料数据中添加steel 1006、结构钢材</li><li>设置子弹材料为结构钢，刚度行为：刚性</li><li>设置靶材料为steel 1006钢材，刚度行为：柔性</li></ul><h2 id="接触"><a href="#接触" class="headerlink" title="接触"></a>接触</h2><ul><li>使用默认接触</li></ul><h2 id="网格"><a href="#网格" class="headerlink" title="网格"></a>网格</h2><ul><li>设置网格4mm</li></ul><h2 id="初始条件"><a href="#初始条件" class="headerlink" title="初始条件"></a>初始条件</h2><ul><li>添加速度Y轴正向5e5mm/s，其余两方向速度0mm/s</li><li>设置靶周边固定约束</li></ul><h2 id="分析设置"><a href="#分析设置" class="headerlink" title="分析设置"></a>分析设置</h2><ul><li>设置结束时间：0.001s</li></ul><h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/zddb20240618.gif" alt="应力"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> AnsysWorkbench </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidworks Simulation - 载荷类型</title>
      <link href="/undefined/13003.html"/>
      <url>/undefined/13003.html</url>
      
        <content type="html"><![CDATA[<h2 id="载荷的类型"><a href="#载荷的类型" class="headerlink" title="载荷的类型"></a>载荷的类型</h2><table style="text-align: center">  <tr>    <th>载荷类型</th>    <th>相关说明</th>  </tr>  <tr>    <td>力/扭矩</td>    <td>对任何方向的面、边线、参考点、顶点和横梁施加均匀分布的力、力矩或扭矩，适用于所有结构算例</td>  </tr>  <tr>    <td>压力</td>    <td>对零件或装配体表面施加均匀或非均匀（可变）压力，适用于结构静态算例、频率算例、扭曲算例、非线性算例和动态算例</td>  </tr>  <tr>    <td>惯性力</td>    <td>对零件或装配体施加离心力或者重力，适用于静态算例、频率算例、扭曲算例和线性算例</td>  </tr>  <tr>    <td>远程载荷</td>    <td>将部分模型简化成质量点</td>  </tr>  <tr>    <td>轴承载荷</td>    <td>对圆柱面间或壳体边线施加正弦变化或者抛物线变化的载荷</td>  </tr></table>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> Solidworks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidworks Simulation - 夹具的类型</title>
      <link href="/undefined/13002.html"/>
      <url>/undefined/13002.html</url>
      
        <content type="html"><![CDATA[<h2 id="夹具的类型"><a href="#夹具的类型" class="headerlink" title="夹具的类型"></a>夹具的类型</h2><table style="text-align: center">  <tr>    <th>夹具分类</th>    <th>夹具名称</th>    <th>夹具说明</th>  </tr>  <tr>    <td rowspan="4">标准夹具</td>    <td>固定几何体</td>    <td>全自由度约束，比如焊接</td>  </tr>  <tr>    <td>滚柱/滑杆</td>    <td>释放一个方向的平移自由度，比如直线导轨</td>  </tr>  <tr>    <td>固定铰链</td>    <td>释放一个方向的转动自由度，比如销轴</td>  </tr>  <tr>    <td>不可移动（无平移）</td>    <td>释放三个方向的转动自由度，比如铰接</td>  </tr>  <tr>    <td rowspan="5">高级夹具</td>    <td>对称</td>    <td>对符合对称分析要求的模型进行的约束方式</td>  </tr>  <tr>    <td>周期性对称</td>    <td>对符合圆周对称分析要求的模型进行的约束方式</td>  </tr>  <tr>    <td>使用参考几何体</td>    <td>通过线、面对自由度任意方向进行的约束方式</td>  </tr>  <tr>    <td>在平面</td>    <td>通过平面对三个移动方向进行的约束方式</td>  </tr>  <tr>    <td>在圆柱面/球面</td>    <td>圆柱坐标系/球坐标系下对自由度进行的约束方式</td>  </tr></table>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> Solidworks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidworks Simulation - 网格</title>
      <link href="/undefined/40195.html"/>
      <url>/undefined/40195.html</url>
      
        <content type="html"><![CDATA[<h2 id="计算结果精度的判定方法"><a href="#计算结果精度的判定方法" class="headerlink" title="计算结果精度的判定方法"></a>计算结果精度的判定方法</h2><h3 id="网格无关性检查"><a href="#网格无关性检查" class="headerlink" title="网格无关性检查"></a>网格无关性检查</h3><ul><li>通过网格加密方式判断前后计算结果是否趋于稳定的方法</li><li>位移结果对网格密度的敏感程度较低</li><li>应力结果对网格密度的敏感程度较高</li><li><strong>在多数情况下，位移结果会比应力结果先满足网格无关性要求</strong></li><li>判断应力区域是否趋于稳定（一般线性静力学要求的经验判定方式），即单元尺寸下降50%，结果变化同时满足以下两点：<ol><li>位移结果的最大变形量波动在2%以内（有些时候，尤其是大型装配体中，可适当放宽要求到5%以内）</li><li>应力结果的关键位置有效应力波动在2%以内（有些时候，尤其是大型装配体中，可适当放宽要求到5%以内）</li></ol></li><li><strong>对任意结果都可以进行判定</strong></li></ul><h3 id="有效最大应力区域完整覆盖两层单元"><a href="#有效最大应力区域完整覆盖两层单元" class="headerlink" title="有效最大应力区域完整覆盖两层单元"></a>有效最大应力区域完整覆盖两层单元</h3><ul><li><strong>只能运用于在应力及应力相关结果的精度判定中</strong></li></ul><h2 id="应力集中"><a href="#应力集中" class="headerlink" title="应力集中"></a>应力集中</h2><ul><li>固体局部区域内应力显著增高的现象</li><li>由于设计需要，应力集中问题无法避免</li></ul><h2 id="局部网格控制"><a href="#局部网格控制" class="headerlink" title="局部网格控制"></a>局部网格控制</h2><ul><li>有效利用计算机硬件资源的情况下确保结构件关键部位网格精度达到计算要求</li></ul><h3 id="网格控制参数"><a href="#网格控制参数" class="headerlink" title="网格控制参数"></a>网格控制参数</h3><h4 id="单元尺寸"><a href="#单元尺寸" class="headerlink" title="单元尺寸"></a>单元尺寸</h4><ul><li>设置指定元素（点、线、面）所在区域网格大小</li></ul><h4 id="过渡比率"><a href="#过渡比率" class="headerlink" title="过渡比率"></a>过渡比率</h4><ul><li>网格过渡变化的速率</li><li><strong>一般情况下，为确保计算精度和网格美观性，网格的过渡比率宜设置为1.1或者1.2</strong></li></ul><h2 id="位移结果和网格密度的关系"><a href="#位移结果和网格密度的关系" class="headerlink" title="位移结果和网格密度的关系"></a>位移结果和网格密度的关系</h2><ul><li>一般默认单元尺寸的一半尺寸既可以满足位移精度的要求</li></ul><h2 id="应力奇异"><a href="#应力奇异" class="headerlink" title="应力奇异"></a>应力奇异</h2><ul><li><p>是一种数学算法问题，是指受力体由于几何关系和边界条件的特殊原因，再利用连续性方程求解应力函数时候出现的应力无穷大的现象，<strong>多出现于尖角及固定约束位置</strong></p></li><li><p>公式</p><script type="math/tex; mode=display">σ = F / A</script><ul><li>应力基本计算公式，其值等于载荷F除以面积A，当A趋近于0时，应力值就会无穷大</li></ul></li></ul><h3 id="应力奇异三种情况"><a href="#应力奇异三种情况" class="headerlink" title="应力奇异三种情况"></a>应力奇异三种情况</h3><ul><li>尖角、刚性约束、点或线载荷</li><li><p><strong>应力奇异位置的最终应力值和最初应力值大小无关，只和结构的几何形状以及载荷、约束方式有关</strong>，只要在该位置满足应力奇异，且不断加密网格，应力值就一定能增加到非常大</p></li><li><p>当应力奇异的应力值成为整个结构的最大应力值时，此时最大应力值不存咋实际意义</p></li></ul><h3 id="应力奇异性的处理"><a href="#应力奇异性的处理" class="headerlink" title="应力奇异性的处理"></a>应力奇异性的处理</h3><ol><li><strong>应力奇异只针对应力以及和应力相关的结果</strong>，如应变、应变能、位移不存在应力奇异问题</li><li>无法算准应力奇异位置的应力值</li><li><strong>多数结构位置，如载荷加载面、固定面以及一些尖角，属于结构非常危险区域，这些位置如果产生应力奇异可以忽略</strong></li><li>在出现应力奇异位置时，应考虑如何修正结构提升结构强度</li></ol><h2 id="网格划分报错"><a href="#网格划分报错" class="headerlink" title="网格划分报错"></a>网格划分报错</h2><h3 id="整体单元尺寸过大"><a href="#整体单元尺寸过大" class="headerlink" title="整体单元尺寸过大"></a>整体单元尺寸过大</h3><ul><li>整体单元尺寸相对于模型尺寸较大</li><li><strong>解决方案</strong>：控制整体网格数量的前提下减小整体单元尺寸即可解决问题</li></ul><h3 id="局部单元尺寸过小"><a href="#局部单元尺寸过小" class="headerlink" title="局部单元尺寸过小"></a>局部单元尺寸过小</h3><ul><li>局部单元尺寸设置过小，导致局部单元尺寸无法过渡到整体单元尺寸大小</li><li><strong>解决方案</strong>：调大网格过渡比率或者减小局部网格和整体单元尺寸支架的差距即可</li></ul><h3 id="模型中的特征限制网格划分导致模型报错"><a href="#模型中的特征限制网格划分导致模型报错" class="headerlink" title="模型中的特征限制网格划分导致模型报错"></a>模型中的特征限制网格划分导致模型报错</h3>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> Solidworks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidworks Simultaion - 参数对结果的影响</title>
      <link href="/undefined/7122.html"/>
      <url>/undefined/7122.html</url>
      
        <content type="html"><![CDATA[<h2 id="静应力分析"><a href="#静应力分析" class="headerlink" title="静应力分析"></a>静应力分析</h2><h3 id="材料参数变化"><a href="#材料参数变化" class="headerlink" title="材料参数变化"></a>材料参数变化</h3><div class="note info flat"><p>只有在载荷和应力等边界条件才符合规律</p></div><ul><li><strong>材料密度、弹性模量、屈服强度</strong>的变化对<strong>von Miese应力结果没有影响</strong></li><li><strong>材料密度</strong>对算例所有分析结果均<strong>不发生影响</strong></li><li><strong>弹性模量</strong>的调整<strong>改变位移结果</strong>， <strong>不改变安全系数的结果</strong><ul><li>弹性模量和位移结果的该变量成反比关系</li></ul></li><li><strong>屈服强度</strong>的调整<strong>改变安全系数结果</strong>，<strong>不改变位移结果和应力结果</strong></li></ul><h3 id="载荷对计算结果影响"><a href="#载荷对计算结果影响" class="headerlink" title="载荷对计算结果影响"></a>载荷对计算结果影响</h3><ul><li>载荷大小和应力、位移计算结果均保持线性比例关系（这就是线性问题）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> Solidworks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidworks Simulation - 材料力学概念</title>
      <link href="/undefined/18194.html"/>
      <url>/undefined/18194.html</url>
      
        <content type="html"><![CDATA[<h2 id="强度"><a href="#强度" class="headerlink" title="强度"></a>强度</h2><ul><li>表示材料或结构抵抗屈服甚至断裂的能力</li><li>对应的有限元分析结果为<strong>应力</strong></li></ul><h2 id="刚度"><a href="#刚度" class="headerlink" title="刚度"></a>刚度</h2><ul><li>表示材料或者结构在受力时抵抗变形的能力</li><li>对应有限元分析结果为<strong>位移</strong></li></ul><h2 id="金属材料"><a href="#金属材料" class="headerlink" title="金属材料"></a>金属材料</h2><ul><li>机械工程材料主要以金属为主</li></ul><h3 id="塑性材料"><a href="#塑性材料" class="headerlink" title="塑性材料"></a>塑性材料</h3><figure>  <img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%80%E8%88%AC%E5%A1%91%E6%80%A7%E6%9D%90%E6%96%99%E7%9A%84%E6%8B%89%E4%BC%B8%E5%AE%9E%E9%AA%8C%E6%9B%B2%E7%BA%BF.jpg" alt="一般塑性材料的拉伸实验曲线" style="zoom:30%;">  <img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/%E6%9D%A1%E4%BB%B6%E5%B1%88%E6%9C%8D.jpg" alt="条件屈服" style="zoom:30%;"></figure><ul><li>具有较大的拉伸应变</li><li>一般塑性材料的拉伸实验，其变化过程主要为：<ol><li>弹性阶段（OA）</li><li>屈服阶段（AB）</li><li>强化阶段（BC）</li><li>断裂阶段（CD）</li></ol></li><li>部分材料没有明显的四个阶段</li><li>对于没有明显屈服强度的塑性材料，以塑性应变0.2%时对应的应力强度作为屈服强度（如B点，也称为条件屈服）</li></ul><h3 id="脆性材料"><a href="#脆性材料" class="headerlink" title="脆性材料"></a>脆性材料</h3><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/%E8%84%86%E6%80%A7%E6%9D%90%E6%96%99%E7%9A%84%E6%8B%89%E4%BC%B8%E5%AE%9E%E9%AA%8C%E6%9B%B2%E7%BA%BF.jpg" alt="脆性材料的拉伸实验曲线" style="zoom:30%;"></p><ul><li>无明显屈服强度概念</li><li>使用材料的抗拉强度作为屈服判定标准</li></ul><h2 id="弹性模量"><a href="#弹性模量" class="headerlink" title="弹性模量"></a>弹性模量</h2><ul><li><p>是描述物质弹性性能的一系列物理量的统称，用于衡量材料抵抗弹性变形的能力，值越大，材料越不容易变形</p></li><li><p>材料在弹性阶段，其应力与应变成正比关系</p></li></ul><h3 id="杨氏模量"><a href="#杨氏模量" class="headerlink" title="杨氏模量"></a>杨氏模量</h3><ul><li>最常用的弹性模量概念之一</li><li><p>用“E”表示</p></li><li><p>材料在弹性阶段，多数金属材料的应力和应变成正比（即符合胡克定律），其纵向比例系数称为杨氏模量</p></li><li><strong>一般通过拉伸试验获取，solidworks simultaion的材料属性中弹性模量一栏就是杨氏模量</strong>（OA段斜率）     </li></ul><h3 id="泊松比"><a href="#泊松比" class="headerlink" title="泊松比"></a>泊松比</h3><ul><li>材料在单项受拉或受压时，横向正应变和轴向正应变的绝对值的比值，也叫横向变形系数</li><li><p>用“<strong>ν</strong>”表示</p></li><li><p>是反映材料横向变形的弹性常数</p></li><li><p>金属材料：一般情况下为0.28~0.3，特殊材料可到0.33</p></li><li><p>超弹性材料：0.49</p></li><li><p><strong>泊松比的输入差异在0.1~0.2时对结果影响不大</strong></p></li></ul><h3 id="剪切模量"><a href="#剪切模量" class="headerlink" title="剪切模量"></a>剪切模量</h3><ul><li>最常用的弹性模量概念之一</li><li>用“G”表示</li><li>是剪切应力与应变的比值，表征材料抵抗切向变形的能力</li></ul><h3 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h3><ul><li>杨氏模量、泊松比、剪切模量三者关系：</li></ul><script type="math/tex; mode=display">G=E/2（1+v）</script><h2 id="各向同性-各向异性"><a href="#各向同性-各向异性" class="headerlink" title="各向同性/各向异性"></a>各向同性/各向异性</h2><ul><li>各个方向的物理性质相同，物理性质与方向无关为各向同性</li><li><p>物理性质和方向密切相关，不同方向的测量结果不同，为各向异性</p></li><li><p>一般情况性在金属结构的力学问题中为降低计算难度将材料假设为各向同性</p></li></ul><h2 id="位移"><a href="#位移" class="headerlink" title="位移"></a>位移</h2><ul><li>也称变形</li><li>有X、Y、Z三种单向位移以及合位移</li></ul><h2 id="应力"><a href="#应力" class="headerlink" title="应力"></a>应力</h2><ul><li>物体由于外部因素（受力、湿度、温度场变化等）而产生·变形，在物体各部分之间产生相互作用的内力，单位面积上的内力称为应力</li><li>产品设计中的结构强度指的就是应力，也可称为应力强度</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/%E7%A9%BA%E9%97%B4%E4%B8%AD%E7%9A%84%E5%BE%AE%E5%85%83%E7%9A%84%E4%B8%80%E8%88%AC%E5%BA%94%E5%8A%9B%E7%8A%B6%E6%80%81.jpg" alt="空间中微元的一般应力状态" style="zoom:30%;"></p><ul><li>分别由三个拉应力和留个剪应力组成</li></ul><h2 id="屈服强度"><a href="#屈服强度" class="headerlink" title="屈服强度"></a>屈服强度</h2><ul><li><p>金属材料发生屈服现象时的屈服极限，也就是抵抗微量塑性变形的应力</p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/%E4%B8%80%E8%88%AC%E5%A1%91%E6%80%A7%E6%9D%90%E6%96%99%E7%9A%84%E6%8B%89%E4%BC%B8%E5%AE%9E%E9%AA%8C%E6%9B%B2%E7%BA%BF.jpg" alt="一般塑性材料的拉伸实验曲线" style="zoom:30%;"></p></li><li><p>AB段的最大值为上屈服点，最小值为下屈服点</p></li><li>材料进入屈服阶段，性能便开始下降</li><li><p><strong>安全起见，一般会将A点所在位置作为屈服点的数值进行输入</strong></p></li><li><p>为确保安全性工程人员通常把屈服强度作为安全系数的判定准则</p></li><li>屈服强度是一类统称，拉伸、剪切都有屈服强度</li></ul><h2 id="许用应力"><a href="#许用应力" class="headerlink" title="许用应力"></a>许用应力</h2><ul><li>机械工程或工程结构设计零件或构件材质允许的最大应力值</li><li>在某些场合与失效强度等同</li><li>由企业或者行业决定，可能会发生变化</li></ul><h2 id="抗拉强度"><a href="#抗拉强度" class="headerlink" title="抗拉强度"></a>抗拉强度</h2><ul><li><p>金属由均匀塑性变形想局部集中塑性变形过渡的临界值，也是金属在静拉伸条件下的最大承载能力</p></li><li><p>在一般塑性材料的拉伸实验曲线图中的C点位置</p></li><li>拉伸强度基本上意味着材料之后的力学性能将逐步下降并最终断裂</li></ul><h2 id="抗剪强度"><a href="#抗剪强度" class="headerlink" title="抗剪强度"></a>抗剪强度</h2><ul><li>又称剪切强度，是材料剪断时产生的极限强度，反映材料抵抗剪切滑动的最大承载能力</li></ul><h2 id="失效强度"><a href="#失效强度" class="headerlink" title="失效强度"></a>失效强度</h2><ul><li>工程结构与设备以及它们的构件和零部件到达一定强度后丧失其正常工作的能力。该强度称为失效强度</li><li>失效强度是一系列强度的统称</li><li>在不同屈服准则下失效强度均有不同<ol><li>承受抗剪为主结构中，失效强度可能是抗剪强度</li><li>脆性材料的失效强度可能是拉伸强度</li><li>塑性材料的失效强度可能是屈服强度</li><li>在某些工程领域中，失效强度也可能时许用应力</li></ol></li></ul><h2 id="主要应力"><a href="#主要应力" class="headerlink" title="主要应力"></a>主要应力</h2><ul><li>最大拉应力：第一主应力P1</li><li>第二主应力P2</li><li>最大压应力：第三主应力P3</li><li>最大剪应力（τ<sub>max</sub>）：应力强度P1-P3的1/2</li></ul><script type="math/tex; mode=display">τ_{max} = (P1 - P3) / 2</script><h2 id="安全系数"><a href="#安全系数" class="headerlink" title="安全系数"></a>安全系数</h2><ul><li><p>安全系数是工程结构设计方法中用于反映结构安全程度的系数</p></li><li><p>安全系数和应力强度关系：</p><script type="math/tex; mode=display">最小安全系数 = 材料失效强度 / 结构最大应力 ≥ 产品设计要求的安全系数</script><ul><li>一般情况下，材料的失效强度为材料的屈服强度</li></ul></li></ul><h2 id="屈服准则"><a href="#屈服准则" class="headerlink" title="屈服准则"></a>屈服准则</h2><div class="note info flat"><p>Miese屈服准则和Tresca屈服准则是目前应用较为广泛的金属材料屈服准则</p><p>Miese屈服准则应用最为广泛，Tresca屈服准则比Miese屈服准则计算更为保守</p><p>无特殊情况下使用Miese屈服准则进行安全系数判定</p></div><h3 id="最大von-Mises应力"><a href="#最大von-Mises应力" class="headerlink" title="最大von Mises应力"></a>最大von Mises应力</h3><ul><li><p>冯 · 米赛斯（von Mises）于19113年提出的屈服准则</p></li><li><p>认为形状改变比能是引起材料屈服的主要因素</p></li><li><p>无论是什么应力，只要构件内的一点处的形状改变比能达到材料的屈服极限，材料就要发生屈服</p><script type="math/tex; mode=display">von Mises应力 = \sqrt{[(σ1 - σ2)^2 + (σ2 - σ3)^2 + (σ3 - σ1)^2] / 2}</script></li></ul><h3 id="最大抗剪应力（Tresca）"><a href="#最大抗剪应力（Tresca）" class="headerlink" title="最大抗剪应力（Tresca）"></a>最大抗剪应力（Tresca）</h3><ul><li>认为引起材料失效的因素是最大剪应力</li></ul><h3 id="Mohr-Coulomb应力"><a href="#Mohr-Coulomb应力" class="headerlink" title="Mohr-Coulomb应力"></a>Mohr-Coulomb应力</h3><ul><li>一般用于岩土等建筑材料</li></ul><h3 id="最大法向应力"><a href="#最大法向应力" class="headerlink" title="最大法向应力"></a>最大法向应力</h3><ul><li><p>认为引起材料失效的因素是最大法向应力，即为最大拉应力（第一主要应力P1）</p></li><li><p>利用该准则判定结构的安全条件为：</p><script type="math/tex; mode=display">结构最大应力P1 ≤ 材料屈服强度 / 最小安全系数</script></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> Solidworks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品开发总结</title>
      <link href="/undefined/13115.html"/>
      <url>/undefined/13115.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本文为一次电子油门踏板产品开发过程记录</p></div><h2 id="开发路线"><a href="#开发路线" class="headerlink" title="开发路线"></a>开发路线</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/%E7%94%B5%E5%AD%90%E6%B2%B9%E9%97%A8%E8%B8%8F%E6%9D%BF%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93.png" alt="流程"></p><h2 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/%E7%94%B5%E5%AD%90%E6%B2%B9%E9%97%A8%E8%B8%8F%E6%9D%BF%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%97%B6%E9%97%B4%E8%BD%B4.png" alt="时间线"></p><h2 id="获取客户资料"><a href="#获取客户资料" class="headerlink" title="获取客户资料"></a>获取客户资料</h2><ul><li>主要由市场部进行提供相关资料</li></ul><h2 id="产品报价"><a href="#产品报价" class="headerlink" title="产品报价"></a>产品报价</h2><ul><li>根据市场提供的资料主要可分为2种情况进行产品报价<ol><li>粗略报价（预估报价）：提供的资料为图片/图纸等非具像资料</li><li>精确报价：提供的资料为客户样品，对样品进行拆解分析报价</li></ol></li></ul><h2 id="确定产品工作原理"><a href="#确定产品工作原理" class="headerlink" title="确定产品工作原理"></a>确定产品工作原理</h2><ul><li>客户明确要求：与客户件一致</li><li>客户未有要求：参考客户件或者已有产品进行确定</li></ul><h2 id="产品立项"><a href="#产品立项" class="headerlink" title="产品立项"></a>产品立项</h2><ul><li>产品开发项目正式启动</li><li>列举产品开发进度计划表</li></ul><h2 id="产品逆向开发"><a href="#产品逆向开发" class="headerlink" title="产品逆向开发"></a>产品逆向开发</h2><ul><li>根据客户件样品进行逆向抄数获取3D</li><li>评估客户件材料确定开发产品零部件材料</li><li>根据工作原理确定是否需要进行对产品结构进行调整</li><li>对产品结构进行评审</li><li>绘制零件2D图纸</li></ul><h2 id="模具开发"><a href="#模具开发" class="headerlink" title="模具开发"></a>模具开发</h2><ul><li>模具报价：根据产品零部件制品工艺确定模具供应商</li><li>由供应商提供模具3D进行评审模具设计是否合理</li></ul><h2 id="工装治具"><a href="#工装治具" class="headerlink" title="工装治具"></a>工装治具</h2><ul><li>设计并制作工装治具</li></ul><h2 id="试验验证"><a href="#试验验证" class="headerlink" title="试验验证"></a>试验验证</h2><ul><li>根据产品试验大纲或者由客户提供的试验要求进行安排试验</li><li>存在不合格则分析原因后调整重新安排试验</li></ul><h2 id="提交样品"><a href="#提交样品" class="headerlink" title="提交样品"></a>提交样品</h2><ul><li>根据客户提供表单填写数据，提交试验报告和表单</li><li>提交开发完成的样品，由客户安排试验验证</li></ul><h2 id="小批试生产"><a href="#小批试生产" class="headerlink" title="小批试生产"></a>小批试生产</h2><ul><li>样品通过后安排小批试生产，查看批量生产问题，并在此期间进行调整改善</li></ul><h2 id="移交生产"><a href="#移交生产" class="headerlink" title="移交生产"></a>移交生产</h2><ul><li>在产品移交会议评审工艺、工装、设备等是否满足批量生产要求，对产品进行移交生产</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作流 </tag>
            
            <tag> 个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 软件（CAD快捷方式）</title>
      <link href="/undefined/4c71.html"/>
      <url>/undefined/4c71.html</url>
      
        <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><div class="table-container"><table><thead><tr><th style="text-align:center">字符串输入</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">%%d / %%127</td><td style="text-align:center">°</td></tr><tr><td style="text-align:center">%%c / %%129</td><td style="text-align:center">φ</td></tr><tr><td style="text-align:center">%%p / %%128</td><td style="text-align:center">±</td></tr><tr><td style="text-align:center">%%33</td><td style="text-align:center">！</td></tr><tr><td style="text-align:center">%%34</td><td style="text-align:center">“ ”</td></tr><tr><td style="text-align:center">%%35</td><td style="text-align:center">#</td></tr><tr><td style="text-align:center">%%36</td><td style="text-align:center">$</td></tr><tr><td style="text-align:center">%%37</td><td style="text-align:center">%</td></tr><tr><td style="text-align:center">%%38</td><td style="text-align:center">&amp;</td></tr><tr><td style="text-align:center">%%39</td><td style="text-align:center">‘ ’</td></tr><tr><td style="text-align:center">%%40</td><td style="text-align:center">（</td></tr><tr><td style="text-align:center">%%41</td><td style="text-align:center">）</td></tr><tr><td style="text-align:center">%%42</td><td style="text-align:center">*</td></tr><tr><td style="text-align:center">%%43</td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">%%44</td><td style="text-align:center">，</td></tr><tr><td style="text-align:center">%%45-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">%%46</td><td style="text-align:center">。</td></tr><tr><td style="text-align:center">%%47</td><td style="text-align:center">/</td></tr><tr><td style="text-align:center">%%48~57</td><td style="text-align:center">0~9</td></tr><tr><td style="text-align:center">%%58</td><td style="text-align:center">:</td></tr><tr><td style="text-align:center">%%59</td><td style="text-align:center">;</td></tr><tr><td style="text-align:center">%%60</td><td style="text-align:center">&lt;</td></tr><tr><td style="text-align:center">%%61</td><td style="text-align:center">=</td></tr><tr><td style="text-align:center">%%62</td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center">%%63</td><td style="text-align:center">?</td></tr><tr><td style="text-align:center">%%64</td><td style="text-align:center">@</td></tr><tr><td style="text-align:center">%%65~9</td><td style="text-align:center">A~Z</td></tr><tr><td style="text-align:center">%%91</td><td style="text-align:center">[</td></tr><tr><td style="text-align:center">%%92</td><td style="text-align:center">\</td></tr><tr><td style="text-align:center">%%93</td><td style="text-align:center">]</td></tr><tr><td style="text-align:center">%%94</td><td style="text-align:center">^</td></tr><tr><td style="text-align:center">%%95</td><td style="text-align:center">_</td></tr><tr><td style="text-align:center">%%96</td><td style="text-align:center">‘ ‘</td></tr><tr><td style="text-align:center">%%97~122</td><td style="text-align:center">a~z</td></tr><tr><td style="text-align:center">%%123</td><td style="text-align:center">{</td></tr><tr><td style="text-align:center">%%124</td><td style="text-align:center">\</td><td></td></tr><tr><td style="text-align:center">%%125</td><td style="text-align:center">}</td></tr><tr><td style="text-align:center">%%124</td><td style="text-align:center">\</td><td></td></tr><tr><td style="text-align:center">%%125</td><td style="text-align:center">}</td></tr><tr><td style="text-align:center">%%126</td><td style="text-align:center">~</td></tr><tr><td style="text-align:center">%%130</td><td style="text-align:center">α</td></tr><tr><td style="text-align:center">%%131</td><td style="text-align:center">β</td></tr><tr><td style="text-align:center">%%132</td><td style="text-align:center">δ</td></tr><tr><td style="text-align:center">%%133</td><td style="text-align:center">i</td></tr><tr><td style="text-align:center">%%138</td><td style="text-align:center">0上标</td></tr><tr><td style="text-align:center">%%139</td><td style="text-align:center">1上标</td></tr><tr><td style="text-align:center">%%140</td><td style="text-align:center">2上标</td></tr><tr><td style="text-align:center">%%141</td><td style="text-align:center">3上标</td></tr><tr><td style="text-align:center">%%148</td><td style="text-align:center">9上标</td></tr><tr><td style="text-align:center">%%149~157</td><td style="text-align:center">1~9</td></tr><tr><td style="text-align:center">%%163</td><td style="text-align:center">△</td></tr><tr><td style="text-align:center">%%164</td><td style="text-align:center">▽</td></tr><tr><td style="text-align:center">%%u</td><td style="text-align:center">_（下划线）</td></tr><tr><td style="text-align:center">%%o</td><td style="text-align:center">—（上划线）</td></tr></tbody></table></div><h2 id="F-键"><a href="#F-键" class="headerlink" title="F#键"></a>F#键</h2><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">F1</td><td style="text-align:center">获取帮助</td></tr><tr><td style="text-align:center">F2</td><td style="text-align:center">实现作图窗和文本窗口的切换</td></tr><tr><td style="text-align:center">F3</td><td style="text-align:center">控制是否实现对象自动捕捉</td></tr><tr><td style="text-align:center">F4</td><td style="text-align:center">数字化仪控制</td></tr><tr><td style="text-align:center">F5</td><td style="text-align:center">等轴测平面切换</td></tr><tr><td style="text-align:center">F6</td><td style="text-align:center">控制状态行上坐标的显示方式</td></tr><tr><td style="text-align:center">F7</td><td style="text-align:center">栅格显示模式控制</td></tr><tr><td style="text-align:center">F8</td><td style="text-align:center">正交模式控制</td></tr><tr><td style="text-align:center">F9</td><td style="text-align:center">栅格捕捉模式控制</td></tr><tr><td style="text-align:center">F10</td><td style="text-align:center">极轴模式控制</td></tr><tr><td style="text-align:center">F11</td><td style="text-align:center">对象追踪式控制</td></tr></tbody></table></div><h2 id="ctrl键"><a href="#ctrl键" class="headerlink" title="ctrl键"></a>ctrl键</h2><div class="table-container"><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl+B</td><td style="text-align:center">栅格捕捉模式控制(F9)</td></tr><tr><td style="text-align:center">Ctrl+C</td><td style="text-align:center">将选择的对象复制到剪切板上</td></tr><tr><td style="text-align:center">Ctrl+F</td><td style="text-align:center">控制是否实现对象自动捕捉(f3)</td></tr><tr><td style="text-align:center">Ctrl+G</td><td style="text-align:center">栅格显示模式控制(F7)</td></tr><tr><td style="text-align:center">Ctrl+J</td><td style="text-align:center">重复执行上一步命令</td></tr><tr><td style="text-align:center">Ctrl+K</td><td style="text-align:center">超级链接</td></tr><tr><td style="text-align:center">Ctrl+N</td><td style="text-align:center">新建图形文件</td></tr><tr><td style="text-align:center">Ctrl+M</td><td style="text-align:center">打开选项对话框</td></tr><tr><td style="text-align:center">Ctrl+1</td><td style="text-align:center">打开特性对话框</td></tr><tr><td style="text-align:center">Ctrl+2</td><td style="text-align:center">打开图象资源管理器</td></tr><tr><td style="text-align:center">Ctrl+6</td><td style="text-align:center">打开图象数据原子</td></tr><tr><td style="text-align:center">Ctrl+0</td><td style="text-align:center">打开图象文件</td></tr><tr><td style="text-align:center">Ctrl+P</td><td style="text-align:center">打开打印对说框</td></tr><tr><td style="text-align:center">Ctrl+S</td><td style="text-align:center">保存文件</td></tr><tr><td style="text-align:center">Ctrl+U</td><td style="text-align:center">极轴模式控制(F10)</td></tr><tr><td style="text-align:center">Ctrl+V</td><td style="text-align:center">粘贴剪贴板上的内容</td></tr></tbody></table></div><h2 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h2><div class="table-container"><table><thead><tr><th style="text-align:center">输入内容</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">dra</td><td style="text-align:center">半径标注</td></tr><tr><td style="text-align:center">ddi</td><td style="text-align:center">直径标注</td></tr><tr><td style="text-align:center">dal</td><td style="text-align:center">对齐标注</td></tr><tr><td style="text-align:center">dan</td><td style="text-align:center">角度标注</td></tr><tr><td style="text-align:center">dli</td><td style="text-align:center">线性标注</td></tr></tbody></table></div><h2 id="字符快捷"><a href="#字符快捷" class="headerlink" title="字符快捷"></a>字符快捷</h2><div class="table-container"><table><thead><tr><th style="text-align:center">输入内容</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">AA</td><td style="text-align:center">测量区域和周长(area)</td></tr><tr><td style="text-align:center">AL</td><td style="text-align:center">对齐(align)</td></tr><tr><td style="text-align:center">AR</td><td style="text-align:center">阵列(array)</td></tr><tr><td style="text-align:center">AP</td><td style="text-align:center">加载*lsp程系</td></tr><tr><td style="text-align:center">AV</td><td style="text-align:center">打开视图对话框(dsviewer)</td></tr><tr><td style="text-align:center">SE</td><td style="text-align:center">打开对相自动捕捉对话框</td></tr><tr><td style="text-align:center">ST</td><td style="text-align:center">打开字体设置对话框(style)</td></tr><tr><td style="text-align:center">SO</td><td style="text-align:center">绘制二围面( 2d solid)</td></tr><tr><td style="text-align:center">SP</td><td style="text-align:center">拼音的校核(spell)</td></tr><tr><td style="text-align:center">SC</td><td style="text-align:center">缩放比例 (scale)</td></tr><tr><td style="text-align:center">SN</td><td style="text-align:center">栅格捕捉模式设置(snap)</td></tr><tr><td style="text-align:center">DT</td><td style="text-align:center">单行文本的设置(dtext)</td></tr><tr><td style="text-align:center">MT</td><td style="text-align:center">多行文本</td></tr><tr><td style="text-align:center">DI</td><td style="text-align:center">测量两点间的距离</td></tr><tr><td style="text-align:center">OI</td><td style="text-align:center">插入外部对相</td></tr><tr><td style="text-align:center">EX</td><td style="text-align:center">延伸</td></tr><tr><td style="text-align:center">div</td><td style="text-align:center">定数等分</td></tr><tr><td style="text-align:center">BR</td><td style="text-align:center">打断</td></tr><tr><td style="text-align:center">ED</td><td style="text-align:center">文本编辑</td></tr><tr><td style="text-align:center">MI</td><td style="text-align:center">镜像</td></tr><tr><td style="text-align:center">LA</td><td style="text-align:center">图层</td></tr><tr><td style="text-align:center">ME</td><td style="text-align:center">定距离等分</td></tr><tr><td style="text-align:center">CO</td><td style="text-align:center">复制</td></tr><tr><td style="text-align:center">TOL</td><td style="text-align:center">形位公差符号</td></tr><tr><td style="text-align:center">EL</td><td style="text-align:center">椭圆</td></tr><tr><td style="text-align:center">REC</td><td style="text-align:center">矩形</td></tr><tr><td style="text-align:center">TR</td><td style="text-align:center">修剪</td></tr><tr><td style="text-align:center">XL</td><td style="text-align:center">构造线</td></tr><tr><td style="text-align:center">RE</td><td style="text-align:center">重新生成</td></tr><tr><td style="text-align:center">POL</td><td style="text-align:center">正多边形</td></tr><tr><td style="text-align:center">DR</td><td style="text-align:center">使选择的图形放置于顶层、下层</td></tr><tr><td style="text-align:center">UCS</td><td style="text-align:center">重新定义坐标系的位置</td></tr></tbody></table></div><h2 id="单个字符"><a href="#单个字符" class="headerlink" title="单个字符"></a>单个字符</h2><div class="table-container"><table><thead><tr><th style="text-align:center">输入内容</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">绘圆弧</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">定义块</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">画圆</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">尺寸资源管理器</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">删除</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">倒圆角</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">对相组合</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">填充</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">填充</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">拉伸</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">文本输入</td></tr><tr><td style="text-align:center">W</td><td style="text-align:center">定义块并保存到硬盘中</td></tr><tr><td style="text-align:center">L</td><td style="text-align:center">直线</td></tr><tr><td style="text-align:center">M</td><td style="text-align:center">移动</td></tr><tr><td style="text-align:center">X</td><td style="text-align:center">炸开</td></tr><tr><td style="text-align:center">V</td><td style="text-align:center">设置当前坐标</td></tr><tr><td style="text-align:center">U</td><td style="text-align:center">恢复上一次操做</td></tr><tr><td style="text-align:center">O</td><td style="text-align:center">偏移</td></tr><tr><td style="text-align:center">P</td><td style="text-align:center">移动</td></tr><tr><td style="text-align:center">Z</td><td style="text-align:center">缩放</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机械制图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记（十七）--进程与线程</title>
      <link href="/undefined/f91f.html"/>
      <url>/undefined/f91f.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h3 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h3><ul><li>是程序的一次执行过程，或者是运行的一个程序；是动态的过程：有自身的产生、存在和消亡的过程</li></ul><h3 id="线程概念"><a href="#线程概念" class="headerlink" title="线程概念"></a>线程概念</h3><ul><li>线程由进程创建，是进程的一个实体</li><li>一个进程可以拥有多个线程</li></ul><h3 id="其他相关概念"><a href="#其他相关概念" class="headerlink" title="其他相关概念"></a>其他相关概念</h3><ul><li>单线程：同一时刻，只允许执行一个线程</li><li>多线程：同一时刻可以执行多个线程</li><li>并发：同一时刻，多个任务交替执行，如单核CPU实现多任务</li><li>并行：同一时刻，多任务同时执行，如多核CPU可实现并行</li></ul><h2 id="线程基本使用方式"><a href="#线程基本使用方式" class="headerlink" title="线程基本使用方式"></a>线程基本使用方式</h2><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ul><li>继承Thread类，重写run方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//填写自己的逻辑代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h4><p><img src="/undefined/f91f/运行原理.png" alt="运行原理"></p><h2 id="runnable接口"><a href="#runnable接口" class="headerlink" title="runnable接口"></a>runnable接口</h2><h3 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h3><ul><li><p>实现runnable接口，重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//逻辑代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="多线程执行"><a href="#多线程执行" class="headerlink" title="多线程执行"></a>多线程执行</h4><ul><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//逻辑代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="type">Test</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="type">Test</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t1);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t2);</span><br><span class="line">thread1.start();</span><br><span class="line">thread2.start();</span><br><span class="line">System.out.println(<span class="string">&quot;main线程继续执行...&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="运行原理-1"><a href="#运行原理-1" class="headerlink" title="运行原理"></a>运行原理</h4><p><img src="/undefined/f91f/多线程运行原理.png" alt="多线程运行原理"></p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><p>Java是单继承机制，在某些情况下一个类已经继承了某个父类，这种情况下无法使用继承Thread类方法来创建线程</p></li><li><p>实现 Runnable接口方式更加适合多个线程共享一个资源的情况，避免了单继承机制</p></li></ul><h3 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h3><ul><li><p>当线程完成任务后，会自动退出</p></li><li><p>通知模式：通过变量控制run方法退出的方式停止线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">fool</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//控制循环</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//循环计次</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (fool) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">            fool = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> setName <span class="comment">//设置线程名称，使之与参数name相同</span></span><br><span class="line"><span class="number">2.</span> getName <span class="comment">//返回</span></span><br><span class="line"><span class="number">3.</span> start <span class="comment">//运行该线程;Java虚拟机底层调用该线程的start0方法</span></span><br><span class="line"><span class="number">4.</span> run <span class="comment">//调用线程对象的run方法</span></span><br><span class="line"><span class="number">5.</span> setPriority <span class="comment">//更改线程的优先级</span></span><br><span class="line"><span class="number">6.</span> getPriority <span class="comment">//获取线程的优先级</span></span><br><span class="line"><span class="number">7.</span> sleep <span class="comment">//在指定的毫秒数内让当前正在执行的线程休眠(暂停执行)</span></span><br><span class="line"><span class="number">8.</span> interrupt <span class="comment">//中断线程</span></span><br><span class="line"><span class="number">9.</span> yield <span class="comment">//线程礼让，让出cpu，让其他线程执行，礼让时间不确定，所以礼让不一定成功</span></span><br><span class="line"><span class="number">10.</span> join <span class="comment">//线程插队，插队的线程一旦插队成功，则先执行完插入的线程的所有任务</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        t.setName(<span class="string">&quot;执笔&quot;</span>);<span class="comment">//设置线程名字</span></span><br><span class="line">        t.setPriority(Thread.MIN_PRIORITY);<span class="comment">//设置优先级为最小</span></span><br><span class="line">        t.start();<span class="comment">//运行线程</span></span><br><span class="line"></span><br><span class="line">        System.out.println(t.getName());<span class="comment">//获取线程名字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//休眠1s</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot;等待中...&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        t.interrupt();<span class="comment">//中断线程</span></span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; 线程的优先级 &quot;</span> + t.getPriority());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 吃包子...&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//线程休眠20s</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;休眠中...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4><ul><li>start底层会创建新的线程，调用run()，run就是一个简单的方法调用，不会启动新线程</li><li>线程的优先级范围（1-10级）</li><li>interrupt 中断线程，但并没有真正结束线程，一般用于中断正在休眠的线程</li><li>sleep 线程的静态方法，使当前线程休眠</li></ul><h3 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h3><ul><li>也叫工作线程，当线程的任务执行玩或者通知方式结束</li></ul><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><ul><li>一般为工作线程服务，当所有的用户线程结束，守护线程自动结束</li><li>常见的守护线程：垃圾回收机制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException  &#123;</span><br><span class="line">        <span class="type">MyDaemonThread</span> <span class="variable">dt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDaemonThread</span>();</span><br><span class="line">        <span class="comment">//将dt 设置为守护线程，当所有线程结束后，dt也就自动结束</span></span><br><span class="line">        <span class="comment">//如果没有设置，那么即使main线程执行完毕，dt也不退出</span></span><br><span class="line">        dt.setDaemon(<span class="literal">true</span>);</span><br><span class="line">dt.start();</span><br><span class="line">        <span class="keyword">for</span> (inti= <span class="number">1</span>; i&lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        System.out.println(“执笔学习中-----<span class="string">&quot; + i);</span></span><br><span class="line"><span class="string">        &#125;  </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class MyDaemonThread extends Thread &#123;</span></span><br><span class="line"><span class="string">    public void run() &#123;</span></span><br><span class="line"><span class="string">        for (;;)&#123;</span></span><br><span class="line"><span class="string">        try &#123;</span></span><br><span class="line"><span class="string">        Thread.sleep(50);</span></span><br><span class="line"><span class="string">        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="string">                //TODO Auto-generated catch block</span></span><br><span class="line"><span class="string">                e.printStackTrace();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">System.out.println(&quot;</span>学习中~~~<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h3><p><img src="/undefined/f91f/线程状态转换.png" alt="线程状态转换"></p><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><ul><li>当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作</li></ul><h4 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h4><h5 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (对象) &#123;<span class="comment">//得到对象的锁，才能操作同步代码</span></span><br><span class="line">    <span class="comment">//需要被同步的代码;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul><li>对象互斥锁来保证共享数据操作的完整性</li><li>每个对象都对应于一个可称为“互斥锁”的标记，这个标记用来保证在任一时刻,只能有一个线程访问该对象</li><li>关键字synchronized来与对象的互斥锁联系。当某个对象用synchronized修饰时，表明该对象在任一时刻只能由一个线程访问</li><li>同步的局限性：导致程序的执行效率低</li><li>同步方法（非静态的）的锁可以是this,也可以是其他对象(要求是同一个对象)</li><li>同步方法（静态的）的锁为当前类本身</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>同步方法如果没有使用static修饰（非静态方法）：默认锁对象为<strong>this</strong></li><li>如果方法使用static修饰（静态方法），默认锁对象：<strong>当前类.class</strong></li></ul><h3 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h3><ul><li>多个线程都占用了对方的锁资源，会导致死锁，需要尽量避免死锁发生</li></ul><h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h3><h4 id="释放锁情形"><a href="#释放锁情形" class="headerlink" title="释放锁情形"></a>释放锁情形</h4><ul><li>当前线程的同步方法、同步代码执行结束</li><li>当前线程在同步代码块、同步方法中遇到break、return</li><li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致程序异常结束</li><li>当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁</li></ul><h4 id="不会释放锁情形"><a href="#不会释放锁情形" class="headerlink" title="不会释放锁情形"></a>不会释放锁情形</h4><ul><li>线程执行同步代码块、同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行，不会释放锁</li><li>线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，不会释放锁</li></ul>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建静态博客</title>
      <link href="/undefined/b4a0.html"/>
      <url>/undefined/b4a0.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题解决链接汇总"><a href="#问题解决链接汇总" class="headerlink" title="问题解决链接汇总"></a>问题解决链接汇总</h2><ol><li>代码高亮不显示{}</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/xingranzhihuo/article/details/113830311</span><br></pre></td></tr></table></figure><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> 文件名</span><br></pre></td></tr></table></figure><ul><li>在source文件夹下的_posts文件夹下创建了.md文档</li></ul><h2 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h2><p>1、安装图片路径转换插件 hexo-asset-image</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npmpm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>2、在根目录下修改配置文件_config.yml中的post_asset_folder:false改为true</p><p>3、插入图片时使用如下方式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset<span class="emphasis">_img test.jpg This is an test image %&#125;</span></span><br></pre></td></tr></table></figure><ul><li>test.jpg：图片名称</li><li>This is an test image：图片描述</li></ul>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zbTools软件开发笔记</title>
      <link href="/undefined/51156.html"/>
      <url>/undefined/51156.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本文记录zbTools软件开发进度</p></div><div class="timeline undefined"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>开发进度时间线</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>2024-09-03</p></div></div><div class="timeline-item-content"><p>1、增加重置功能</p><p>2、修复不计算电压值计算输入模块无法隐藏问题</p><p>3、调整为IOS版本</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>2024-02-09</p></div></div><div class="timeline-item-content"><p>1、完成基础样式布局</p><p>2、完成参数计算功能模块</p><p>3、完成v1.0版本</p></div></div></div><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><ul><li><p><strong>功能说明</strong>：本软件致力于协助自身处理一些简单的重复性操作，以达到操作目的为主，布局美化为次要（其实是不会布局）</p></li><li><p><strong>内容说明</strong>：软件内容等布局均参考自网络（代码自己写的），若有雷同纯属巧合</p></li><li><p><strong>运行系统要求</strong>：搭载了<code>HarmonyOs 4.0</code>版本系统手机</p></li></ul><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/zbTools_icon.JPG" style="zoom: 33%;"></p><h3 id="功能页"><a href="#功能页" class="headerlink" title="功能页"></a>功能页</h3><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/zbtolls_amp.png" style="zoom:50%;"></p>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HarmonyOS4.0 </tag>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 机械制图视角区分</title>
      <link href="/undefined/38564.html"/>
      <url>/undefined/38564.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一视角"><a href="#第一视角" class="headerlink" title="第一视角"></a>第一视角</h2><ul><li><p>使用第一角投影的国家有：中国、德国、法国、前苏联</p></li><li><p>称第一象限法，俗称投影法</p></li><li><p><strong>第一角人不动、物体动，简单说就是左视图在右边，右视图在左边</strong></p><p><img src="/undefined/38564/第一视角.png" alt="第一视角"></p></li></ul><h2 id="第三视角"><a href="#第三视角" class="headerlink" title="第三视角"></a>第三视角</h2><ul><li><p>使用第三角投影的国家有：美国、英国、日本</p></li><li><p>称第三象限法，俗称镜面法</p></li><li><strong>第三角物体不动、人动；简单说就是左视图在左边，右视图在右边</strong></li></ul><p><img src="/undefined/38564/第三视角.png" alt="第三视角"></p>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机械制图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国家标准号记录</title>
      <link href="/undefined/36791.html"/>
      <url>/undefined/36791.html</url>
      
        <content type="html"><![CDATA[<h2 id="模塑件"><a href="#模塑件" class="headerlink" title="模塑件"></a>模塑件</h2><div class="table-container"><table><thead><tr><th style="text-align:center">标准号</th><th style="text-align:center">名称</th></tr></thead><tbody><tr><td style="text-align:center"><a href="http://down.foodmate.net/standard/yulan.php?itemid=30953">GB/T 14486 - 2008</a></td><td style="text-align:center">塑料模塑件尺寸公差</td></tr><tr><td style="text-align:center"><a href="https://www.doc88.com/p-77042258599.html">GB/T1804 - 2000</a></td><td style="text-align:center">一般公差未注公差的线性和角度公差尺寸的公差</td></tr></tbody></table></div><h2 id="橡胶件"><a href="#橡胶件" class="headerlink" title="橡胶件"></a>橡胶件</h2><div class="table-container"><table><thead><tr><th style="text-align:center">标准号</th><th style="text-align:center">名称</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.doc88.com/p-61568374486.html">GB/T 3672.1 - 2002</a></td><td style="text-align:center">橡胶制品的公差</td></tr></tbody></table></div><h2 id="机械制图标注规则"><a href="#机械制图标注规则" class="headerlink" title="机械制图标注规则"></a>机械制图标注规则</h2><div class="table-container"><table><thead><tr><th style="text-align:center">标准号</th><th style="text-align:center">名称</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.doc88.com/p-9466656966071.html">GB/T 17450 - 1998</a></td><td style="text-align:center">机械制图 图线</td></tr><tr><td style="text-align:center"><a href="https://www.doc88.com/p-7139542393273.html">GB/T 4457.4 - 2002</a></td><td style="text-align:center">机械制图 图样画法</td></tr></tbody></table></div><h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><div class="table-container"><table><thead><tr><th style="text-align:center">标准号</th><th style="text-align:center">名称</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.doc88.com/p-7364820327946.html">QC/ T 977 - 2014</a></td><td style="text-align:center">汽车电子油门踏板总成技术条件</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 机械加工方法</title>
      <link href="/undefined/6881.html"/>
      <url>/undefined/6881.html</url>
      
        <content type="html"><![CDATA[<h2 id="公差等级"><a href="#公差等级" class="headerlink" title="公差等级"></a>公差等级</h2><p><img src="/undefined/6881/常用加工方法能达到的标准公差等级和成本关系.png" alt="常用加工方法能达到的标准公差等级和成本关系"></p><p><img src="/undefined/6881/各种加工方法能达到的标准公差等级.png" alt="各种加工方法能达到的标准公差等级"></p><p><img src="/undefined/6881/IT公差等级表.png" alt="IT公差等级表"></p><h2 id="车削"><a href="#车削" class="headerlink" title="车削"></a>车削</h2><ul><li>车削是将工件固定在旋转的工件夹持装置上，然后使用刀具将工件上的材料逐渐切削以获得所需形状和尺寸</li><li>这种加工方式适用于制造圆柱形零件，如轴和套筒</li><li>车削的方式和刀具选择影响着最终产品的外形和表面粗糙度</li><li>车削加工精度一般为IT8—IT7，表面粗糙度为1.6—0.8μm<ol><li>粗车力求在不降低切速的条件下，采用大的切削深度和大进给量以提高车削效率，但加工精度只能达IT11，表面粗糙度为Rα20—10μm</li><li>半精车和精车尽量采用高速而较小的进给量和切削深度，加工精度可达IT10—IT7，表面粗糙度为Rα10—0.16μm</li><li>在高精度车床上用精细修研的金刚石车刀高速精车有色金属件，可使加工精度达到IT7—IT5,表面粗糙度为Rα0.04—0.01μm，这种车削称为”镜面车削”</li></ol></li></ul><p><img src="/undefined/6881/车外圆.webp" alt="车外圆"></p><p><img src="/undefined/6881/常用车刀.png" alt></p><ul><li>视频地址：</li></ul><div class="btns rounded grid5">            <a class="button no-text-decoration" href="https://v.douyin.com/iR432Ntn/" title="普通车床加工"><img src="/undefined/6881/fas fa-video">普通车床加工</a><a class="button no-text-decoration" href="https://v.douyin.com/iR4TUh1j/" title="数控车床加工"><img src="/undefined/6881/fas fa-video">数控车床加工</a><a class="button no-text-decoration" href="https://v.douyin.com/iR4TtKsB/" title="加工中心加工"><img src="/undefined/6881/fas fa-video">加工中心加工</a>          </div><h2 id="铣削"><a href="#铣削" class="headerlink" title="铣削"></a>铣削</h2><ul><li>铣削是指使用旋转的多刃刀具切削工件，是高效率的加工方法</li><li>适于加工平面、沟槽、各种成形面(如花键、齿轮和螺纹)和模具的特殊形面等</li><li><p>按照铣削时主运动速度方向与工件进给方向的相同或相反，又分为<strong>顺铣和逆铣</strong></p></li><li><p>铣削的加工精度一般可达IT8—IT7，表面粗糙度为6.3—1.6μm</p><ol><li>粗铣时的加工精度IT11—IT13,表面粗糙度5—20μm</li><li>半精铣时的加工精度IT8—IT11，表面粗糙度2.5—10μm</li><li>精铣时的加工精度IT16—IT8，表面粗糙度0.63—5μm</li></ol></li></ul><p><img src="/undefined/6881/铣削.gif" alt></p><p><img src="/undefined/6881/铣削2.gif" alt></p><p><img src="/undefined/6881/常用铣刀.png" alt></p><h2 id="刨削"><a href="#刨削" class="headerlink" title="刨削"></a>刨削</h2><ul><li>刨削加工是用刨刀对工件作水平相对直线往复运动的切削加工方法</li><li>主要用于零件的外形加工</li><li>刨削加工精度一般可达IT9—IT7，表面粗糙度为Ra6.3—1.6μm<ol><li>粗刨加工精度可达IT12—IT11，表面粗糙度为25—12.5μm</li><li>半精刨加工精度可达IT10—IT9，表面粗糙度为6.2—3.2μm</li><li>精刨加工精度可达IT8—IT7，表面粗糙度为3.2—1.6μm</li></ol></li></ul><p><img src="/undefined/6881/刨削.webp" alt></p><h2 id="钻削"><a href="#钻削" class="headerlink" title="钻削"></a>钻削</h2><ul><li>钻孔是用钻头在实体工件上钻出孔的方法，常用的钻头是麻花钻</li><li>钻孔时，首先根据孔径大小选择钻头。一般，当孔径小于30mm时，可一次钻出；大于30mm时，应先钻出一小孔，然后再用扩孔钻将其扩大</li><li>扩孔是对已有孔进行扩大的加工方法称为扩孔，仅为了扩大孔的直径的扩孔可用麻花钻，在扩大孔的直径的同时提高孔形位精度的扩孔采用专门的扩孔钻其加工精度一般为IT10～IT8，表面粗糙度为Ra6.3～3.2μm。扩孔可作为要求不高孔的最终加工，也可作为精加工(如铰孔)前的预加工</li><li>铰孔是用铰刀在扩孔或半精镗后的孔壁上切除微量金属层，以提高孔的尺寸精度和减小表面粗糙度值的一种精加工方法。加工精度可达IT7～IT6，表面粗糙度为Ra0.8～0.4μm。铰刀有手用铰刀和机用铰刀两种，手用铰刀工作部分较长，机用铰刀工作部分较短</li><li>锪孔是指在已加工孔上加工圆锥形沉头孔、圆柱形沉头孔和端面凸台的方法。锪孔用的刀具统称为锪钻</li></ul><p><img src="https://inews.gtimg.com/newsapp_match/0/1842906063/0.jpg" alt></p><p><img src="/undefined/6881/加工刀具.png" alt="加工刀具" style="zoom:67%;"></p><h2 id="镗削"><a href="#镗削" class="headerlink" title="镗削"></a>镗削</h2><ul><li>镗刀旋转作主运动，工件或镗刀作进给运动的切削加工方法。镗削加工主要在铣镗床、镗床上进行。镗孔是对锻出、铸出或钻出孔进一步加工</li><li>镗孔可以分为粗镗、半精镗、精镗<ul><li>粗镗精度可达IT12～IT11，表面粗糙度为Ra25～12.5μm</li><li>半精镗精度可达IT10～IT9，表面粗糙度为Ra6.3～3.2μm</li><li>精镗精度可达IT8～IT7，表面粗糙度为Ra1.6～0.8μm</li></ul></li></ul><p><img src="/undefined/6881/MyBlog/source/_posts\机械基础 - 机械加工方法.assets\车内孔.webp" alt></p><h2 id="磨削"><a href="#磨削" class="headerlink" title="磨削"></a>磨削</h2><ul><li><p>磨削分为平面磨削、外圆磨削、内圆磨削、轮廓磨削</p><ul><li><p>平面磨削用于加工平坦的工件表面，以获得平整的表面和精确的尺寸</p></li><li><p>外圆磨削用于加工圆柱形工件的外圆表面，例如轴、销等</p></li><li><p>内圆磨削用于加工孔的内表面，例如内孔、轴孔等</p></li><li><p>轮廓磨削用于加工复杂的轮廓形状，例如模具和工具的刃口</p></li></ul></li><li><p>特点：</p><ul><li>磨削速度很高，每秒可达 30m～50m；磨削温度较高，可达1000℃～1500℃；磨削过程历时很短，只有万分之一秒左右</li><li>磨削加工可以获得较高的加工精度和很小的表面粗糙度值，磨具的粒度、磨削速度和磨削深度等因素其表面粗糙度可以达到Ra≤0.1μm，甚至更低</li><li>磨削不但可以加工软材料，如未淬火钢、铸铁和有色金属等，而且还可以加工淬火钢及其他刀具不能加工的硬质材料，如瓷件、硬质合金等</li><li>磨削时的切削深度很小，在一次行程中所能切除的金属层很薄</li></ul></li></ul><p><img src="https://img.mp.sohu.com/upload/20170512/4112627186c447149fe96bf018ac93ec_th.png" alt="img"></p><p><a href="https://zhuanlan.zhihu.com/p/667777554">100+动图，带你轻松看懂加工工艺 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/277374118">机床的最高加工精度是多少？ - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/657515679">8种常见的机械加工工艺，建议收藏 - 知乎 (zhihu.com)</a></p><p><a href="https://www.guokr.com/article/441793">酷炫动图（三十二）：机械加工篇| 果壳 科技有意思 (guokr.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工艺 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 机械制图公差标注要求</title>
      <link href="/undefined/42451.html"/>
      <url>/undefined/42451.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>公差标注因考虑：市场成本=研发费用+生产费用+材料+加工成本+利润</p></div><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><ul><li><strong>就低不就高</strong>：尽量标注的公差要大，也就是上，下偏差的差值大。这意味着更低的加工费用</li><li><p><strong>能未注公差就未注公差</strong>：标注的公差，用一般的加工方法就可以达到</p></li><li><p><strong>能放大公差就放大公差</strong></p></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="选择合适的公差等级"><a href="#选择合适的公差等级" class="headerlink" title="选择合适的公差等级"></a>选择合适的公差等级</h4><ul><li>选择合适的公差等级需要考虑产品的制造难度和精度要求、使用性能和制造工艺以及制造的经济性等多个因素</li></ul><h4 id="确定基准面"><a href="#确定基准面" class="headerlink" title="确定基准面"></a>确定基准面</h4><ul><li>基准面应该是产品的主要工作面或装配面</li></ul><ol><li><strong>功能性</strong></li></ol><ul><li>基准面应该能够满足产品的主要功能需求</li><li>例如，对于一个轴类零件，其基准面应该是能够承受载荷的主要工作面</li></ul><ol><li>精度要求</li></ol><ul><li>基准面的精度应该能够满足产品的精度要求</li><li>如果产品的尺寸精度要求较高，那么基准面的精度也应该相应提高</li></ul><ol><li><strong>稳定性</strong></li></ol><ul><li>基准面应该具有足够的稳定性，以确保尺寸偏差的准确性</li><li>例如，对于一些需要长期使用的产品，其基准面应该是稳定的，不容易受到磨损或变形的影响</li></ul><ol><li><strong>可加工性</strong></li></ol><ul><li>基准面应该能够方便地进行加工和测量</li><li>如果基准面难以加工或测量，那么这可能会导致生产效率低下或测量误差增大</li></ul><ol><li><strong>统一性</strong></li></ol><ul><li>对于一批产品，其基准面应该统一，以确保尺寸偏差的一致性。这有助于保证产品的互换性和装配精度</li></ul><ol><li>基准面应该具有足够的面积和质量，以确保其稳定性和承重能力</li><li>基准面应该避免选择在应力集中区域或容易受到热膨胀影响的区域</li></ol><h4 id="标注公差值"><a href="#标注公差值" class="headerlink" title="标注公差值"></a>标注公差值</h4><ol><li><strong>制造设备的精度和误差</strong></li></ol><ul><li>制造设备的精度和误差是影响产品精度的关键因素之一</li></ul><ol><li><strong>制造工艺的稳定性</strong></li></ol><ul><li>不同的制造工艺有着不同的稳定性</li><li>对于一些不够稳定的工艺，需要适当增加公差值以保证产品的可靠性</li></ul><ol><li><strong>材料的特性</strong></li></ol><ul><li>材料的特性和加工难度也会影响公差值的确定</li><li>例如，一些难以加工的材料可能需要更严格的公差值要求</li></ul><ol><li><strong>客户的特殊要求</strong></li></ol><ul><li>客户可能会对产品的精度和质量提出特殊要求</li></ul><h4 id="注明公差符号"><a href="#注明公差符号" class="headerlink" title="注明公差符号"></a>注明公差符号</h4><ol><li><strong>“IT”表示基础标准</strong></li></ol><ul><li><p>指公差值的基础等级</p></li><li><p>在机械制造中，基础标准是用于规定公差值的基础，通常用于一般用途的机械零件</p></li><li>根据国际标准，基础标准分为20个等级，从IT01到IT18，数字越小，公差等级越高，精度要求越严格</li></ul><ol><li><strong>“H”表示上限</strong></li></ol><ul><li>是指公差值的上限</li><li>例如，一个孔的直径为30H10，表示该孔的直径公差上限为10微米</li></ul><ol><li><strong>“L”表示下限</strong></li></ol><ul><li>是指公差值的下限</li><li>例如，一个轴的直径为30L10，表示该轴的直径公差下限为10微米</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机械制图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 机械制图尺寸标注规则</title>
      <link href="/undefined/18589.html"/>
      <url>/undefined/18589.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><code>GB/T 17450-1998《机械制图 图线》</code> <code>GB/T4457.4-2002《机械制图 图样画法》</code></p></div><h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><ul><li>机件的真实大小应以图样上所注的尺寸数值为依据，与图形的大小及绘图的准确度无关</li><li>图样中（包括技术要求和其它说明）的尺寸，以mm为单位时，不需标注计量单位的代号或名称，如采用其它单位，则必须注明相应的计量单位的代号或名称</li><li>图样中所标注的尺寸，为该图样所示机件的最后完工尺寸，否则应另加说明</li><li>机件的每一尺寸，一般只标注一次，并应标注在反映该结构最清晰的图形上</li></ul><h2 id="尺寸组成"><a href="#尺寸组成" class="headerlink" title="尺寸组成"></a>尺寸组成</h2><ul><li>如下图所示，一个完整的尺寸一般应包括尺寸数字、尺寸线、尺寸界线和表示尺寸线终端的箭头或斜线。</li></ul><p><img src="/undefined/18589/尺寸组成.jpg" alt="尺寸组成"></p><h3 id="尺寸数字"><a href="#尺寸数字" class="headerlink" title="尺寸数字"></a>尺寸数字</h3><ul><li>线性尺寸的数字一般应注写在尺寸线的上方，也允许注写在尺寸线的中断处</li></ul><h3 id="尺寸线"><a href="#尺寸线" class="headerlink" title="尺寸线"></a>尺寸线</h3><ul><li>尺寸线用细实线绘制，不能用其它图线代替，一般也不得与其它图线重合或画在其延长线上</li><li>标注线性尺寸时，尺寸线必须与所标注的线段平行；当有几条互相平行的尺寸线时，大尺寸要注在小尺寸外面，以免尺寸线与尺寸界线相交</li><li>在圆或圆弧上标注直径或半径尺寸时，尺寸线一般应通过圆心或延长线通过圆心</li><li>尺寸线的终端有两种形式，如图所示：箭头适用于各种类型的图样，图中的b为粗实线的宽度；斜线用细实线绘制，图中的h为字体高度</li><li>圆的直径、圆弧半径及角度的尺寸线的终端应画成箭头</li><li>在采用斜线形式时，尺寸线与尺寸界线必须互相垂直</li></ul><p><img src="/undefined/18589/尺寸线.webp" alt="尺寸线"></p><h3 id="尺寸界线"><a href="#尺寸界线" class="headerlink" title="尺寸界线"></a>尺寸界线</h3><ul><li>尺寸界线用细实线绘制，并应由图形的轮廓线、轴线或对称中心线处引出</li><li>也可利用轮廓线、轴线或对称中心线作尺寸界线</li><li>尺寸界线一般应与尺寸线垂直，并超出尺寸线的终端2mm左右</li></ul><h3 id="尺寸注法示例"><a href="#尺寸注法示例" class="headerlink" title="尺寸注法示例"></a>尺寸注法示例</h3><h3 id="线性尺寸的数字方向"><a href="#线性尺寸的数字方向" class="headerlink" title="线性尺寸的数字方向"></a>线性尺寸的数字方向</h3><ul><li><p>第一种方法：尺寸数字应按左上图所示方向注写，并尽可能避免在图示30范围内标注尺寸，当无法避免时可按右上图的形式标注</p></li><li><p>第二种方法：在不致引起误解时，对于非水平方向的尺寸，其数字可水平地注写在尺寸线的中断处，如下面的两图所示。在一张图样中，应尽可能采用同一种方法，一般应采用第一种方法注写</p></li></ul><p><img src="/undefined/18589/线性尺寸的数字方向.webp" alt="线性尺寸的数字方向"></p><h3 id="角度"><a href="#角度" class="headerlink" title="角度"></a>角度</h3><ul><li>尺寸界线应沿径向引出，尺寸线画成圆弧，圆心是角的顶点</li><li>尺寸数字应一律水平书写，一般注在尺寸线的中断处，必要时也可按右图的形式标注</li></ul><p><img src="/undefined/18589/角度.webp" alt="角度"></p><h3 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h3><ul><li>圆的直径尺寸的标注示例</li></ul><p><img src="/undefined/18589/圆.webp" alt="圆"></p><h3 id="圆弧"><a href="#圆弧" class="headerlink" title="圆弧"></a>圆弧</h3><ul><li>圆弧的半径尺寸标注示例</li></ul><p><img src="/undefined/18589/圆弧.webp" alt="圆弧"></p><h3 id="大圆弧"><a href="#大圆弧" class="headerlink" title="大圆弧"></a>大圆弧</h3><ul><li>在图纸范围内无法标出圆心位置时，可按左图标注；不需标出圆心位置时，可按右图标注</li></ul><p><img src="/undefined/18589/大圆弧.webp" alt="大圆弧"></p><h3 id="小尺寸"><a href="#小尺寸" class="headerlink" title="小尺寸"></a>小尺寸</h3><ul><li>如图例所示，没有足够空间时，箭头可画在外面，或用小圆点代替两个箭头；尺寸数字也可写在外面或引出标注</li><li>圆和圆弧的小尺寸，可按下两徘例图标注</li></ul><p><img src="/undefined/18589/小尺寸.webp" alt="小尺寸"></p><h3 id="球面"><a href="#球面" class="headerlink" title="球面"></a>球面</h3><ul><li>标注球面的尺寸，如左侧两图所示，应在ø或R前加注“S”</li><li>不致引起误解时，则可省略，如右图中的右端球面</li></ul><p><img src="/undefined/18589/球面.webp" alt="球面"></p><h3 id="弦长和弧长"><a href="#弦长和弧长" class="headerlink" title="弦长和弧长"></a>弦长和弧长</h3><ul><li>标注弦长和弧长时，如这两个例图所示，已寸界线应平行于弦的垂直平分线</li><li>标注弧长尺时，尺寸线用圆弧，并应在尺寸数字上方加注符号“⌒”</li></ul><p><img src="/undefined/18589/弦长和弧长.webp" alt="弦长和弧长"></p><h3 id="对称标注"><a href="#对称标注" class="headerlink" title="对称标注"></a>对称标注</h3><ul><li>图上尺寸84和64，它们的尺寸线应略超过对称中心线或断裂处的边界线，仅在尺寸线的端画出箭头，在对称中心线两端分别画出的两条与其垂直的平行细实线（对称符号）</li></ul><p><img src="/undefined/18589/对称标注.webp" alt="对称标注"></p><h3 id="板状零件厚度标注"><a href="#板状零件厚度标注" class="headerlink" title="板状零件厚度标注"></a>板状零件厚度标注</h3><ul><li>标注板状零件的尺寸时，可如例图中所示，在厚度的尺寸数字上方加注符号“δ”</li></ul><p><img src="/undefined/18589/板状零件厚度标注.webp" alt="板状零件厚度标注"></p><h3 id="光滑过渡处的尺寸"><a href="#光滑过渡处的尺寸" class="headerlink" title="光滑过渡处的尺寸"></a>光滑过渡处的尺寸</h3><ul><li>如例图所示，在光滑过渡处，必须用细实线将轮廓线延长，并从它们的交点引出尺寸界线</li></ul><p><img src="/undefined/18589/光滑过度处的尺寸.webp" alt="光滑过度处的尺寸"></p><h3 id="允许尺界线倾斜"><a href="#允许尺界线倾斜" class="headerlink" title="允许尺界线倾斜"></a>允许尺界线倾斜</h3><ul><li>尺寸界线一般应与尺寸线垂直，必要时允许倾斜。仍如上例图所示，若这里的尺寸界线垂直于尺寸线，则图线很不清晰，因而允许倾斜。</li></ul><h3 id="正方形标注"><a href="#正方形标注" class="headerlink" title="正方形标注"></a>正方形标注</h3><ul><li>如例图所示，标注机件的剖面为正方形结构的尺寸时，可在边长尺寸数字前加注符号“□”，或用14×14代替“□14”</li><li>图中相交的两条细实线是平面符号（当图形不能充分表达平面时，可用这个符号表示平面）</li></ul><p><img src="/undefined/18589/正方形标注.webp" alt="正方形标注"></p><h3 id="斜度和锥度"><a href="#斜度和锥度" class="headerlink" title="斜度和锥度"></a>斜度和锥度</h3><ul><li>斜度、锥度可用下面两个例图中所示的方法标注，符号的方向应与斜度、锥度的方向一致</li><li>锥度也可注在轴线上</li><li>一般不需在标注锥度的同时，再注出其角度值(a为圆锥角）；如有必要，则可如例图中所示，在括号中注出其角度值</li><li>斜度和锥度符号的画法，见右两图所示，符号的线宽为h/10，h为字高</li></ul><p><img src="/undefined/18589/斜度和锥度.webp" alt="斜度和锥度"></p><h3 id="图线通过尺寸数字时的处理"><a href="#图线通过尺寸数字时的处理" class="headerlink" title="图线通过尺寸数字时的处理"></a>图线通过尺寸数字时的处理</h3><ul><li>尺寸数字不可被任何图线通过，当尺寸数字无法避免被图线通过时，图线必须断开，如例图所示</li><li><img src="/undefined/18589/图线通过尺寸数字时的处理.webp" alt="图线通过尺寸数字时的处理"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机械制图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础-塑胶模具</title>
      <link href="/undefined/59355.html"/>
      <url>/undefined/59355.html</url>
      
        <content type="html"><![CDATA[<h2 id="模具制造工艺"><a href="#模具制造工艺" class="headerlink" title="模具制造工艺"></a>模具制造工艺</h2><ul><li>机械加工</li><li>数控加工</li><li>特种加工（如电火花加工）</li><li>模具的研磨与抛光</li><li>快速成型及快速制模技术</li></ul><h2 id="结构组成"><a href="#结构组成" class="headerlink" title="结构组成"></a>结构组成</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/mjzc20240625.jpeg" alt="塑胶模具结构组成" style="zoom:100%;"></p><h2 id="两板模"><a href="#两板模" class="headerlink" title="两板模"></a>两板模</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/lbm20240624.webp" alt="两板模" style="zoom:120%;"></p><h2 id="三板模"><a href="#三板模" class="headerlink" title="三板模"></a>三板模</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/sbm20240624.webp" alt="三板模" style="zoom:120%;"></p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><h3 id="浇注系统"><a href="#浇注系统" class="headerlink" title="浇注系统"></a>浇注系统</h3><ul><li>浇注系统是指从注塑机唧嘴开始到型腔为止的塑胶流动通道，主要由主流道、分流道、浇口和冷料穴组成</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/jzxt20240625.jpeg" alt="浇注系统" style="zoom:100%;"></p><h4 id="浇口"><a href="#浇口" class="headerlink" title="浇口"></a>浇口</h4><ul><li><p>常见浇口类型有直接浇口﹑侧浇口﹑潜伏式浇口﹑点浇口等多种</p></li><li><p>设计时应根据产品的不同要求选择合适的浇口类型，尤其当制品外观有要求时，要慎重选择</p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/jk0120240625.jpeg" alt="浇口" style="zoom: 100%;"></p></li></ul><h4 id="根据浇注系统分类"><a href="#根据浇注系统分类" class="headerlink" title="根据浇注系统分类"></a>根据浇注系统分类</h4><h5 id="大水口模具"><a href="#大水口模具" class="headerlink" title="大水口模具"></a>大水口模具</h5><ul><li>流道及浇口在分模线上，与产品在开模时一起脱模，设计最简单，容易加工，成本较低，所以较多人采用大水口系统作业</li></ul><h5 id="细水口模具"><a href="#细水口模具" class="headerlink" title="细水口模具"></a>细水口模具</h5><ul><li>流道及浇口不在分模线上，一般直接在产品上，所以要设计多一组水口分模线，设计较为复杂，加工较困难，一般要视产品要求而选用细水口系统</li></ul><h5 id="热流道模具"><a href="#热流道模具" class="headerlink" title="热流道模具"></a>热流道模具</h5><ul><li>此类模具结构与细水口大体相同，其最大区别是流道处于一个或多个有恒温的热流道板及热唧嘴里，无冷料脱模，流道及浇口直接在产品上，所以流道不需要脱模，此系统又称为无水口系统，可节省原材料，适用于原材料较贵、制品要求较高的情况，设计及加工困难，模具成本较高。</li></ul><h3 id="成型系统"><a href="#成型系统" class="headerlink" title="成型系统"></a>成型系统</h3><ul><li>成型系统是指产生制品外形和尺寸的系统；包含分型面、胶位面、碰穿面、插穿面、枕位、侧抽芯（行位）、镶件和斜顶等结构</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/cxxt20240624.webp" alt="成型系统" style="zoom:120%;"></p><h4 id="分型面"><a href="#分型面" class="headerlink" title="分型面"></a>分型面</h4><ul><li>又称PL面，是将模具分割为动模和定模或凹模和凸模的面</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/pl20240624.webp" alt="分型面" style="zoom:150%;"></p><h4 id="碰穿面、插穿面、枕位"><a href="#碰穿面、插穿面、枕位" class="headerlink" title="碰穿面、插穿面、枕位"></a>碰穿面、插穿面、枕位</h4><ul><li>与分型面平行的公母模贴合面叫<strong>碰穿面</strong></li><li>与分型面不平行的公母模贴合面叫<strong>插穿面</strong></li><li>外壳类塑料件的边缘常开有缺口，用于安装各类配件，此处形成的枕状分型部分称为<strong>枕位</strong></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/pc20240625.jpeg" alt="碰穿面、插穿面、枕位" style="zoom: 100%;"></p><h4 id="侧抽芯（行位）"><a href="#侧抽芯（行位）" class="headerlink" title="侧抽芯（行位）"></a>侧抽芯（行位）</h4><p>指模具的行位机构，即凡是能够获得侧向抽芯或侧向分型以及复位动作来拖出产品倒扣，低陷等位置的机构<img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/hw20240625.jpeg" alt="行位" style="zoom:110%;"></p><h4 id="斜顶"><a href="#斜顶" class="headerlink" title="斜顶"></a>斜顶</h4><ul><li>也叫斜梢，是模具设计中用来成形产品内部倒钩的机构</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/xd20240625.jpeg" alt="斜顶" style="zoom:100%;"></p><h3 id="顶出系统"><a href="#顶出系统" class="headerlink" title="顶出系统"></a>顶出系统</h3><ul><li>当制品在模具中固化后，需要有一套优先的方式将其从模具中顶出，而且在顶出中不能出现顶白、制品变形、破裂等损坏制品的现象，这套系统被称为顶出系统</li><li>顶出的主要形式：顶针顶出、司筒(顶管)顶出、顶块顶出、推板顶出等</li></ul><h4 id="顶针顶出"><a href="#顶针顶出" class="headerlink" title="顶针顶出"></a>顶针顶出</h4><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/dzdc20240625.jpeg" style="zoom:100%;"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/dzdc20240625_01.gif" style="zoom:200%;"></p><h4 id="司筒-顶管-顶出"><a href="#司筒-顶管-顶出" class="headerlink" title="司筒(顶管)顶出"></a>司筒(顶管)顶出</h4><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/dgdc20240625.jpeg" alt="顶管顶出" style="zoom:100%;"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/dgdc20240625_01.gif" style="zoom:250%;"></p><h4 id="顶块顶出"><a href="#顶块顶出" class="headerlink" title="顶块顶出"></a>顶块顶出</h4><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/dkdc20240625.jpeg" alt="顶块顶出" style="zoom:100%;"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/dkdc20240625_01.gif" style="zoom: 100%;"></p><h4 id="推板顶出"><a href="#推板顶出" class="headerlink" title="推板顶出"></a>推板顶出</h4><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/tbdc20240625.jpeg" alt="推板顶出" style="zoom:100%;"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/tbdc20240625_01.gif" style="zoom:250%;"></p><h3 id="排气系统"><a href="#排气系统" class="headerlink" title="排气系统"></a>排气系统</h3><ul><li>在制品成型过程中排除型腔内和流道的气体以及塑料溶体产生的分解气体，减少造成制品的烧焦、气痕等成型缺陷</li></ul><h4 id="排气的方式"><a href="#排气的方式" class="headerlink" title="排气的方式"></a>排气的方式</h4><ul><li><p>分型面排气</p></li><li><p>顶针与型腔间隙排气</p></li><li><p>利用镶件与镶针排气</p></li><li><p>顶针与司筒排气</p></li><li><p>侧向分型与抽芯机构排气</p></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/pq20240625.jpeg" alt="排气系统" style="zoom:100%;"></p><h4 id="冷却系统"><a href="#冷却系统" class="headerlink" title="冷却系统"></a>冷却系统</h4><ul><li>为了满足注塑工艺对模具的温度要求，必须对模具温度进行控制，所以模具常常设有冷却系统并在模具内或四周安装加热元件</li><li>冷却系统一般是在模具上开设冷却水道</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/lqxt20240625.jpeg" alt="冷却系统" style="zoom:100%;"></p><h4 id="定位导向系统"><a href="#定位导向系统" class="headerlink" title="定位导向系统"></a>定位导向系统</h4><ul><li>导向与定位系统的作用：保证模具在进行装配和调模试机的时候，保证凹凸模之间一定的方向和位置</li><li>导向与定位系统包含导柱、导套、凸台等</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/dxhdw20240625.jpeg" alt="导向和定位结构" style="zoom:50%;"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/dwhdx20240625_01.jpeg" alt></p><h2 id="塑胶模具的分类"><a href="#塑胶模具的分类" class="headerlink" title="塑胶模具的分类"></a>塑胶模具的分类</h2><h3 id="注塑模-注射成型"><a href="#注塑模-注射成型" class="headerlink" title="注塑模(注射成型)"></a>注塑模(注射成型)</h3><ul><li>注射成型是先把塑料加入到注射机的加热料筒内，塑料受热熔融，在注射剂螺杆或柱塞的推动下，经喷嘴和模具浇注系统进入模具型腔，由于物理及化学作用而硬化成型称为注塑制品</li><li>常见的注塑制品：数码类、家电类、日用品类产品等等</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/zsj20240626.jpeg" alt="注塑机"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/zsgc20240626.gif" alt="注塑过程"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/zsmj20240626.jpeg" alt="注塑模具"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/zscp20240626.jpeg" alt="注塑产品"></p><h3 id="吸塑模-真空吸塑成形"><a href="#吸塑模-真空吸塑成形" class="headerlink" title="吸塑模(真空吸塑成形)"></a>吸塑模(真空吸塑成形)</h3><ul><li>真空吸塑成形是把热塑性塑料板固定在模具上，用辐射加热器进行加热，当加热到软化温度时，用真空泵把板材与模具之间的空气抽掉，借助大气压力，使板材贴模成形，冷却后再用压缩空气使制品从模具内脱出</li><li>常见的吸塑制品：一次性饭盒和杯子、饮料杯、产品包装内衬等等</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/xsj202406260.jpeg" alt="吸塑机"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/xsgc20240626.gif" alt="吸塑过程"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/xsmj20240626.jpeg" alt="吸塑模具"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/xscp20240626.jpeg" alt="吸塑产品" style="zoom:200%;"></p><h3 id="吹塑模-中空吹塑成形"><a href="#吹塑模-中空吹塑成形" class="headerlink" title="吹塑模(中空吹塑成形)"></a>吹塑模(中空吹塑成形)</h3><ul><li>中空吹塑成形是将处于塑性状态的塑料型坯置于模具型腔内，使压缩空气注入型坯中将其吹胀，使之紧贴于模腔壁上，经冷却定型后得到一定形状的中空塑件的加工方法</li><li>常见的吹塑制品：饮料瓶子、饮水机矿泉水桶、油壶、洗发水和沐浴露等日用品瓶子等等</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/csj20240626.jpeg" alt="吹塑机" style="zoom:50%;"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/csgc20240627.gif" alt="吹塑过程"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/csmj20240627.webp" alt="吹塑模具" style="zoom: 200%;"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/cscp20240627.webp" alt="吹塑产品" style="zoom:200%;"></p><h3 id="挤塑模-挤塑成形"><a href="#挤塑模-挤塑成形" class="headerlink" title="挤塑模(挤塑成形)"></a>挤塑模(挤塑成形)</h3><ul><li>挤塑成形是将固态塑料加入挤出机的料斗，利用挤出机的螺杆旋转加压与加热器使其熔融、塑化，通过特定形状的机头口模成为截面与机头口模形状相仿的连续塑料，然后经定径冷却装置、牵引装置、卷料装置而成为塑料型材</li><li>常见的挤塑制品：管材、板材、棒材、片材、线材和薄膜等连续型材</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/jsj20240627.jpeg" alt="挤塑机"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/jsgc20240627.gif" alt="挤塑过程"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/jsmj20240627.webp" alt="挤塑模具" style="zoom:200%;"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/jscp20240627.webp" alt="挤塑产品" style="zoom:150%;"></p><h3 id="压塑模-压缩成形"><a href="#压塑模-压缩成形" class="headerlink" title="压塑模(压缩成形)"></a>压塑模(压缩成形)</h3><ul><li>压缩成型是将塑料直接加入到具有一定温度的敞开的模具型腔内，然后闭合模具，在热与压力作用下塑料熔融变成流动状态，由于物理及化学作用，而使塑料硬化成为具有一定形状和尺寸的常温保持不变的塑件，俗称压制成型</li><li>常见的压缩成型制品：电器的插头插座、锅柄、瓶盖、坐便器、餐盘等等</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/ysj20240627.jpeg" alt="压塑机" style="zoom:50%;"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/ysgc20240627.gif" alt="压塑过程"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/ysmj20240627.jpeg" alt="压塑模具"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/yscp20240627.webp" alt="压塑产品" style="zoom:200%;"></p><h3 id="滚塑模-旋转成形"><a href="#滚塑模-旋转成形" class="headerlink" title="滚塑模(旋转成形)"></a>滚塑模(旋转成形)</h3><ul><li>又称旋转成型、旋塑、旋转模塑、旋转铸塑、回转成型等，该成型方法是先将计量的塑料(液态或粉料)到加入模具中，在模具闭合后，使之沿两垂直旋转轴旋转，同时使模具加热，模内的塑料原料在重力和热能的作用下，逐渐均匀地涂布、熔融粘附于模腔的整个表面上，成型为与模腔相同的形状，再经冷却定型、脱模制得所需形状的制品</li><li>常见的旋转成型制品：电水球、浮球、小游泳池、自行车座垫、冲浪板，机器外壳、防护罩、灯罩、农用喷雾器、家具、独木舟、野营车辆顶等等</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/gsj20240627.jpeg" alt="滚塑机"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/gsgc20240627.jpeg" alt="滚塑过程"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/gscp20240627.webp" alt="滚塑模具" style="zoom:200%;"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/640-36.webp" alt="滚塑产品" style="zoom:200%;"></p><h2 id="塑胶模具钢材分类"><a href="#塑胶模具钢材分类" class="headerlink" title="塑胶模具钢材分类"></a>塑胶模具钢材分类</h2><table style="text-align=center">  <tr>    <th>钢材编号</th>      <th>标准规格</th>      <th>硬度</th>      <th>一般特性用途</th>      <th>适用模具零件</th>      <th>备注</th>  </tr>  <tr>      <td>8407</td>    <td>H-13(改良型)</td>    <td>热处理48~52HRC</td>    <td>热膜钢，高韧性，耐热性好，适合PA、POM、PS、PE、EP塑料模。金属压铸，挤压模</td>    <td>上下内模镶件，侧向抽芯及滑块，型芯侧抽芯及滑块镶件，浇口套，斜推杆</td>    <td>一胜百</td>  </tr>  <tr>      <td>2344</td>    <td>H-13</td>    <td rowspan="2">热处理48~52HRC</td>    <td rowspan="2">热膜钢，高韧性，耐热性好，塑料模。金属压铸，挤压模</td>    <td rowspan="2">上下内模镶件，侧向抽芯及滑块，型芯侧抽芯及滑块镶件，浇口套，斜推杆</td>    <td rowspan="2">LKM</td>  </tr>  <tr>      <td>2344supper</td>    <td>H-13(改良型)</td>  </tr>   <tr>      <td>S136</td>    <td rowspan="2">420</td>    <td>热处理48~52HRC</td>    <td rowspan="2">高镜面度，抛光性好，抗锈防酸性，适合PVC、PP、EP、PC、PMMA塑料模</td>    <td rowspan="2">上下内模镶件，侧向抽芯及滑块，型芯侧抽芯及滑块镶件，浇口套，斜推杆</td>    <td rowspan="2">一胜百</td>  </tr>  <tr>      <td>S136H</td>    <td>不需要热处理（预加硬）31~33HRC</td>  </tr>  <tr>      <td>2083</td>    <td rowspan="2">420</td>    <td>热处理48~52HRC</td>    <td rowspan="2">防酸，抛光性好，适合酸性塑料及要求良好抛光模具</td>    <td rowspan="2">上下内模镶件，侧向抽芯及滑块，型芯侧抽芯及滑块镶件，浇口套，斜推杆</td>    <td rowspan="2">LKM</td>  </tr>  <tr>      <td>2083H</td>    <td>不需要热处理（预加硬）31~35HRC</td>  </tr>   <tr>      <td>718</td>    <td rowspan="2">P20（改良型）</td>    <td rowspan="2">不需要热处理31~35HRC（预加硬）35~41HRC</td>    <td rowspan="2">高抛光度，高要求内模镶件，适合PA、POM、PS、PE、PP、ABS塑料模具</td>    <td rowspan="2">上下内模镶件，侧向抽芯及滑块，型芯侧抽芯及滑块镶件</td>    <td rowspan="2">一百胜</td>  </tr>  <tr>      <td>718 H</td>  </tr>  <tr><td>738</td><td rowspan="2">P20 加镍</td><td rowspan="2">不需要热处理31~35HRC（预加硬）31~40HRC</td><td rowspan="2">适合高韧性及高磨光性塑料模具</td><td rowspan="2">上下内模镶件，型芯</td><td rowspan="2">LKM</td>  </tr>   <tr>      <td>738 H</td>  </tr>  <tr><td>P20HH</td><td>P20（改良型）</td><td>（预加硬）35~40HRC</td><td>高硬度，高光洁程度及耐磨性，适合PA、POM、PS、PE、PP\ABS塑料模</td><td>上下内模镶件，型芯</td><td>美国芬可乐</td>  </tr>   <tr>      <td>NAK80</td>    <td>P21（改良型）</td>    <td>（预加硬）40~43HRC</td>    <td>高硬度，镜面效果佳，放电加工良好，焊接性能佳。适合电蚀及抛光性能模具</td>    <td>上下内模镶件，侧向抽芯及滑块，型芯，侧抽芯及滑块镶件，斜推杆</td>    <td>日本大同</td>  </tr>   <tr>      <td>NAK55</td>    <td>P21加硫（改良型）</td>    <td>（预加硬）40~43HRC</td>    <td>高硬度，易切削，加厚焊接性良好。适合高性能塑料模具</td>    <td>上下内模镶件，型芯</td>    <td>日本大同</td>  </tr>  <tr>      <td>2311</td>    <td>P20</td>    <td>（预加硬）280~325HB</td>    <td>适合一般性能塑料模具钢</td>    <td>上下内模镶件，型芯</td>    <td>LKM</td>  </tr>      <tr>      <td>638</td>    <td>P20</td>    <td>（预加硬）270~300HB</td>    <td>加工性能良好，适合高要求大型模架及下模</td>    <td>下内模镶件，型芯</td>    <td>LKM</td>  </tr>   <tr>      <td>DF2</td>    <td rowspan="2">0-1</td>    <td rowspan="2">热处理54~56HRC</td>    <td rowspan="2">微变形油钢，耐磨性好</td>    <td rowspan="2">压条，耐磨板，大推圈齿条，滚轮等</td>    <td rowspan="2">一百胜</td>  </tr>  <tr>      <td>2510</td>  </tr>      <tr>      <td>S50C-S55C</td>    <td>1050</td>    <td>不需要热处理（预加硬）</td>    <td>黄牌钢适合模架及机械配件</td>    <td>模板，拉板，支板撑头，锁紧块，定位块等</td>    <td>国产45#</td>  </tr></table>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SolidworksSimulation - 壳体、梁单元、实体单元</title>
      <link href="/undefined/15557.html"/>
      <url>/undefined/15557.html</url>
      
        <content type="html"><![CDATA[<h2 id="壳体定义"><a href="#壳体定义" class="headerlink" title="壳体定义"></a>壳体定义</h2><p><img src="/undefined/15557/软件操作.png" alt></p><p><img src="/undefined/15557/定义.png" alt></p><ul><li>薄（细）壳：长宽比大于20，该单元忽略厚度方向上的剪切变形</li><li>厚（粗）壳：厚度方向剪切变形分布保持常数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> Solidworks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidworks Simulation - 接触</title>
      <link href="/undefined/40ea.html"/>
      <url>/undefined/40ea.html</url>
      
        <content type="html"><![CDATA[<h2 id="装配体之间的连接关系"><a href="#装配体之间的连接关系" class="headerlink" title="装配体之间的连接关系"></a>装配体之间的连接关系</h2><ul><li>Solidworks simulation中定义装配体零件之间的连接关系的主要形式有<strong>接触</strong>和<strong>接头</strong></li></ul><h2 id="接触形式"><a href="#接触形式" class="headerlink" title="接触形式"></a>接触形式</h2><h3 id="无穿透"><a href="#无穿透" class="headerlink" title="无穿透"></a>无穿透</h3><ul><li>可防止两实体间昌盛干涉，但允许接触表面产生滑移或形成接触面分离</li><li>此类接触形式包括齿轮啮合、鼠标移动、车辆在地面上移动</li><li>算法：罚函数法</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/jc_wct20240630.png" alt="无穿透"></p><h3 id="结合"><a href="#结合" class="headerlink" title="结合"></a>结合</h3><ul><li>两个物体粘合为一个整体</li><li>机械行业中该类接触形式最典型的应用：焊接问题、塑料件熔融问题</li><li>在部分特殊情况下，也可将一些非关键位置的无穿透接触形式简化为结合</li><li>算法：约束方程/节点</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/jc_jf20240630.png" alt="结合"></p><h3 id="允许贯穿（空闲）"><a href="#允许贯穿（空闲）" class="headerlink" title="允许贯穿（空闲）"></a>允许贯穿（空闲）</h3><ul><li>为节省计算时间或满足某些特定场合需要，允许零件之间产生干涉</li><li><strong>现实中不存在这种接触形式</strong></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/jc_yxgc20240630.png" alt="允许贯穿"></p><h3 id="冷缩配合"><a href="#冷缩配合" class="headerlink" title="冷缩配合"></a>冷缩配合</h3><ul><li><strong>主要针对过盈配合问题</strong></li><li>应为过盈会导致面于面之间产生干涉，使用该接触形式可计算干涉产生的过盈量所导致的接触变形问题</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/jc_lsph20240630.png" alt="冷缩配合"></p><ul><li>需要设置过盈量</li></ul><h3 id="虚拟壁"><a href="#虚拟壁" class="headerlink" title="虚拟壁"></a>虚拟壁</h3><ul><li>定义实体与目标基准面之间的接触</li></ul><h2 id="各模块允许的接触形式"><a href="#各模块允许的接触形式" class="headerlink" title="各模块允许的接触形式"></a>各模块允许的接触形式</h2><div class="table-container"><table><thead><tr><th style="text-align:center">接触形式</th><th style="text-align:center">无穿透</th><th style="text-align:center">结合</th><th style="text-align:center">允许贯穿</th><th style="text-align:center">冷缩配合</th><th style="text-align:center">虚拟壁</th></tr></thead><tbody><tr><td style="text-align:center">静应力</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">频率</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">屈曲</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">非线性</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">跌落</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">线性动力</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table></div><ul><li>允许贯穿属于比较特殊的接触形式，在绝大多数情况不会使用</li><li>冷缩配合和虚拟壁本质上也是无穿透，只是所使用的环境较为特殊</li></ul><h2 id="螺栓的连接类型"><a href="#螺栓的连接类型" class="headerlink" title="螺栓的连接类型"></a>螺栓的连接类型</h2><h3 id="刚性"><a href="#刚性" class="headerlink" title="刚性"></a>刚性</h3><ul><li>螺栓接头应用刚性杆元件将螺栓和螺母压印区域与代表螺栓柄的横梁单元连接，此时采用刚性连接会在所连接零部件的螺栓头和螺母区域产生较为严重的应力奇异</li></ul><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><ul><li>分布式连接将在螺栓头和螺母接触区域内产生相对真实的应力和位移场，分布式连接并不能完全消除应力奇异</li><li><strong>在条件允许的情况下，尽可能的使用分布式连接类型</strong></li></ul><h2 id="轴承约束和轴承接头的区别"><a href="#轴承约束和轴承接头的区别" class="headerlink" title="轴承约束和轴承接头的区别"></a>轴承约束和轴承接头的区别</h2><ul><li>连结下的轴承是部件和部件间的连接关系，与轴相连的部件也参与计算</li><li>夹具下的轴承夹具是单个零件的约束状态，与轴相连的部件在分析中不会参与计算，只会保证轴端部只能旋转不能产生其他方向的偏移</li></ul><h2 id="远程载荷-质量"><a href="#远程载荷-质量" class="headerlink" title="远程载荷/质量"></a>远程载荷/质量</h2><ul><li>将复杂的物体简化为质量点加载在需要关注的结构上，可大大降低计算量</li></ul><h2 id="结果属性"><a href="#结果属性" class="headerlink" title="结果属性"></a>结果属性</h2><div class="table-container"><table><thead><tr><th style="text-align:center">结果类型</th><th style="text-align:center">结果属性</th></tr></thead><tbody><tr><td style="text-align:center">合位移</td><td style="text-align:center">标量</td></tr><tr><td style="text-align:center">X，Y，Z位移</td><td style="text-align:center">矢量</td></tr><tr><td style="text-align:center">von Mises应力</td><td style="text-align:center">标量</td></tr><tr><td style="text-align:center">法向应力</td><td style="text-align:center">矢量</td></tr><tr><td style="text-align:center">主应力</td><td style="text-align:center">标量</td></tr><tr><td style="text-align:center">抗剪应力</td><td style="text-align:center">矢量</td></tr><tr><td style="text-align:center">应力强度</td><td style="text-align:center">标量</td></tr></tbody></table></div><ul><li>标量不会随着坐标系的改变而改变数值</li><li>向量（矢量）会随着坐标系的改变而发生变化</li></ul><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><div class="table-container"><table><thead><tr><th style="text-align:center">坐标系</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">笛卡尔坐标系</td><td style="text-align:center">坐标轴为X（红）、Y（绿）、Z（蓝）</td></tr><tr><td style="text-align:center">圆柱坐标系</td><td style="text-align:center">坐标轴为径向r（红）、圆周t（绿）、轴向z（蓝）</td></tr><tr><td style="text-align:center">球坐标系</td><td style="text-align:center">坐标轴为径向r（红）、经度t（绿）、纬度p（蓝）</td></tr></tbody></table></div><h2 id="螺栓预紧力"><a href="#螺栓预紧力" class="headerlink" title="螺栓预紧力"></a>螺栓预紧力</h2><ul><li>在一般的计算中，不添加预紧力可以给实际设计留出一定的安全空间，但是对于预紧力过大的的产品设计，在仿真中忽略预紧力会导致较大误差</li></ul><h3 id="预紧力设置方法"><a href="#预紧力设置方法" class="headerlink" title="预紧力设置方法"></a>预紧力设置方法</h3><ul><li>当产品设计中的螺栓预紧力较小时，仿真中可不添加预紧力</li><li>当产品设计中的螺栓预紧力较大时，必须按照一定的设计规则进行添加预紧力</li></ul><h2 id="紧密配合设置"><a href="#紧密配合设置" class="headerlink" title="紧密配合设置"></a>紧密配合设置</h2><ul><li>螺纹连接位置使用紧密配合设置更接近实际产品状态</li></ul><h2 id="刚性体和弹性体"><a href="#刚性体和弹性体" class="headerlink" title="刚性体和弹性体"></a>刚性体和弹性体</h2><h3 id="刚性体"><a href="#刚性体" class="headerlink" title="刚性体"></a>刚性体</h3><ul><li>刚度无穷大，无论载荷多大都不会发生变形</li><li>理论力学研究的是刚性体运动问题</li><li><strong>是一种理想状态，现实中并不存在</strong></li><li>当一些零件是否变形对计算结果影响很小，仅仅是负责传递力，则可以将这部分零件设置为刚性体</li></ul><h3 id="弹性体"><a href="#弹性体" class="headerlink" title="弹性体"></a>弹性体</h3><ul><li>受力后会产生变形</li><li>材料力学研究的是弹性体变形问题</li><li>有限元分析中，大多数情况都是研究弹性体问题</li></ul><h2 id="刚体运动"><a href="#刚体运动" class="headerlink" title="刚体运动"></a>刚体运动</h2><ul><li>是指模型中的某个部件甚至模型整体可以在不发生变形的情况下移动，也就是运动</li></ul><h3 id="产生刚体运动的几种潜在可能"><a href="#产生刚体运动的几种潜在可能" class="headerlink" title="产生刚体运动的几种潜在可能"></a>产生刚体运动的几种潜在可能</h3><ol><li>缺少固定约束</li><li>遗漏接触或者接触设置错误</li><li>三维模型本身的间隙<ul><li>原因：初始间隙导致零部件间需要通过运动才能进行力的传递，但是零件一旦发生运动就不满足静力学分析，因此模型就出出现刚体运动问题或者计算报错</li></ul></li><li>网格划分产生的间隙</li><li>数值算法产生的微小力<ul><li>软弹簧，<strong>最不推荐的方法</strong>，软弹簧是指刚度极小的弹簧，其作用是抵消由数值算法产生的微小力</li><li>在接触面设置摩擦系数，此方法会大幅度增加计算量和计算时间，<strong>但是多数情况下可以使用</strong></li><li>强制位移约束，此方法可以使用的情况较少</li><li>对称面约束，此方法对模型有一定的要求</li></ul></li></ol><h2 id="实体焊接"><a href="#实体焊接" class="headerlink" title="实体焊接"></a>实体焊接</h2><ul><li>有限元焊接问题解决方案：<ol><li>直接绑定法（solidworks simulation中为结合）</li><li>梁单元法</li><li>真是模型分析</li></ol></li></ul><h2 id="接触优先级问题"><a href="#接触优先级问题" class="headerlink" title="接触优先级问题"></a>接触优先级问题</h2><div class="table-container"><table><thead><tr><th style="text-align:center">接触类型</th><th style="text-align:center">设置1</th><th style="text-align:center">设置2</th><th style="text-align:center">设置3</th><th style="text-align:center">设置4</th><th style="text-align:center">设置5</th><th style="text-align:center">设置6</th></tr></thead><tbody><tr><td style="text-align:center">相触面组</td><td style="text-align:center">无穿透</td><td style="text-align:center">无穿透</td><td style="text-align:center">结合</td><td style="text-align:center">允许贯穿</td><td style="text-align:center">允许贯穿</td><td style="text-align:center">允许贯穿</td></tr><tr><td style="text-align:center">零部件</td><td style="text-align:center">结合</td><td style="text-align:center">允许贯穿</td><td style="text-align:center">无穿透</td><td style="text-align:center">无穿透</td><td style="text-align:center">无穿透</td><td style="text-align:center">结合</td></tr><tr><td style="text-align:center">全局</td><td style="text-align:center">允许贯穿</td><td style="text-align:center">结合</td><td style="text-align:center">允许贯穿</td><td style="text-align:center">允许贯穿</td><td style="text-align:center">结合</td><td style="text-align:center">结合</td></tr><tr><td style="text-align:center">最终接触形式</td><td style="text-align:center">无穿透</td><td style="text-align:center">无穿透</td><td style="text-align:center">结合</td><td style="text-align:center">无穿透</td><td style="text-align:center">无穿透</td><td style="text-align:center">允许贯穿</td></tr></tbody></table></div><ul><li>当相触面组设置为无穿透和结合时，模型接触形式显示为相触面组的接触形式</li><li>当相触面组设置为允许贯穿时，如零部件接触和全局接触存在无穿透设置，则模型接触形式为无穿透；如果零部件接触和全局接触里不存咋无穿透设置，则模型接触形式为允许贯穿</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> Solidworks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AnsysWorkbench - 动力学</title>
      <link href="/undefined/2988.html"/>
      <url>/undefined/2988.html</url>
      
        <content type="html"><![CDATA[<h2 id="动力学模块"><a href="#动力学模块" class="headerlink" title="动力学模块"></a>动力学模块</h2><p><img src="/undefined/2988/结构动力学.png" alt="结构动力学"></p><h2 id="动力学功能及算法"><a href="#动力学功能及算法" class="headerlink" title="动力学功能及算法"></a>动力学功能及算法</h2><p><img src="/undefined/2988/动力学功能及算法.png" alt="动力学功能及算法"></p><h2 id="时域和频域"><a href="#时域和频域" class="headerlink" title="时域和频域"></a>时域和频域</h2><p><img src="/undefined/2988/时域和频域.png" alt="时域和频域"></p><h2 id="频域的质量参与"><a href="#频域的质量参与" class="headerlink" title="频域的质量参与"></a>频域的质量参与</h2><ul><li>模态模块中的求解方案信息内容解释</li></ul><p><img src="/undefined/2988/求解方案信息.png" alt></p><h3 id="参数意义"><a href="#参数意义" class="headerlink" title="参数意义"></a>参数意义</h3><ul><li>MODE：阶数</li><li>FREQUENCY：固有频率</li><li><p>PERIOD：周期，为频率的倒数</p></li><li><p>PARTIC FACTOR ：振型参与系数: 每个质点质量与其在某阶振型中相应坐标乘积之和与该阶振型模态质量之比</p></li><li>RATIO ：比率，振型参与系数与一阶振型参与系数之比</li><li>EFFECTIVE MASS：振型等效质量，振型参与系数的平方与振型模态质量之比</li><li>CUMULATIVE MASS FRACTION：累计质量分数/有效质量系数，为第一阶到该阶振型等效质量之和与总等效质量之比</li><li>RATIO EFF.MASS TO TOTAL MASS：振型等效质量与总质量之比</li></ul><h3 id="内容释意"><a href="#内容释意" class="headerlink" title="内容释意"></a>内容释意</h3><ul><li>sum表示该结构有多少部分参与了X或Y或Z的百分比的各阶的和，sum≤1</li></ul><blockquote><p>注：第一阶参与了某个方向的振动不会再计算入后续的阶；固定支撑不参与振动计算</p></blockquote><ul><li>一般情况下：<ul><li>最高精度保证，XYZ三向的质量参与达到90%</li><li>一般精度保证，XYZ三向的质量参与达到80%</li><li>最低精度保证，关键振动方向的质量参与达到80%</li></ul></li></ul><blockquote><p>对于约束过多的模型，尽量评估不参与振动部分的质量比，参与振动的部分的质量参与按上诉三点进行</p></blockquote><h3 id="时域和频域的应用说明"><a href="#时域和频域的应用说明" class="headerlink" title="时域和频域的应用说明"></a>时域和频域的应用说明</h3><ul><li>部分瞬态动力学分析中，频域的计算效率高于时域，但频域能够求解的范围少于时域<ul><li>频域不能求解包含运动的问题，但时域可以</li><li>频域不能求解包含非线性接触问题，但时域可以</li><li>频域不能求解非线性材料，只能近似处理为线性材料，但时域可以</li></ul></li></ul><h2 id="时间步长的确定"><a href="#时间步长的确定" class="headerlink" title="时间步长的确定"></a>时间步长的确定</h2><h3 id="最后一阶固有频率的选取"><a href="#最后一阶固有频率的选取" class="headerlink" title="最后一阶固有频率的选取"></a>最后一阶固有频率的选取</h3><p><img src="/undefined/2988/最后一阶固有频率的选取.png" alt="最后一阶固有频率的选取"></p><h3 id="时间步长与振动频率的关系"><a href="#时间步长与振动频率的关系" class="headerlink" title="时间步长与振动频率的关系"></a>时间步长与振动频率的关系</h3><p><img src="/undefined/2988/时间步长与振动频率的关系.png" alt></p><ul><li>时间步长：在一个周期内选取若干个点（均布）进行吻合这条正玄波，若想要准确描述整个波，则需要尽可能的取多个点</li></ul><h3 id="瞬态模块中的时间步长设定"><a href="#瞬态模块中的时间步长设定" class="headerlink" title="瞬态模块中的时间步长设定"></a>瞬态模块中的时间步长设定</h3><p><img src="/undefined/2988/瞬态模块的时间步长.png" alt="时间步长"></p><ul><li>当选取4个点，固有频率为1760Hz，则∆t=1/(1760 * 4)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> AnsysWorkbench </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记 -Spring6</title>
      <link href="/undefined/d3af.html"/>
      <url>/undefined/d3af.html</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p><code>Spring6</code>要求<code>JDK</code>版本为17及以上</p></div><h2 id="添加Spring依赖"><a href="#添加Spring依赖" class="headerlink" title="添加Spring依赖"></a>添加Spring依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--spring6--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;6.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="Log4j2"><a href="#Log4j2" class="headerlink" title="Log4j2"></a>Log4j2</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--log4j2的依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.19.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-slf4j2-impl&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.19.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>在类的根路径下提供log4j2.xml配置文件（文件名固定为：log4j2.xml，文件必须放到类根路径下。）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            level指定日志级别，从低到高的优先级：</span></span><br><span class="line"><span class="comment">                TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span></span><br><span class="line"><span class="comment">                trace：追踪，是最低的日志级别，相当于追踪程序的执行</span></span><br><span class="line"><span class="comment">                debug：调试，一般在开发中，都将其设置为最低的日志级别</span></span><br><span class="line"><span class="comment">                info：信息，输出重要的信息，使用较多</span></span><br><span class="line"><span class="comment">                warn：警告，输出警告的信息</span></span><br><span class="line"><span class="comment">                error：错误，输出错误信息</span></span><br><span class="line"><span class="comment">                fatal：严重错误</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;spring6log&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;log&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;spring6log&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%t] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;log&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;d:/spring6_log/test.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的信息，</span></span><br><span class="line"><span class="comment">            每次大小超过size，</span></span><br><span class="line"><span class="comment">            则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，</span></span><br><span class="line"><span class="comment">            作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;d:/spring6_log/app.log&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">&quot;log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;50MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，</span></span><br><span class="line"><span class="comment">            则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1、加载配置文件，创建对象</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2、获取创建对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//3、调用测试方法</span></span><br><span class="line">       user.add();</span><br><span class="line">       <span class="comment">//4、手动写日志</span></span><br><span class="line">        logger.info(<span class="string">&quot;#### 执行调用成功... ####&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><ul><li>IoC 是 Inversion of Control 的简写</li><li>IoC 容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java 对象没有任何区别</li></ul><h3 id="控制反转（IoC）"><a href="#控制反转（IoC）" class="headerlink" title="控制反转（IoC）"></a>控制反转（IoC）</h3><ul><li>为了降低程序耦合度，提高程序扩展力</li></ul><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><ul><li>DI（Dependency Injection）：依赖注入，依赖注入实现了控制反转的思想</li><li><strong>指Spring创建对象的过程中，将对象依赖属性通过配置进行注入</strong></li></ul><h3 id="ApplicationContext的主要实现类"><a href="#ApplicationContext的主要实现类" class="headerlink" title="ApplicationContext的主要实现类"></a>ApplicationContext的主要实现类</h3><div class="table-container"><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>ConfigurableApplicationContext</td><td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table></div><h3 id="基于XML管理Bean"><a href="#基于XML管理Bean" class="headerlink" title="基于XML管理Bean"></a>基于XML管理Bean</h3><ol><li>创建类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhibi.spring6;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;....hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>配置xml文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhibi.spring6.bean.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 根据bean id获取</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1. 根据bean id获取&quot;</span> + user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 根据类型获取bean</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;2. 根据类型获取bean&quot;</span> +user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 根据id和类型</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;3. 根据id和类型&quot;</span> + user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="依赖注入setter注入"><a href="#依赖注入setter注入" class="headerlink" title="依赖注入setter注入"></a>依赖注入setter注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--set方法注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhibi.spring6.di.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;再学一万年&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">value</span>=<span class="string">&quot;执笔&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;other&quot;&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;null&gt;&lt;/null&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;/property&gt; 设置other为null--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name=&quot;other&quot; value=&quot;&amp;lt;&amp;gt;&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;other&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="依赖注入构造器注入"><a href="#依赖注入构造器注入" class="headerlink" title="依赖注入构造器注入"></a>依赖注入构造器注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--构造器注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book-con&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zhibi.spring6.di.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- index属性：指定参数所在位置的索引（从0开始） name属性：指定参数名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;再来亿遍&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;执笔&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="特殊值处理"><a href="#特殊值处理" class="headerlink" title="特殊值处理"></a>特殊值处理</h4><h5 id="字面量赋值"><a href="#字面量赋值" class="headerlink" title="字面量赋值"></a>字面量赋值</h5><blockquote><p>int a = 10;</p><p>声明一个变量a，初始化为10，此时a就不代表字母a了，而是作为一个变量的名字</p><p>而如果a是带引号的：’a’，那么它现在不是一个变量，它就是代表a这个字母本身，这就是字面量。所以字面量没有引申含义，就是我们看到的这个数据本身。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="null值"><a href="#null值" class="headerlink" title="null值"></a>null值</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;null&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上写法，为name所赋的值是字符串null</p></blockquote><h5 id="xml实体"><a href="#xml实体" class="headerlink" title="xml实体"></a>xml实体</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a <span class="symbol">&amp;lt;</span> b&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="CDATA节"><a href="#CDATA节" class="headerlink" title="CDATA节"></a>CDATA节</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="为对象类型属性赋值"><a href="#为对象类型属性赋值" class="headerlink" title="为对象类型属性赋值"></a>为对象类型属性赋值</h4>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 材料（金属材料）</title>
      <link href="/undefined/bf1.html"/>
      <url>/undefined/bf1.html</url>
      
        <content type="html"><![CDATA[<h2 id="普通冷轧板材的牌号"><a href="#普通冷轧板材的牌号" class="headerlink" title="普通冷轧板材的牌号"></a>普通冷轧板材的牌号</h2><ul><li>常用牌号为：Q195、Q215、Q235、ST12、ST13、ST14、ST15、ST16、DC01、DC04等</li></ul><h3 id="ST12："><a href="#ST12：" class="headerlink" title="ST12："></a>ST12：</h3><ul><li>表示为最普通的钢号，与Q195、SPCC、DC01牌号材质基本相同；</li><li>st12属于德国标准(DIN1623)，相当于JISSPCCEN10130的DC01，美国标准ASTMA1008CS，宝钢企业标准Q/BQB403 DC01</li><li>ST12成分：碳(C)≤0.10,锰(Mn)≤0.50,磷(P)≤0.035,硫(S)≤0.035,Alt a≥0.020</li><li>ST12<a href="https://zhidao.baidu.com/search?word=力学性能&amp;fr=iknow_pc_qb_highlight">力学性能</a>：屈服强度a MPa≤280;<a href="https://zhidao.baidu.com/search?word=抗拉强度&amp;fr=iknow_pc_qb_highlight">抗拉强度</a> MPa≤270～410;断后伸长率（L0=80mm，b=20mm）％≥28</li></ul><h3 id="ST13-14："><a href="#ST13-14：" class="headerlink" title="ST13/14："></a>ST13/14：</h3><ul><li>表示为冲压级的钢号，与08AL、SPCD、DC03/04牌号材质基本相同；</li></ul><h3 id="ST15-16："><a href="#ST15-16：" class="headerlink" title="ST15/16："></a>ST15/16：</h3><ul><li>表示为冲压级的钢号，与08AL、SPCE、SPCEN、DC05/06牌号材质基本相同</li></ul><h2 id="日本JIS标准材质含义"><a href="#日本JIS标准材质含义" class="headerlink" title="日本JIS标准材质含义"></a>日本JIS标准材质含义</h2><ul><li><p>SPCC—-S表示为钢（Steel），P表示为板（Plate），C表示冷（Cold），C表示商业（Commercial），为日本JIS标准</p></li><li><p>如需保证抗拉强度，在牌号末尾加T，为：SPCCT</p></li><li><p>SPCD—-表示冲压用冷轧碳素钢薄板及钢带，相当于中国08AL（13237）优质碳素结构钢</p></li><li><p>SPCE—-表示深冲用冷轧碳素钢薄板及钢带，相当于中国08AL（5213）深冲钢</p></li><li><p>如需保证非时效性，在牌号末尾加N为SPCEN</p></li><li><p>冷轧碳素钢薄板及钢带调质代号：退火状态为A，标准调质为S，1/8硬度为8，1/4硬度为4，1/2硬度为2，全硬度为1.表面加工代号：无光泽精轧为D，光亮精轧为B</p></li><li><p>机械结构用钢牌号的表示方法为：S+含碳量+字母代号（C、CK），其中含碳量用中间值*100表示，字母C表示碳，字母K表示渗碳用钢。如碳结卷板S20C其含碳量为0.18-0.23%</p></li></ul><h2 id="中国GB标准材质含义"><a href="#中国GB标准材质含义" class="headerlink" title="中国GB标准材质含义"></a>中国GB标准材质含义</h2><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><ul><li>由Q+数字+<a href="https://baike.baidu.com/item/质量等级/4019929?fromModule=lemma_inlink">质量等级</a>符号+脱氧方法符号组成。它的<a href="https://baike.baidu.com/item/钢号/4839019?fromModule=lemma_inlink">钢号</a>冠以“Q”，代表钢材的屈服点，后面的数字表示屈服点数值，单位是MPa例如<a href="https://baike.baidu.com/item/Q235/7080880?fromModule=lemma_inlink">Q235</a>表示<a href="https://baike.baidu.com/item/屈服点/949525?fromModule=lemma_inlink">屈服点</a>（σs）为235 MPa的<a href="https://baike.baidu.com/item/碳素结构钢/10918868?fromModule=lemma_inlink">碳素结构钢</a></li><li>必要时钢号后面可标出表示质量等级和脱氧方法的符号。质量等级符号分别为A、B、C、D</li><li>脱氧方法符号：F表示<a href="https://baike.baidu.com/item/沸腾钢/10240340?fromModule=lemma_inlink">沸腾钢</a>；b表示<a href="https://baike.baidu.com/item/半镇静钢/6116167?fromModule=lemma_inlink">半镇静钢</a>；Z表示<a href="https://baike.baidu.com/item/镇静钢/10240312?fromModule=lemma_inlink">镇静钢</a>；TZ表示<a href="https://baike.baidu.com/item/特殊镇静钢/7197391?fromModule=lemma_inlink">特殊镇静钢</a>，镇静钢可不标符号，即Z和TZ都可不标。例如Q235-AF表示A级<a href="https://baike.baidu.com/item/沸腾钢/10240340?fromModule=lemma_inlink">沸腾钢</a></li></ul></div><ul><li><p>从牌号上基本上分为：Q195、Q215、Q235、Q255、Q275等</p></li><li><p>Q表示钢材屈服点“屈”字的汉语拼音首位字母，195、215等表示屈服点的数值</p></li><li><p>从化学成分上分，低碳钢牌号：Q195、Q215、Q235、Q255、Q275牌号越大，含碳量、含锰量越高，其塑性就越稳定</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 材料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AnsysWorkbench - 求解错误汇总</title>
      <link href="/undefined/81f0.html"/>
      <url>/undefined/81f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="材料定义"><a href="#材料定义" class="headerlink" title="材料定义"></a>材料定义</h2><h3 id="材料属性不全"><a href="#材料属性不全" class="headerlink" title="材料属性不全"></a>材料属性不全</h3><ul><li>错误提示信息</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*** ERROR ***                           CP =       0.922   TIME= 22:21:20</span><br><span class="line"> Element 1 references undefined EX of material 1.                        </span><br><span class="line"></span><br><span class="line"> *** ERROR ***                           CP =       0.922   TIME= 22:21:20</span><br><span class="line"> The step data was checked and there were errors found.                  </span><br><span class="line">  Please check output or errors file (                                   </span><br><span class="line"> E:\DATA\ansysMyself\_ProjectScratch\Scr016B\file0.err ) for messages.   </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>解决方案</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对材料进行定义杨氏模量和泊松比</span><br></pre></td></tr></table></figure><h2 id="刚体运动"><a href="#刚体运动" class="headerlink" title="刚体运动"></a>刚体运动</h2><blockquote><p>刚体运动的判定方式：将所有的零件假象为刚体，在X/Y/Z方向施加微小的力，零件或者部件会因为受力不平衡而发生运动</p><p>静态分析中不允许产生，必须进行消除</p></blockquote><ul><li>产生刚体可能原因</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、缺少约束</span><br><span class="line">2、遗漏或者设置错误接触</span><br><span class="line">3、三维模型本身的间隙</span><br><span class="line">4、网格划分产生的间隙</span><br><span class="line">5、数值算法产生的微小平衡力</span><br><span class="line">6、接触面存在间隙</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> AnsysWorkbench </tag>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AnsysWorkbench - 自由度约束</title>
      <link href="/undefined/2d8c.html"/>
      <url>/undefined/2d8c.html</url>
      
        <content type="html"><![CDATA[<h2 id="结构自由度"><a href="#结构自由度" class="headerlink" title="结构自由度"></a>结构自由度</h2><ul><li>是指完全确定物体在空间位置所需要的独立坐标的个数</li></ul><p><img src="/undefined/2d8c/平面一点的自由度.png" alt="平面一点的自由度"></p><p><img src="/undefined/2d8c/空间一点的自由度.png" alt="空间一点的自由度"></p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">中文释义</th><th style="text-align:center">UX</th><th style="text-align:center">UY</th><th style="text-align:center">UZ</th><th style="text-align:center">ROTX</th><th style="text-align:center">ROTY</th><th style="text-align:center">ROTZ</th></tr></thead><tbody><tr><td style="text-align:center">Fix Supported</td><td style="text-align:center">固定约束</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">Simply Supported</td><td style="text-align:center">简单约束</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Fixed Rotation</td><td style="text-align:center">转动约束</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">Displacement</td><td style="text-align:center">强制位移</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Remote Displacement</td><td style="text-align:center">远端位移约束</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> AnsysWorkbench </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AnsysWorkbench - 网格剖分质量参数</title>
      <link href="/undefined/2d8c.html"/>
      <url>/undefined/2d8c.html</url>
      
        <content type="html"><![CDATA[<h3 id="纵横比"><a href="#纵横比" class="headerlink" title="纵横比"></a>纵横比</h3><ul><li><p>英文名称：Aspect ratio,这个名词大家在划分网格或者计算的时候可能会经常遇到，如：</p><p>Brick element 91 has an aspect ratio of 1.E+20, which exceeds the error limit of1000000</p><p>这个就是提示单元的纵横比超限了，需改善网格，<strong>纵横比默认情况下达到20软件会发出警告，超过10^6时，则会直接弹出错误。</strong></p></li><li><p>纵横比的计算分两种情况：三角形和四边形，对于实体单元，选取每一面的中线连接成三角形，然后在依次计算</p></li></ul><p><img src="/undefined/2d8c/四边形单元.png" alt="ANSYS网格质量评定指标介绍"></p><p><img src="/undefined/2d8c/MyBlog/source/_posts\AnsysWorkbench - 网格剖分质量参数.assets\三角形单元.png" alt="ANSYS网格质量评定指标介绍"></p><ul><li>纵横比的限制导致在实际划分网格时应尽量使得单元各边尺寸均分，若不同零件部位单元尺寸变化较大，应尽量设置过渡段，下面分别为三角形和四边形纵横比为1和20的变形情况：<strong>也即单元形状越不接近等边三角形或者正方形，纵横比越大，最好的值为1</strong></li></ul><p><img src="/undefined/2d8c/MyBlog/source/_posts\AnsysWorkbench - 网格剖分质量参数.assets\三角形.png" alt="ANSYS网格质量评定指标介绍"></p><p><img src="/undefined/2d8c/MyBlog/source/_posts\AnsysWorkbench - 网格剖分质量参数.assets\四边形.png" alt="ANSYS网格质量评定指标介绍"></p><h3 id="对边偏差角"><a href="#对边偏差角" class="headerlink" title="对边偏差角"></a>对边偏差角</h3><p>英文名称：Parallel Deviation，该参数主要针对四边形而言，主要是描述两个对边的夹角，计算原理如下，分别计算平行于每条边的单位向量，然后依次求解对边单位向量之间的余弦值，最后得到对边之间的角度，取两个角度之间的最大值作为偏差角</p><p><img src="/undefined/2d8c/对边偏差角定义.png" alt="ANSYS网格质量评定指标介绍"></p><p>下面分别各种角度情况下的单元形状：</p><p><img src="/undefined/2d8c/各种角度的单元形状.png" alt="ANSYS网格质量评定指标介绍"></p><p><strong>系统默认情况如下：</strong></p><p><strong>1、当无中间节点时，发出警告限值为70度，发出错误限值为150度；</strong></p><p><strong>2、当有中间节点时，发出警告限值为100度，发出错误限值为170度；</strong></p><p><strong>故单元的形状越接近矩形，偏差角越小，单元形状越好，最好的值为0</strong></p><h3 id="单元最大内角"><a href="#单元最大内角" class="headerlink" title="单元最大内角"></a>单元最大内角</h3><p>英文名称：Maximum Corner Angle,该参数主要是检查单元的最大内角值，参数很好理解，下面为参数在不同取值情况下的单元形状：</p><p><img src="/undefined/2d8c/单元最大内角-三角形.png" alt="ANSYS网格质量评定指标介绍"></p><p><img src="/undefined/2d8c/单元最大内角-四边形.png" alt="ANSYS网格质量评定指标介绍"></p><p><strong>系统默认情况如下：</strong></p><p><strong>1、对于三角形，发出警告限值为165度，发出错误限值为179.9度；</strong></p><p><strong>2、对于无中间节点四边形，发出警告限值为155度，发出错误限值为179.9度；</strong></p><p><strong>3、对于有中间节点四边形，发出警告限值为165度，发出错误限值为179.9度。</strong></p><p><strong>故对四边形而言，90度最好，对三角形而言，60度最好。</strong></p><h3 id="雅可比系数"><a href="#雅可比系数" class="headerlink" title="雅可比系数"></a>雅可比系数</h3><p>英文名：Jacobian Rotio，这是在单元形状检查中一个比较重要的系数，其具体计算方法较为复杂，有兴趣的同学可去查看相关有限元专著，<strong>这里可以简单的将雅克比系数理解为 有限元模拟与实际情况的可靠度指标，雅克比系数越大，表明该单元模拟越不可靠。</strong></p><p><strong>默认情况下，雅克比系数取样点为角点，此时警告值为30，错误值为1000；当打开采用取样点为积分点时，警告值为10，错误值为40，</strong>可采用命令流【shpp,lstet,on】进行开启，积分点取样计算的雅克比系数小于角点取样计算的雅克比系数，适用于线性分析，一般情况取角点取样计算，即按软件默认方式即可。</p><p>下面分别列出了三角形、四边形以及有中间节点四边形在不同雅克比系数下的单元形状。</p><p><img src="/undefined/2d8c/雅可比系数-三角形.png" alt="ANSYS网格质量评定指标介绍"></p><p><img src="/undefined/2d8c/雅可比系数-四边形.png" alt="ANSYS网格质量评定指标介绍"></p><p><img src="/undefined/2d8c/雅可比系数-四边形带中间节点.png" alt="ANSYS网格质量评定指标介绍"></p><p><strong>雅克比系数最好的值为1，值越大，计算结果越不可靠</strong></p><h3 id="翘曲系数"><a href="#翘曲系数" class="headerlink" title="翘曲系数"></a>翘曲系数</h3><p>英文名：Warping Factor,大家在网格划分时候也会经常遇到单元翘曲过度的情况，四边形壳单元和六面体单元、楔形体的四边形表面、金字塔单元的表面需要计算和检测翘曲系数。</p><p>下图分别为壳单元和实体单元在不同翘曲系数情况下的单元形状：</p><p><img src="/undefined/2d8c/翘曲系数-壳单元.png" alt="ANSYS网格质量评定指标介绍"></p><p><img src="/undefined/2d8c/翘曲系数-实体单元.png" alt="ANSYS网格质量评定指标介绍"></p><p>对于壳单元来讲，翘曲系数的限值和单元类型以及求解设置相关，如默认情况下：</p><p><strong>壳单元警告值为1.0，出错值为5.0；而在大变形打开时，当设置薄壳时，单元警告值则变为0.1，错误值为1.0，具体可按软件默认值即可。</strong></p><p><strong>实体单元警告值为0.2，错误值为0.4。</strong></p><p><strong>翘曲系数最好的值为0，值越大说明单元翘曲越厉害。</strong></p><p>上面五个系数为ANSYS经典经常用到的网格质量评定系数，而在Workbench中，除了上述五个外，还有如下三个系数供参考</p><h3 id="网格评定系数"><a href="#网格评定系数" class="headerlink" title="网格评定系数"></a>网格评定系数</h3><p>英文名：Element Quality，该系数通过如下计算方法来评定网格尺寸的好坏</p><p><img src="/undefined/2d8c/网格评定系数.png" alt="ANSYS网格质量评定指标介绍"></p><p>上式中，C为常数，根据单元类型取值，具体同学们可自行查看Help。<strong>该系数为1时，表明网格质量最好，系数为0时，表明网格质量最差，在具体做分析时，可保证平均值不低于0.7，当然这是经验之谈，具体项目可具体分析。</strong></p><h3 id="偏斜系数"><a href="#偏斜系数" class="headerlink" title="偏斜系数"></a>偏斜系数</h3><p>英文名：Skewness, 该系数是用来判定网格形状是否接近理想状态，<strong>该值为0时，表示越接近理想状态，网格质量约好，相反，越接近1时，表明网格质量越不好</strong></p><p>三角形和四边形的判定形态如下：</p><p><img src="/undefined/2d8c/AnsysWorkbench - 网格剖分质量参数偏斜系数-三角形.png" alt="ANSYS网格质量评定指标介绍"></p><p><img src="/undefined/2d8c/MyBlog/source/_posts\AnsysWorkbench - 网格剖分质量参数.assets\偏斜系数-四边形.jpeg" alt="ANSYS网格质量评定指标介绍"></p><p>根据不同的值，下表给出了对应的状态描述，一般而言，对于平面问题，该系数不应大于0.5，对于三维分析问题，大部分网格需小于0.5，非关心区域网格可局部为fair甚至bad级别</p><p><img src="/undefined/2d8c/偏斜系数值.png" alt="ANSYS网格质量评定指标介绍"></p><h3 id="正交质量系数"><a href="#正交质量系数" class="headerlink" title="正交质量系数"></a>正交质量系数</h3><p>英文名：Orthogonal Quality，该参数做流体类的朋友们可能需要额外留意一下，<strong>该系数最好的值为1，最差的值为0，具体计算方法可查看Help</strong></p><p><img src="/undefined/2d8c/正交质量系数.png" alt="ANSYS网格质量评定指标介绍"></p><p><strong>1. Aspect Radio（网格纵横比）：其值越接近1，说明网格质量越好。</strong></p><p><strong>2. Parallel Deviation（对边偏角差）：其值越接近0，说明网格质量越好。</strong></p><p><strong>3. Maximum Corner Angle（单元最大内角）：三角形，越接近60度越好；四边形，越接近90度越好。</strong></p><p><strong>4. Jacobian Ratio（雅克比比率）：其值越接近1，说明网格质量越好。</strong></p><p><strong>5. Wraping Factor（翘曲系数）：其值越接近0，说明网格质量越好。</strong></p><p><strong>6. Mesh Metric（网格质量系数）：其值越接近1，说明网格质量越好。</strong></p><p><strong>7. Skewness（偏斜系数）：其值越接近0，说明网格质量越好。</strong></p><p><strong>8. Orthogonal Quality（正交质量系数）：其值越接近1，说明网格质量越好。</strong></p><h2 id="单元质量检查控制参数"><a href="#单元质量检查控制参数" class="headerlink" title="单元质量检查控制参数"></a>单元质量检查控制参数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">四边形单元</th><th style="text-align:center">三角形单元</th><th style="text-align:center">六面体单元</th><th style="text-align:center">楔形单元</th><th style="text-align:center">四面体单元</th></tr></thead><tbody><tr><td style="text-align:center">长宽比</td><td style="text-align:center">≤5.0</td><td style="text-align:center">≤5.0</td><td style="text-align:center">≤5.0</td><td style="text-align:center">≤5.0</td><td style="text-align:center">≤5.0</td></tr><tr><td style="text-align:center">翘曲比</td><td style="text-align:center">≤16°</td><td style="text-align:center">-</td><td style="text-align:center">≤18°</td><td style="text-align:center">≤18°</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">偏斜度</td><td style="text-align:center">≤60°</td><td style="text-align:center">≤60°</td><td style="text-align:center">≤60°</td><td style="text-align:center">≤60°</td><td style="text-align:center">≤60°</td></tr><tr><td style="text-align:center">内角</td><td style="text-align:center">40°~135°</td><td style="text-align:center">20°~120°</td><td style="text-align:center">40°~135°</td><td style="text-align:center">20°~120°</td><td style="text-align:center">20°~120°</td></tr></tbody></table></div><ul><li><strong>Element Quality(单元质量)</strong>：除线/点单元外，用单元体积/边长比值提供单元质量因子，0~1,1最好，一般为0.3-0.7</li><li><strong>Aspect Ratio(纵横比)</strong>：单元三角形或者四边形计算长宽比，理想为1，建议最大值不超过1-10</li><li><strong>Jacobian Ratio(雅克比率)</strong>：正三角形、正四边形、正四面体、正六面体雅克比率为1，衡量单元扭曲程度&lt;40可以计算</li><li><strong>Warping Factor(翘曲度)</strong>：正三/四边形、正四/六面体为0，&lt;5可以计算</li><li><strong>Parallel Deviation(平行偏差)</strong>：理想为0，&lt;15°</li><li><strong>Maximum Corner Angle(最大顶角)</strong>：正三角形理想60°，四边形理想90°，计算&lt;155°</li><li><strong>Skewness(倾斜度)</strong>：最优值为0，[“正系列”几何体]&lt;0.75可以计算</li><li><strong>Orthogonal Quality(正交质量)</strong>：最优值为1，最差值为0</li></ul><h3 id="网格划分方法"><a href="#网格划分方法" class="headerlink" title="网格划分方法"></a>网格划分方法</h3><ul><li>自动划分法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> AnsysWorkbench </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有限元分析 - 单元类型</title>
      <link href="/undefined/24515.html"/>
      <url>/undefined/24515.html</url>
      
        <content type="html"><![CDATA[<h3 id="根据单元形状"><a href="#根据单元形状" class="headerlink" title="根据单元形状"></a>根据单元形状</h3><h4 id="实体单元"><a href="#实体单元" class="headerlink" title="实体单元"></a>实体单元</h4><ul><li>六面体单元</li><li>四面体单元</li></ul><h4 id="壳（qiao）单元"><a href="#壳（qiao）单元" class="headerlink" title="壳（qiao）单元"></a>壳（qiao）单元</h4><ul><li>四边形单元</li><li>三角形单元</li></ul><h4 id="杆梁单元"><a href="#杆梁单元" class="headerlink" title="杆梁单元"></a>杆梁单元</h4><h3 id="根据单元形函数复杂程度"><a href="#根据单元形函数复杂程度" class="headerlink" title="根据单元形函数复杂程度"></a>根据单元形函数复杂程度</h3><ul><li>一阶单元</li><li>二阶单元</li></ul><h3 id="最终分类"><a href="#最终分类" class="headerlink" title="最终分类"></a>最终分类</h3><ul><li>二阶六面体单元（退化为二阶四面体单元）</li><li><p>一阶六面体单元（退化为一阶四面体单元）</p></li><li><p>二阶四边形单元（退化为二阶三角形单元）</p></li><li>一阶四边形单元（退化为一阶三角形单元）</li><li>二阶杆梁单元</li><li>一阶杆梁单元</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记 -MyBatis</title>
      <link href="/undefined/7bf7.html"/>
      <url>/undefined/7bf7.html</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis搭建"><a href="#MyBatis搭建" class="headerlink" title="MyBatis搭建"></a>MyBatis搭建</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MyBatis的核心配置文件"><a href="#MyBatis的核心配置文件" class="headerlink" title="MyBatis的核心配置文件"></a>MyBatis的核心配置文件</h3><ul><li>存放路径：<code>src/main/resources</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        MyBatis核心配置文件中，标签的顺序：</span></span><br><span class="line"><span class="comment">        properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,</span></span><br><span class="line"><span class="comment">        objectWrapperFactory?,reflectorFactory?,plugins?,</span></span><br><span class="line"><span class="comment">        environments?,databaseIdProvider?,mappers?</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--properties 引入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置MyBatis的全局配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mapUnderscoreToCamelCase 将_ 自动映射为驼峰 emp_name: empName--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置类型别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            alias: 设置则为填写后的别名</span></span><br><span class="line"><span class="comment">                   不设置则默认别名为类名且不区分大小写</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.zhibi.mybatis.pojo.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zhibi.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environments：配置多个链接数据库的环境</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">            default: 设置默认使用的环境id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            environment：配置某个具体的环境</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">                id：表示链接数据库的环境的唯一标识，且不能重复</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                    type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">                    JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事务的提交或回滚需要手动处理</span></span><br><span class="line"><span class="comment">                    MANAGED：被管理，</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                dataSource：配置数据源</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                    type:设置数据源类型</span></span><br><span class="line"><span class="comment">                    type=&quot;POOLED|UNPOOLED|JND1&quot;</span></span><br><span class="line"><span class="comment">                    POOLED: 表示使用数据库连接池缓存数据库连接</span></span><br><span class="line"><span class="comment">                    UNPOOLED：表示不使用数据库连接池</span></span><br><span class="line"><span class="comment">                    JND1：表示使用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--链接数据库的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            以包为单位引入映射文件</span></span><br><span class="line"><span class="comment">            要求：</span></span><br><span class="line"><span class="comment">            1、mapper接口所在的包和映射文件所在的包一致</span></span><br><span class="line"><span class="comment">            2、mapper接口要和映射文件的名字一致</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            创建包格式：com/zhibi/mybatis/mapper</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.zhibi.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建Mapper接口"><a href="#创建Mapper接口" class="headerlink" title="创建Mapper接口"></a>创建Mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis面向接口编程的两个一致：</span></span><br><span class="line"><span class="comment">     * 1、映射文件的namespace要和接口的全类名一致</span></span><br><span class="line"><span class="comment">     * 2、映射文件中SQL语句的id要和mapper接口中的方法名一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建映射文件"><a href="#创建映射文件" class="headerlink" title="创建映射文件"></a>创建映射文件</h3><div class="table-container"><table><thead><tr><th>Java概念</th><th>数据库概念</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段/列</td></tr><tr><td>对象</td><td>记录/行</td></tr></tbody></table></div><ul><li>表所对应的实体类的类名+Mapper.xml</li><li>存放的位置是<code>src/main/resources/mappers</code>目录下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhibi.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user values(null,&#x27;admin&#x27;,&#x27;123&#x27;,18,&#x27;男&#x27;,&#x27;123@qq.com&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过junit测试功能"><a href="#通过junit测试功能" class="headerlink" title="通过junit测试功能"></a>通过junit测试功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//获取sqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line">        <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line">    <span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        <span class="comment">//sqlSession.commit();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>此时需要手动提交事务，如果要自动提交事务，则在获取sqlSession对象时，使用<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code>，传入一个Boolean类型的参数，值为true，这样就可以自动提交</li></ul><h3 id="加入log4j功能"><a href="#加入log4j功能" class="headerlink" title="加入log4j功能"></a>加入log4j功能</h3><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>加入配置文件</p><ul><li>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</li><li>日志的级别：FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) 从左到右打印的内容越来越详细</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE log4j:configuration SYSTEM &quot;log4j.dtd&quot;&gt;</span><br><span class="line">&lt;log4j:configuration xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&gt;</span><br><span class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;org.apache.log4j.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;</span><br><span class="line">&lt;param name=&quot;ConversionPattern&quot; value=&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot; /&gt;</span><br><span class="line">        &lt;/layout&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    &lt;logger name=&quot;java.sql&quot;&gt;</span><br><span class="line">        &lt;level value=&quot;debug&quot; /&gt;</span><br><span class="line">    &lt;/logger&gt;</span><br><span class="line">    &lt;logger name=&quot;org.apache.ibatis&quot;&gt;</span><br><span class="line">        &lt;level value=&quot;info&quot; /&gt;</span><br><span class="line">    &lt;/logger&gt;</span><br><span class="line">    &lt;root&gt;</span><br><span class="line">        &lt;level value=&quot;debug&quot; /&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/log4j:configuration&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="默认的类型别名"><a href="#默认的类型别名" class="headerlink" title="默认的类型别名"></a>默认的类型别名</h2><p><img src="/undefined/7bf7/默认的类型别名1.png" alt></p><p><img src="/undefined/7bf7/默认的类型别名2.png" alt></p><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">    delete from t_user where id = 6 </span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">     update t_user set username = &#x27;张三&#x27; where id = 5</span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查询一个实体类对象"><a href="#查询一个实体类对象" class="headerlink" title="查询一个实体类对象"></a>查询一个实体类对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span>  </span><br><span class="line">select * from t_user where id = 2  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查询集合"><a href="#查询集合" class="headerlink" title="查询集合"></a>查询集合</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span>    </span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系  </span><br><span class="line">- resultType：自动映射，用于属性名和表中字段名一致的情况  </span><br><span class="line">- resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况  </span><br></pre></td></tr></table></figure><h2 id="获取参数值方式"><a href="#获取参数值方式" class="headerlink" title="获取参数值方式"></a>获取参数值方式</h2><ul><li>MyBatis获取参数值的两种方式：${}和#{}  </li><li>${}的本质就是字符串拼接，#{}的本质就是占位符赋值  </li><li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li></ul><h3 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h3><ul><li>${} 使用需要手动加单引号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">select * from t_user where username = &#x27;$&#123;username&#125;&#x27;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h3><ul><li>以arg0,arg1…为键，以参数为值；</li></ul><ol><li>以param1,param2…为键，以参数为值；</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User login(String username, String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username = #&#123;param1&#125; and password = #&#123;param2&#125;--&gt;</span></span><br><span class="line">    select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- User checkLogin(Map&lt;String,Object&gt; map);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLogin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">        <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLogin(map);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> &gt;</span></span><br><span class="line">    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-Param标识参数（主要使用）"><a href="#使用-Param标识参数（主要使用）" class="headerlink" title="使用@Param标识参数（主要使用）"></a>使用@Param标识参数（主要使用）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User loginByParam(@Param(&quot;username&quot;) String username,@Param(&quot;password&quot;) String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;loginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询功能"><a href="#查询功能" class="headerlink" title="查询功能"></a>查询功能</h2><h3 id="查询一个实体类"><a href="#查询一个实体类" class="headerlink" title="查询一个实体类"></a>查询一个实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查询一个List集合"><a href="#查询一个List集合" class="headerlink" title="查询一个List集合"></a>查询一个List集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * 查询所有用户信息 * <span class="doctag">@return</span> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查询单个数据"><a href="#查询单个数据" class="headerlink" title="查询单个数据"></a>查询单个数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询用户的总记录数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 在MyBatis中，对于Java中常用的类型都设置了类型别名  </span></span><br><span class="line"><span class="comment"> * 例如：java.lang.Integer--&gt;int|integer  </span></span><br><span class="line"><span class="comment"> * 例如：int--&gt;_int|_integer  </span></span><br><span class="line"><span class="comment"> * 例如：Map--&gt;map,List--&gt;list  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查询一条数据为map集合"><a href="#查询一条数据为map集合" class="headerlink" title="查询一条数据为map集合"></a>查询一条数据为map集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果：&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询多条数据为map集合"><a href="#查询多条数据为map集合" class="headerlink" title="查询多条数据为map集合"></a>查询多条数据为map集合</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span>  </span><br><span class="line">select * from t_user  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">[&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的map集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="特殊SQL的执行"><a href="#特殊SQL的执行" class="headerlink" title="特殊SQL的执行"></a>特殊SQL的执行</h2><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;username&quot;) String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;username&#125;%&#x27;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;username&#125;,&#x27;%&#x27;)--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--建议使用第三种--&gt;</span></span><br><span class="line">    select * from t_user where username like &quot;%&quot;#&#123;username&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><ul><li>只能使用${}，如果使用#{}，则解析后的sql语句为<code>delete from t_user where id in (&#39;1,2,3&#39;)</code>，这样是将<code>1,2,3</code>看做是一个整体，只有id为<code>1,2,3</code>的数据会被删除。正确的语句应该是<code>delete from t_user where id in (1,2,3)</code>，或者<code>delete from t_user where id in (&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMore(@Param(&quot;ids&quot;) String ids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里不能使用#&#123;&#125; 因为#&#123;&#125;会自动加&#x27;&#x27;--&gt;</span></span><br><span class="line">    delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h3><ul><li>只能使用${}，因为表名不能加单引号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByTable(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTable&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加功能获取自增的主键"><a href="#添加功能获取自增的主键" class="headerlink" title="添加功能获取自增的主键"></a>添加功能获取自增的主键</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user);--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        useGeneratedKeys: 设置使用了自增的主键</span></span><br><span class="line"><span class="comment">        keyProperty: 将获取的自增的主键的值赋值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">        <span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;关羽&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;guanyu@qq.com&quot;</span>);</span><br><span class="line">        mapper.insertUser(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出：User&#123;id=7, username=&#x27;关羽&#x27;, password=&#x27;123&#x27;, age=18, sex=&#x27;男&#x27;, email=&#x27;guanyu@qq.com&#x27;&#125;</span></span><br><span class="line"><span class="comment">//将自增的主键值赋值到id中</span></span><br></pre></td></tr></table></figure><h2 id="自定义映射"><a href="#自定义映射" class="headerlink" title="自定义映射"></a>自定义映射</h2><ul><li>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt;  getAllEmp();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMapper&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        resultMap：设置自定以映射关系</span></span><br><span class="line"><span class="comment">        id：唯一标识不能重复</span></span><br><span class="line"><span class="comment">        type：设置映射关系中的类型</span></span><br><span class="line"><span class="comment">        子标签：</span></span><br><span class="line"><span class="comment">        id 设置主键的映射关系</span></span><br><span class="line"><span class="comment">        result 设置普通字段的映射关系</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        property 设置映射关系中的属性名，必须是type属性设置的实体类中的属性名</span></span><br><span class="line"><span class="comment">        column 设置映射关系中的字段名，必须是sql语句查询出的字段名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）。此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系  </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 可以通过为字段起别名的方式，保证和实体类中的属性名保持一致  </span><br><span class="line">```xml</span><br><span class="line">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span><br><span class="line">&lt;select id=&quot;getAllEmp&quot; resultType=&quot;Emp&quot;&gt;</span><br><span class="line">select eid,emp_name empName,age,sex,email from t_emp</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ol><li>可以在MyBatis的核心配置文件中的<code>setting</code>标签中，设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName。<a href="#核心配置文件详解">核心配置文件详解</a> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 多对一映射</span><br><span class="line"></span><br><span class="line">### 级联属性赋值</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;!--处理多对一映射关系方式一：级联属性赋值--&gt;</span><br><span class="line">&lt;resultMap id=&quot;empAndDeptResultMaoOne&quot; type=&quot;Emp&quot;&gt;</span><br><span class="line">    &lt;id property=&quot;eid&quot; column=&quot;eid&quot;&gt;&lt;/id&gt;</span><br><span class="line">    &lt;result property=&quot;empName&quot; column=&quot;emp_name&quot;&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property=&quot;age&quot; column=&quot;age&quot;&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property=&quot;sex&quot; column=&quot;sex&quot;&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property=&quot;email&quot; column=&quot;email&quot;&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property=&quot;dept.did&quot; column=&quot;did&quot;&gt;&lt;/result&gt;</span><br><span class="line">    &lt;result property=&quot;dept.deptName&quot; column=&quot;dept_name&quot;&gt;&lt;/result&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="assication标签"><a href="#assication标签" class="headerlink" title="assication标签"></a>assication标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理多对一映射关系方式二：采用association标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            association：处理多对一的映射关系</span></span><br><span class="line"><span class="comment">            property: 需要处理的多对一映射关系的属性名</span></span><br><span class="line"><span class="comment">            javaType：该属性的类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分步查询"><a href="#分步查询" class="headerlink" title="分步查询"></a>分步查询</h2><ol><li>查询员工信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一步 EmpMapper里的方法</span></span><br><span class="line"><span class="comment"> * 通过分步查询获取某个员工的信息和部门信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--EmpMapper.xml文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptBySeptResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptBySeptResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            select:设置分步查询的sql唯一标识(namespace.SQLId或mapper接口的全类名.方法名)</span></span><br><span class="line"><span class="comment">            column:设置分步查询的条件</span></span><br><span class="line"><span class="comment">            fetchType:当开启了全局的延迟加载后，可通过此属性手动控制延迟加载的效果</span></span><br><span class="line"><span class="comment">            fetchType=&quot;lazy|eager&quot;  lazy：延迟加载 eager：立即加载</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;com.zhibi.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>查询部门信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DeptMapper 分步查询第二步</span></span><br><span class="line"><span class="comment">     * 查询部门信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DeptMapper.xml 文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmpAndDeptByStepTwo&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--此处的resultMap仅是处理字段和属性的映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmpAndDeptByStepTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一对多映射"><a href="#一对多映射" class="headerlink" title="一对多映射"></a>一对多映射</h2><h3 id="connection标签"><a href="#connection标签" class="headerlink" title="connection标签"></a>connection标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            collection: 处理一对多的映射关系</span></span><br><span class="line"><span class="comment">            ofType: 表示该属性所对应的集合中存储数据的类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmp(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分步查询-1"><a href="#分步查询-1" class="headerlink" title="分步查询"></a>分步查询</h3><ol><li>查询部门信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** DpetMapper </span></span><br><span class="line"><span class="comment">     * 获取部门及部门中所有的员工信息</span></span><br><span class="line"><span class="comment">     * 分步查询第一步：查询部门信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.zhibi.mybatis.mapper.EmpMapper.getDeptAndEmpBySeptTwo&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>查询员工信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** EmpMapper</span></span><br><span class="line"><span class="comment">     * 获取部门及部门中所有的员工信息</span></span><br><span class="line"><span class="comment">     * 分步查询第二步：查询员工信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Emp&gt; <span class="title function_">getDeptAndEmpBySeptTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpBySeptTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpBySeptTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置MyBatis的全局配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mapUnderscoreToCamelCase 将_ 自动映射为驼峰 emp_name: empName--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置延迟加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>开启后，需要用到查询dept的时候才会调用相应的SQL语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">System.out.println(emp.getEmpName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关闭延迟加载，两条SQL语句都运行了</li></ul><p><img src="/undefined/7bf7/延迟加载测试1.png" alt></p><ul><li>开启延迟加载，只运行获取emp的SQL语句</li></ul><p><img src="/undefined/7bf7/延迟加载测试2.png" alt></p><ul><li>控制加载效果</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptBySeptResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            select:设置分步查询的sql唯一标识(namespace.SQLId或mapper接口的全类名.方法名)</span></span><br><span class="line"><span class="comment">            column:设置分步查询的条件</span></span><br><span class="line"><span class="comment">            fetchType:当开启了全局的延迟加载后，可通过此属性手动控制延迟加载的效果</span></span><br><span class="line"><span class="comment">            fetchType=&quot;lazy|eager&quot;  lazy：延迟加载 eager：立即加载</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;com.zhibi.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><ul><li>根据标签中test属性所对应的表达式决定是否需要将内容拼接到SQL中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByConditionOne&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and emp_name = #&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><ul><li>当where标签中有内容时，会自动生成where关键字，并且将内容前的and或者or去除</li><li>当where标签中没有内容时，where标签不生效</li><li>注意：where标签不能将内容后的and或者or去除</li></ul><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">若标签中有内容时：</span></span><br><span class="line"><span class="comment">     * prefix|suffix: 将trim标签中的内容前面或后面添加指定内容</span></span><br><span class="line"><span class="comment">     * prefixOverrides|suffixOverrides: 将trim标签中内容前面或后面去掉指定内容</span></span><br><span class="line"><span class="comment">     * 若标签中没有内容时，trim标签也没有任何效果</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            emp_name = #&#123;empName&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125; or</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h3><ul><li>类似于switch … case .. default</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByChoose(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                emp_name = #&#123;empName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                age = #&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                sex = #&#123;sex&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                email = #&#123;email&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            age = 1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        separator: 分隔符</span></span><br><span class="line"><span class="comment">        open: 以什么开头</span></span><br><span class="line"><span class="comment">        close: 以什么结束</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int deleteEmpByArray(@Param(&quot;eids&quot;)Integer[] eids);--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 批量删除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteEmpByArray&quot;</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--delete from t_emp where eid in</span></span><br><span class="line"><span class="comment">            &lt;foreach collection=&quot;eids&quot; item=&quot;eid&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;</span></span><br><span class="line"><span class="comment">                #&#123;eid&#125;</span></span><br><span class="line"><span class="comment">            &lt;/foreach&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    delete from t_emp where</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span> &gt;</span></span><br><span class="line">        eid = #&#123;eid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 批量添加 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int insertMore(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMore&quot;</span>&gt;</span></span><br><span class="line">    insert into t_emp values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        (null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><ul><li>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</li><li>声明sql片段：<code>&lt;sql&gt;</code>标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>引用sql片段：<code>&lt;include&gt;</code>标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis缓存查询的顺序"><a href="#MyBatis缓存查询的顺序" class="headerlink" title="MyBatis缓存查询的顺序"></a>MyBatis缓存查询的顺序</h2><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用  </li><li>如果二级缓存没有命中，再查询一级缓存  </li><li>如果一级缓存也没有命中，则查询数据库  </li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li></ul>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AnsysWorkbench - 接触设置</title>
      <link href="/undefined/bfff.html"/>
      <url>/undefined/bfff.html</url>
      
        <content type="html"><![CDATA[<h2 id="接触面与目标面的选择原则"><a href="#接触面与目标面的选择原则" class="headerlink" title="接触面与目标面的选择原则"></a>接触面与目标面的选择原则</h2><ul><li>如凸面可能与一个平面或凹面接触，则平面或者凹面为目标单元，凸面为接触单元（<strong>弹性小球落体</strong>）</li><li>如两个面的网格疏密程度不同，则较密的网格应为接触面，较粗的网格为目标面（<strong>如螺栓与端板连接</strong>）</li><li>如果一个面比另一个面刚，则绞柔的面应为接触面，较刚的一面为目标面（<strong>如桩土接触</strong>）</li><li>如果高阶单元和低阶单元位于不同的面，则高阶单元为接触面，低阶为目标面</li><li>如果一个面明显比另外一个面大，则较大的面应指定为目标面，较小的面为接触面</li></ul><h2 id="接触行为"><a href="#接触行为" class="headerlink" title="接触行为"></a>接触行为</h2><ul><li><strong>Bonded</strong>：<strong>绑定接触</strong>，不允许滑动或者分离，类似共用节点</li><li><strong>No Separation</strong>：<strong>法向不分离接触</strong>，切向允许有小的滑动</li><li><strong>Frictionless：无摩擦</strong>，法向可分离，切向自由滑动</li><li><strong>Rough：粗糙</strong>，法向可分离，不渗透，切向不滑动</li><li><strong>Frictional：摩擦</strong>，法向可分离，不渗透，切向滑动，有摩擦力</li></ul><h2 id="重要指数"><a href="#重要指数" class="headerlink" title="重要指数"></a>重要指数</h2><p>接触刚度大，收敛困难，穿透量小，计算精度高，接触刚度小，收敛容易，穿透量大，计算精度低</p><ul><li>接触刚度：0.01~10</li><li>Pinball区域：影响接触初始状态的判定</li><li>穿透量：影响结果精度</li></ul><h2 id="接触算法"><a href="#接触算法" class="headerlink" title="接触算法"></a>接触算法</h2><h3 id="罚函数法（Pure-Penalty）"><a href="#罚函数法（Pure-Penalty）" class="headerlink" title="罚函数法（Pure Penalty）"></a>罚函数法（Pure Penalty）</h3><ul><li>默认算法，适用于各类型的非线性接触，将零件假设为两个节点之间通过弹簧连接，精度依赖于穿透量的大小，穿透量越小计算精度越高，但同时收敛性越差</li><li>使用罚函数时，需要检查接触面的穿透量</li><li><code>FNormal=KNormal x penetration</code>对接触刚度敏感性较高</li></ul><p><img src="/undefined/bfff/罚函数.png" alt="罚函数法（Pure Penalty）"></p><h3 id="一般拉格朗日算法（Normal-Lagrange）"><a href="#一般拉格朗日算法（Normal-Lagrange）" class="headerlink" title="一般拉格朗日算法（Normal Lagrange）"></a>一般拉格朗日算法（Normal Lagrange）</h3><ul><li>将接触压力作为一个自由度来满足接触兼容性，无需通过穿透量来计算接触压力</li><li>需要使用直接求解器来求解，计算速度较慢</li><li>计算震荡剧烈，较难收敛，但一旦收敛，由于没有假设零件之间的穿透，得到的结果精度较高</li></ul><p><img src="/undefined/bfff/一般拉格朗日.png" alt="一般拉格朗日算法（Normal Lagrange）"></p><h3 id="增广拉格朗日算法（Augmented-Lagrange）"><a href="#增广拉格朗日算法（Augmented-Lagrange）" class="headerlink" title="增广拉格朗日算法（Augmented Lagrange）"></a>增广拉格朗日算法（Augmented Lagrange）</h3><ul><li>从罚函数方法衍生而来，引入附加项</li><li><code>FNormal = Knormal x penetration + γ</code>对接触刚度敏感性降低，有利于在给定接触刚度较大时完成收敛，在一定程度上提高计算精度，但收敛时间长</li></ul><h3 id="多点约束法（MPC）"><a href="#多点约束法（MPC）" class="headerlink" title="多点约束法（MPC）"></a>多点约束法（MPC）</h3><ul><li>适用于<strong>绑定接触、不分离接触</strong>，在接触面之间添加一个联络使两个面不分离</li><li>有两个面几个模型有缝隙，在计算结束之后应检查计算结果</li><li>适用于<strong>大变形开关开启的计算</strong></li></ul><h3 id="梁约束法（Beam）"><a href="#梁约束法（Beam）" class="headerlink" title="梁约束法（Beam）"></a>梁约束法（Beam）</h3><ul><li>在两个接触面之间添加无质量的梁进行联结，适用于绑定接触</li></ul><h2 id="线性接触"><a href="#线性接触" class="headerlink" title="线性接触"></a>线性接触</h2><ul><li>Bonded、No Seperation</li><li>Beam、MPC：收敛性较好，计算速度较快</li></ul><h2 id="非线性接触"><a href="#非线性接触" class="headerlink" title="非线性接触"></a>非线性接触</h2><ul><li>Frictionless、Frictional、Rough</li><li>收敛性：罚函数 &gt; 增广拉格朗日 &gt; 一般拉格朗日</li><li>精度：一般拉格朗日 ＞ 增广拉格朗日 ＞ 罚函数</li><li>计算时间：一般拉格朗日 ＞ 增广拉格朗日 ＞ 罚函数</li></ul><h2 id="Penetration-Tolerance"><a href="#Penetration-Tolerance" class="headerlink" title="Penetration Tolerance"></a>Penetration Tolerance</h2><ul><li><p>指定穿透量容差</p></li><li><p>具体值、比例系数(0~1)</p></li></ul><h2 id="Elastic-Slip-Tolerance"><a href="#Elastic-Slip-Tolerance" class="headerlink" title="Elastic Slip Tolerance"></a>Elastic Slip Tolerance</h2><ul><li>指定滑动量容差，适用于一般拉格朗日法</li><li>具体直、比例系数(O~1)</li></ul><h2 id="Normal-Stiffness"><a href="#Normal-Stiffness" class="headerlink" title="Normal Stiffness"></a>Normal Stiffness</h2><ul><li>接触刚度设置</li><li>具体值、比例系数(0~1)</li></ul><h2 id="Update-stiffness"><a href="#Update-stiffness" class="headerlink" title="Update stiffness"></a>Update stiffness</h2><ul><li>接触刚度更新设置</li></ul><h2 id="Pinball"><a href="#Pinball" class="headerlink" title="Pinball"></a>Pinball</h2><ul><li>设置两个接触面之间的探测的距离</li><li>当接触面之间的距离小于pinball距离时，接触生效</li><li>当接触面之间的距离大于pinball距离时，接触失效</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> AnsysWorkbench </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AnsysWorkbench - 网格划分</title>
      <link href="/undefined/217a.html"/>
      <url>/undefined/217a.html</url>
      
        <content type="html"><![CDATA[<h2 id="面映射网格"><a href="#面映射网格" class="headerlink" title="面映射网格"></a>面映射网格</h2><details class="folding-tag" green><summary> 面映射网格 </summary>              <div class="content">              <ul><li>使用常规情况进行划分网格情况</li></ul><p><img src="/undefined/217a/常规情况.png" alt="自动划分"></p><ul><li>采用面网格剖分（面映射）划分网格情况</li></ul><p><img src="/undefined/217a/面网格剖分.png" alt="面网格剖分"></p><ul><li>面网格剖分步骤</li></ul><ol><li><p>在DesignModeler模块中选择分割边命令</p><p><img src="/undefined/217a/步骤一.png" alt="面网格剖分"></p></li><li><p>选取要划分网格区域的全部边线，并进行生成</p><p><img src="/undefined/217a/步骤二.png" alt="面网格剖分"></p></li><li><p>回到模型或Mesh模块，更新几何结构数据，显示如下图：</p><p><img src="/undefined/217a/步骤三.png" alt="面网格剖分"></p></li><li><p>点击网格-插入-面网格剖分</p><p><img src="/undefined/217a/步骤四.png" alt="面网格剖分"></p></li><li><p>几何结构选择要划分网格的面，指定的边选择如图：</p><p><img src="/undefined/217a/步骤五.png" alt="面网格剖分"></p></li><li><p>指定的拐角选择如图：</p><p><img src="/undefined/217a/步骤六.png" alt="面网格剖分"></p></li><li><p>指定的端选择如图：</p><p><img src="/undefined/217a/步骤七.png" alt="面网格剖分"></p></li><li><p>调整网格尺寸，生成网格</p></li></ol>              </div>            </details><h2 id="网格尺寸自适应调整"><a href="#网格尺寸自适应调整" class="headerlink" title="网格尺寸自适应调整"></a>网格尺寸自适应调整</h2><details class="folding-tag" green><summary> 网格尺寸自适应调整 </summary>              <div class="content">              <ul><li><p>开启网格尺寸自适应调整情况</p><p><img src="/undefined/217a/开启网格尺寸自适应调整.png" alt="开启网格尺寸自适应调整"></p></li><li><p>关闭网格尺寸自适应调整情况</p><p><img src="/undefined/217a/关闭网格尺寸自适应调整.png" alt="关闭网格尺寸自适应调整"></p></li></ul>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> AnsysWorkbench </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料库</title>
      <link href="/undefined/83a7.html"/>
      <url>/undefined/83a7.html</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>内容说明：所有资源收集来源于网络，版权归发布者所有，若有侵权，请联系进行删除~</p></div><h2 id="破解软件"><a href="#破解软件" class="headerlink" title="破解软件"></a>破解软件</h2><div class="btns rounded grid5">            <a class="button no-text-decoration" href="https://docs.qq.com/sheet/DSW9td0RsV3JsbHBH?tab=cnyyov" title="各种破解软件下载地址"><img src="/undefined/83a7/fas fa-download">各种破解软件下载地址</a>          </div><h2 id="机械设计"><a href="#机械设计" class="headerlink" title="机械设计"></a>机械设计</h2><div class="btns rounded grid5">            <a class="button no-text-decoration" href="https://pan.baidu.com/s/1Qi5OTHAwewEhOEIR8s6juQ" title="结构设计规范 - 提取码 65F9"><img src="/undefined/83a7/fas fa-book">结构设计规范 - 提取码 65F9</a><a class="button no-text-decoration" href="https://pan.baidu.com/s/1uhkC-WKOC11iJOxxiEsjbw" title="设计资料 - 提取码 k42y"><img src="/undefined/83a7/fas fa-book">设计资料 - 提取码 k42y</a>          </div><div class="site-card-group"><a class="site-card" href="https://www.mechtool.cn/infoanddata/infoanddata_frictionfactor.html" data-title="Mechtool机械工具网址"><div class="wrapper cover"><img class="cover fadeIn" src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/20230627223308.png"></div><div class="info"><img class="flink-avatar" src="https://bu.dusays.com/2022/05/02/626f92e193879.jpg"><span class="site-title">Mechtool</span></div></a></div><h2 id="HarmonyOS4-0"><a href="#HarmonyOS4-0" class="headerlink" title="HarmonyOS4.0"></a>HarmonyOS4.0</h2><div class="btns rounded grid5">            <a class="button no-text-decoration" href="https://www.bilibili.com/video/BV1Sa4y1Z7B1/?p=17&spm_id_from=333.880.my_history.page.click&vd_source=fb774b605cc203b8076a48607765935c" title="黑马HarmonyOS4.0"><img src="/undefined/83a7/fas fa-video">黑马HarmonyOS4.0</a>          </div><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="视频地址"><a href="#视频地址" class="headerlink" title="视频地址"></a>视频地址</h3><div class="btns rounded grid5">            <a class="button no-text-decoration" href="https://www.bilibili.com/video/BV1fh411y7R8/?spm_id_from=333.999.0.0.0" title="JavaSe - 韩顺平2021"><img src="/undefined/83a7/fas fa-video">JavaSe - 韩顺平2021</a><a class="button no-text-decoration" href="https://www.bilibili.com/video/BV1AS4y177xJ/?p=84&spm_id_from=333.880.my_history.page.click&vd_source=fb774b605cc203b8076a48607765935c" title="JavaWEB - 尚硅谷"><img src="/undefined/83a7/fas fa-video">JavaWEB - 尚硅谷</a><a class="button no-text-decoration" href="https://www.bilibili.com/video/BV1VP4y1c7j7/?p=34&spm_id_from=pageDriver&vd_source=fb774b605cc203b8076a48607765935c" title="MyBatis - 尚硅谷"><img src="/undefined/83a7/fas fa-video">MyBatis - 尚硅谷</a><a class="button no-text-decoration" href="https://www.bilibili.com/video/BV1kR4y1b7Qc/?p=29&spm_id_from=333.880.my_history.page.click&vd_source=fb774b605cc203b8076a48607765935c" title="Spring6- 尚硅谷"><img src="/undefined/83a7/fas fa-video">Spring6- 尚硅谷</a><a class="button no-text-decoration" href="https://www.bilibili.com/video/BV1Ry4y1574R/?p=12&spm_id_from=333.880.my_history.page.click&vd_source=fb774b605cc203b8076a48607765935c" title="SpringMVC- 尚硅谷"><img src="/undefined/83a7/fas fa-video">SpringMVC- 尚硅谷</a><a class="button no-text-decoration" href="https://www.bilibili.com/video/BV1AP411s7D7?p=152&vd_source=fb774b605cc203b8076a48607765935c" title="SSM-springboot3-mybatisplus- 尚硅谷"><img src="/undefined/83a7/fas fa-video">SSM-springboot3-mybatisplus- 尚硅谷</a>          </div><h3 id="资料地址"><a href="#资料地址" class="headerlink" title="资料地址"></a>资料地址</h3><div class="site-card-group"><a class="site-card" href="https://www.wolai.com/nnRjHcUSv2mrRbFKZUpBMS" data-title="代码重工"><div class="wrapper cover"><img class="cover fadeIn" src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/20230426213830.png"></div><div class="info"><img class="flink-avatar" src="https://bu.dusays.com/2022/05/02/626f92e193879.jpg"><span class="site-title">兵器</span></div></a></div><h2 id="WorkBench"><a href="#WorkBench" class="headerlink" title="WorkBench"></a>WorkBench</h2><h3 id="视频地址-1"><a href="#视频地址-1" class="headerlink" title="视频地址"></a>视频地址</h3><div class="btns rounded grid5">            <a class="button no-text-decoration" href="https://www.bilibili.com/video/BV1S64y1k7NG/?p=12&spm_id_from=pageDriver&vd_source=fb774b605cc203b8076a48607765935c" title="初级系列教程 - 水哥"><img src="/undefined/83a7/fas fa-video">初级系列教程 - 水哥</a><a class="button no-text-decoration" href="https://www.bilibili.com/video/BV1MJ411R7DN/?p=2&spm_id_from=333.880.my_history.page.click&vd_source=fb774b605cc203b8076a48607765935c" title="有限元分析理论 - 张晔"><img src="/undefined/83a7/fas fa-video">有限元分析理论 - 张晔</a><a class="button no-text-decoration" href="https://www.bilibili.com/video/BV1u4411B7Fo/?p=3&spm_id_from=333.880.my_history.page.click&vd_source=fb774b605cc203b8076a48607765935c" title="有限元分析应用基础教程 - 张晔"><img src="/undefined/83a7/fas fa-video">有限元分析应用基础教程 - 张晔</a><a class="button no-text-decoration" href="https://www.bilibili.com/video/BV1LN4y1j7Y5/?p=11&spm_id_from=333.880.my_history.page.click&vd_source=fb774b605cc203b8076a48607765935c" title="有限元分析高级教程 - 张晔"><img src="/undefined/83a7/fas fa-video">有限元分析高级教程 - 张晔</a>          </div><h3 id="资料地址-1"><a href="#资料地址-1" class="headerlink" title="资料地址"></a>资料地址</h3><div class="site-card-group"><a class="site-card" href="https://fscae.com/" data-title="ansys结构院"><div class="wrapper cover"><img class="cover fadeIn" src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/20230426214221.png"></div><div class="info"><img class="flink-avatar" src="https://bu.dusays.com/2022/05/02/626f92e193879.jpg"><span class="site-title">ansys</span></div></a></div><h2 id="Solidworks-Simulation"><a href="#Solidworks-Simulation" class="headerlink" title="Solidworks Simulation"></a>Solidworks Simulation</h2><div class="btns rounded grid5">            <a class="button no-text-decoration" href="https://www.bilibili.com/video/BV125411V7jj/?p=23&spm_id_from=333.880.my_history.page.click&vd_source=fb774b605cc203b8076a48607765935c" title="有限元分析应用-张晔"><img src="/undefined/83a7/fas fa-video">有限元分析应用-张晔</a>          </div><h2 id="Creo"><a href="#Creo" class="headerlink" title="Creo"></a>Creo</h2><h2 id="浩辰3D"><a href="#浩辰3D" class="headerlink" title="浩辰3D"></a>浩辰3D</h2><div class="btns rounded grid5">            <a class="button no-text-decoration" href="https://www.bilibili.com/video/BV14Q4y1m7m1/?p=23&spm_id_from=333.880.my_history.page.click&vd_source=fb774b605cc203b8076a48607765935c" title="初级系列教程"><img src="/undefined/83a7/fas fa-video">初级系列教程</a>          </div>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AnsysWorkbench - 线性静态分析</title>
      <link href="/undefined/fc9c.html"/>
      <url>/undefined/fc9c.html</url>
      
        <content type="html"><![CDATA[<h2 id="分析操作流程"><a href="#分析操作流程" class="headerlink" title="分析操作流程"></a>分析操作流程</h2><p><img src="/undefined/fc9c/分析操作流程.png" alt="分析操作流程"></p><h2 id="线性静态分析所涉及到的材料参数"><a href="#线性静态分析所涉及到的材料参数" class="headerlink" title="线性静态分析所涉及到的材料参数"></a>线性静态分析所涉及到的材料参数</h2><ul><li><strong>必要参数</strong>：弹性模量、泊松比</li><li><strong>可能需要的参数</strong>：密度（惯性力）、线膨胀系数（热边界条件）</li><li>一个特殊的材料参数：屈服强度</li><li>三个材料参数对线性材料计算结果的影响：<ul><li>弹性模量：应力结果不变，变形结果不变</li><li>屈服强度：应力结果变形结果均不变</li><li>泊松比：应力结果变，变形结果变，但是变化范围很小</li></ul></li></ul><h2 id="静态问题"><a href="#静态问题" class="headerlink" title="静态问题"></a>静态问题</h2><ul><li>在有限元分析中，要确保静态分析，除了载荷静态外，<strong>整个结构所有的部件都必须保证静态，不可能发生的运动趋势</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有限元分析 </tag>
            
            <tag> AnsysWorkbench </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 材料力学</title>
      <link href="/undefined/c8e3.html"/>
      <url>/undefined/c8e3.html</url>
      
        <content type="html"><![CDATA[<h2 id="刚度"><a href="#刚度" class="headerlink" title="刚度"></a>刚度</h2><ul><li><strong>抵抗弹性变形的能力</strong></li></ul><h2 id="强度"><a href="#强度" class="headerlink" title="强度"></a>强度</h2><ul><li>在荷载作用下，构件应不至千破坏（断裂或失效），即应具有足够的强度，即<strong>抵抗塑性变形的能力</strong></li></ul><h2 id="可变行固体的三大假设"><a href="#可变行固体的三大假设" class="headerlink" title="可变行固体的三大假设"></a>可变行固体的三大假设</h2><h3 id="连续性假设"><a href="#连续性假设" class="headerlink" title="连续性假设"></a>连续性假设</h3><ul><li>认为物体在其整个体积内连续地充满了物质而毫无空隙</li></ul><h3 id="均匀性假设"><a href="#均匀性假设" class="headerlink" title="均匀性假设"></a>均匀性假设</h3><ul><li>认为从物体内任意一点处取出的体积单元，其力学性能都能代表整个物体的力学性能</li></ul><h3 id="各项同性假设"><a href="#各项同性假设" class="headerlink" title="各项同性假设"></a>各项同性假设</h3><ul><li>认为材料沿各个方向的力学性能是相同的</li></ul><h2 id="杆件的变形形式"><a href="#杆件的变形形式" class="headerlink" title="杆件的变形形式"></a>杆件的变形形式</h2><p><img src="/undefined/c8e3/杆件的变形形式.png" alt="杆件的变形形式"></p><h2 id="内力"><a href="#内力" class="headerlink" title="内力"></a>内力</h2><ul><li>由外力作用而引起的质点间相互作用力的改变量</li></ul><h2 id="轴力"><a href="#轴力" class="headerlink" title="轴力"></a>轴力</h2><ul><li><p>垂直于横截面并通过其形心</p><p><img src="/undefined/c8e3/轴力Fn.png" alt="轴力Fn"></p></li></ul><h2 id="轴力图"><a href="#轴力图" class="headerlink" title="轴力图"></a>轴力图</h2><ul><li>可用平行于杆轴线的坐标表示横截面的位置，用垂直于杆轴线的坐标表示横截面上轴力的数值，从而绘出表示轴力与截面位置关系的图线，称为轴力图</li></ul><p><img src="/undefined/c8e3/轴力图.png" alt="轴力图"></p><h2 id="应力"><a href="#应力" class="headerlink" title="应力"></a>应力</h2><ul><li>杆件截面上内力的分布集度</li><li>法向分址o称为正应力，切向分点T 称为切应力（也可称为剪应力）</li></ul><h3 id="应力集中"><a href="#应力集中" class="headerlink" title="应力集中"></a>应力集中</h3><ul><li>指受力构件由于外界因素或自身几何形状、外形尺寸发生突变而引起的局部范围内应力显著增大的现象</li><li>多出现于尖叫、空洞、缺口、沟槽以及又刚性约束处及其邻域</li></ul><h2 id="圣维南原理"><a href="#圣维南原理" class="headerlink" title="圣维南原理"></a>圣维南原理</h2><ul><li><p><strong>内容</strong>：分布于<a href="https://baike.baidu.com/item/弹性体?fromModule=lemma_inlink">弹性体</a>上一小块面积（或体积）内的荷载所引起的物体中的<a href="https://baike.baidu.com/item/应力?fromModule=lemma_inlink">应力</a>，在离荷载作用区稍远的地方，基本上只同荷载的<a href="https://baike.baidu.com/item/合力?fromModule=lemma_inlink">合力</a>和合<a href="https://baike.baidu.com/item/力矩?fromModule=lemma_inlink">力矩</a>有关；荷载的具体分布只影响荷载作用区附近的应力分布</p><p><img src="/undefined/c8e3/第一种说法.jpg" alt="只在虚线区域内受影响，其余部分不受影响"></p></li><li><p><strong>还有一种等价的提法</strong>：如果作用在<a href="https://baike.baidu.com/item/弹性体?fromModule=lemma_inlink">弹性体</a>某一小块面积（或体积）上的荷载的<a href="https://baike.baidu.com/item/合力?fromModule=lemma_inlink">合力</a>和合<a href="https://baike.baidu.com/item/力矩?fromModule=lemma_inlink">力矩</a>都等于零，则在远离荷载作用区的地方，应力就小得几乎等于零</p></li></ul><p><img src="/undefined/c8e3/第二种说法.jpg" alt="只在虚线区域内受影响，其余部分不受影响"></p><ul><li><strong>作用</strong>：处理复杂的力学边界条件</li></ul><blockquote><p>1、圣维南原理是反应局部效应的原理</p><p>2、圣维南原理应用的两个前提条件：</p><p>​    （1）简化前后的合力矩和合力基本保持不变</p><p>​    （2）距离满足条件</p><p>3、圣维南原理仅仅证明载荷分步对应力的影响</p><p>4、圣维南原理里的“载荷”并不仅仅指施加的外力，包括接触力、约束反力等</p></blockquote><h2 id="泊松比"><a href="#泊松比" class="headerlink" title="泊松比"></a>泊松比</h2><ul><li>是指材料在单向受拉或受压时，横向正应变与轴向正应变的绝对值的比值，也叫<strong>横向变形系数</strong></li><li>它是反映材料横向变形的弹性常数</li><li>一般的金属材质的泊松比基本在0.23~0.33之间</li><li>G=E/2(1+V)</li></ul><p><img src="/undefined/c8e3/材料参数.png" alt="材料参数"></p><h2 id="自由度"><a href="#自由度" class="headerlink" title="自由度"></a>自由度</h2><ul><li><p>Degree of freedom, DOF</p></li><li><p>用于描述物理场的响应特性</p></li><li>单一物理场对应的自由度</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">物理场</th><th style="text-align:center">自由度</th></tr></thead><tbody><tr><td style="text-align:center">结构</td><td style="text-align:center">位移、转动</td></tr><tr><td style="text-align:center">热</td><td style="text-align:center">温度</td></tr><tr><td style="text-align:center">电</td><td style="text-align:center">电位</td></tr><tr><td style="text-align:center">流体</td><td style="text-align:center">压力</td></tr><tr><td style="text-align:center">磁场</td><td style="text-align:center">磁位</td></tr></tbody></table></div><ul><li><strong>磁位</strong>：是把单位强度的磁极从参考点(通常是无穷远)移至所考虑的一点时为反抗磁场而必须做的功</li></ul><h2 id="四大强度理论"><a href="#四大强度理论" class="headerlink" title="四大强度理论"></a>四大强度理论</h2><h3 id="第一强度理论：最大拉应力准则"><a href="#第一强度理论：最大拉应力准则" class="headerlink" title="第一强度理论：最大拉应力准则"></a>第一强度理论：最大拉应力准则</h3><ul><li>基本观点：材料中的最大拉应力到达材料的正断拉力时，即产生脆性断裂</li><li>适用范围：铸铁，工具钢，工业陶瓷等多数脆性材料</li></ul><h3 id="第三强度理论：最大剪应力准则"><a href="#第三强度理论：最大剪应力准则" class="headerlink" title="第三强度理论：最大剪应力准则"></a>第三强度理论：最大剪应力准则</h3><ul><li>基本观点：材料中的最大剪应力到达该材料的剪切抗力时，即产生塑性屈服</li><li>适用范围：低碳钢、铜、软铝等塑性较好材料</li></ul><h3 id="第四强度理论：形状改变比能准则"><a href="#第四强度理论：形状改变比能准则" class="headerlink" title="第四强度理论：形状改变比能准则"></a>第四强度理论：形状改变比能准则</h3><ul><li>基本观点：材料中形状改变比能达到改材料的临界值时，即产生塑性屈服</li><li>适用范围：它既突出了最大应力对塑性屈服的作用，又考虑了其它两个主应力的影响，它与塑性较好的材料试验结果比第三强度理论符合更好</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 材料力学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题集合（编程报错）</title>
      <link href="/undefined/a604.html"/>
      <url>/undefined/a604.html</url>
      
        <content type="html"><![CDATA[<h2 id="更换高版本数据库"><a href="#更换高版本数据库" class="headerlink" title="更换高版本数据库"></a>更换高版本数据库</h2><details class="folding-tag" yellow><summary> 报错内容 </summary>              <div class="content">              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLException: Unknown initial character set index <span class="string">&#x27;255&#x27;</span> received from server. Initial client character set can be forced via the <span class="string">&#x27;characterEncoding&#x27;</span> property.</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 解决方案 </summary>              <div class="content">              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/bookdb?rewriteBatchedStatements=true</span></span><br><span class="line"></span><br><span class="line">替换为</span><br><span class="line">    </span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/bookdb?characterEncoding=latin1&amp;autoReconnect=true&amp;useSSL=false&amp;useTimezone=true&amp;serverTimezone=UTC</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="Thymeleaf中each遍历"><a href="#Thymeleaf中each遍历" class="headerlink" title="Thymeleaf中each遍历"></a>Thymeleaf中each遍历</h2><details class="folding-tag" yellow><summary> 报错内容 </summary>              <div class="content">              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.thymeleaf.exceptions.TemplateProcessingException: Could not parse as expression: <span class="string">&quot;&quot;</span> (template: <span class="string">&quot;employeeList&quot;</span> - line <span class="number">27</span>, col <span class="number">20</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 解决方案 </summary>              <div class="content">              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;</span><br><span class="line">    &lt;a th:href=<span class="string">&quot;&quot;</span>&gt;update&lt;/a&gt;</span><br><span class="line">    &lt;a th:href=<span class="string">&quot;&quot;</span>&gt;delete&lt;/a&gt;</span><br><span class="line"> &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">     替换为</span><br><span class="line">        </span><br><span class="line"> &lt;td&gt;</span><br><span class="line">      &lt;a href=<span class="string">&quot;&quot;</span>&gt;update&lt;/a&gt;</span><br><span class="line">      &lt;a href=<span class="string">&quot;&quot;</span>&gt;delete&lt;/a&gt;</span><br><span class="line"> &lt;/td&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="ClassNotFoundException：ContextLoadListener"><a href="#ClassNotFoundException：ContextLoadListener" class="headerlink" title="ClassNotFoundException：ContextLoadListener"></a>ClassNotFoundException：ContextLoadListener</h2><details class="folding-tag" yellow><summary> 报错内容 </summary>              <div class="content">              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassNotFoundException:org.springframework.web.context.ContextLoaderListener</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 解决方案 </summary>              <div class="content">              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在IDEA中点击FILE&gt;Project Structure&gt;Atrifatcs&gt;在右侧Output Laayout右击项目名 选择Put into Output Root &gt; 重启Tomcat</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="springboot测试"><a href="#springboot测试" class="headerlink" title="springboot测试"></a>springboot测试</h2><details class="folding-tag" yellow><summary> 报错内容 </summary>              <div class="content">              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Unable to find a <span class="meta">@SpringBootConfiguration</span>, you need to use <span class="meta">@ContextConfiguration</span> or <span class="meta">@SpringBootTest(classes=...)</span> with your test</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 解决方案 </summary>              <div class="content">              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">检查test目录名是否一致</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 材料（弹簧）</title>
      <link href="/undefined/cf47.html"/>
      <url>/undefined/cf47.html</url>
      
        <content type="html"><![CDATA[<h2 id="圆柱压缩弹簧设计"><a href="#圆柱压缩弹簧设计" class="headerlink" title="圆柱压缩弹簧设计"></a>圆柱压缩弹簧设计</h2><details class="folding-tag" blue><summary> 圆柱压缩弹簧设计步骤 </summary>              <div class="content">              <details class="folding-tag" red><summary> 1、选材料 </summary>              <div class="content">              <ul><li>根据用途、工作条件进行选定<code>[τ]</code></li></ul><p><img src="/undefined/cf47/图1.png" alt></p><p><img src="/undefined/cf47/图2.png" alt></p>              </div>            </details><details class="folding-tag" green><summary> 2、定弹簧中径 </summary>              <div class="content">              <ul><li>根据结构进行定义中经D</li></ul>              </div>            </details><details class="folding-tag" green><summary> 3、由强度条件定旋绕比 </summary>              <div class="content">              <p><img src="/undefined/cf47/强度条件.png" alt="强度条件公式"></p>              </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 材料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 材料（注塑材料）</title>
      <link href="/undefined/abd8.html"/>
      <url>/undefined/abd8.html</url>
      
        <content type="html"><![CDATA[<h2 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">介绍</button><button type="button" class="tab " data-href="test4-2">特性</button><button type="button" class="tab " data-href="test4-3">注塑成型工艺条件</button><button type="button" class="tab " data-href="test4-4">参数</button><button type="button" class="tab " data-href="test4-5">填充剂</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li><p>聚甲醛(POM)，又名缩醛树脂、聚氧化亚甲基，聚缩醛，是热塑性结晶性高分子聚合物，被誉为“超钢”或者“赛钢”</p></li><li><p>均聚甲醛：Delrin</p><ul><li><p>美国杜邦公司</p></li><li><p>均聚物材料具有很好的延展强度、抗疲劳强度，但不易加工</p></li></ul></li><li><p>共聚甲醛：Celcon</p><ul><li><p>美国塞拉尼斯公司</p></li><li><p>共聚物材料具有很好的热稳定、化学稳定性且易于加工</p></li></ul></li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p><strong>基本性能：</strong></p><ul><li>是一种<strong>半透明白色</strong>物料</li><li>耐疲劳强度高</li><li>耐磨性好</li><li>吸水率低</li><li>表面硬度大，刚性好</li><li>尺寸稳定性好，产品的尺寸精度高</li><li>滑动性好</li></ul></li><li><p><strong>热性能：</strong></p><ul><li>具有较高的热变形温度</li></ul></li><li><p><strong>电性能：</strong></p><ul><li>电绝缘性较好</li></ul></li><li><p><strong>防火性能：</strong></p><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p><code>UL94V-0</code>：<code>UL94</code>标准中最高的阻燃等级，<code>V-0</code>：对样品进行两次10秒的燃烧测试后，火焰在10秒内熄灭，不能有燃烧物掉下</p></div><ul><li>其氧指数(LOI)为 15%，较易燃烧，因此难于达到 UL94V-0 的阻燃等级</li></ul></li><li><p><strong>耐候性：</strong></p><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p><strong>耐候性</strong>是指塑料制品因受到阳光照射，温度变化，风吹雨淋等外界条件的影响，而出现的褪色，变色，龟裂，粉化和强度下降等一系列老化的现象。其中紫外线照射是促使<a href="https://baike.baidu.com/item/塑料老化/3797086?fromModule=lemma_inlink">塑料老化</a>的关键因素</p></div><ul><li>共聚甲醛的耐候性能优于均聚甲醛</li><li>抗热老化性能优良</li></ul></li><li><p><strong>耐水解性：</strong></p><ul><li>优良的耐水解性能，可在 80℃热水中长期使用</li></ul></li></ul></div><div class="tab-item-content" id="test4-3"><ol><li><strong>干燥：</strong>树脂本身的吸湿性很小，因此并不一定需要干燥，但成型时如含水量大于0.1%,则需进行干燥，也有利于避免出现模垢现象，但对于一些填充品级，如碳纤维填充，导电品级，则必须进行干燥，<strong>干燥条件为 80-90℃，3~4 小时</strong></li><li><strong>回收利用：</strong>可以使用再生材料。回收料即使 100%使用 10 次，其物性都基本上不会发生变化，但颜色会有所变化，<strong>原则上是 25-30%的回收料与 75-70%的新料混合使用</strong></li><li><strong>热稳定性：</strong>在 210℃的温度下停留 60 分钟后再进行成型，成型出来的制品的拉伸强度几乎没有什么变化。具有良好的热稳定性</li><li><strong>注射机台：</strong>用普通注射成型，<strong>合模力&gt;成型品的投影面积 x40-60MPa</strong></li><li><strong>料筒容量：</strong>产品重量一般为料筒容量的 <strong>40-80%</strong></li><li><strong>喷嘴与闭锁系统：</strong>可用开放式喷嘴，但为了防止流涎，最好选用<strong>闭锁式喷嘴</strong></li><li><strong>螺杆：</strong>用标准型螺杆即可，压缩比 2.8-3.0:1，长径比：18-22:1</li><li><strong>料筒温度：</strong>树脂的熔点约 165℃，<strong>实际成型时的最佳温度是 190-210℃</strong>，最好是200-210℃</li><li><strong>模具温度</strong>： <strong>标准模具温度是 60-80℃</strong>，根据成型品的特性，表面状态、使用中尺寸的变化、成型周期等要求不同，需要调节模具温度。<wavy>有时为降低成型周期，将模具温度设定在 30-40℃，但容易留下残留应变及得不到好的外观</wavy></li><li><strong>注射压力：</strong>应考虑树脂的流动性，收缩性，成型品的物性等进行设定。一般为 <strong>98MPa以上</strong>。<strong>保压压力为 49-98MPa</strong></li><li><strong>注射速度：</strong> <strong>一般在 5-50mm/s</strong>，但应考虑成型品的形状、壁厚、质量要求、流道粗细、浇口尺寸等因素进行设定</li><li><strong>背压：</strong>为了计量稳定化及防止发生注嘴的滴料现象，建议背压设定为 <strong>0.5-1.0MPa</strong></li><li><strong>螺杆转速：</strong>一般以 100-150rpm 为宜</li><li><strong>成型收缩率：</strong>成型收缩率较大，可高达 2-3.5%</li><li><strong>二次加工：</strong>可进行雕刻，攻丝，压入，金属嵌件，切削等二次加工</li></ol></div><div class="tab-item-content" id="test4-4"><p><img src="/undefined/abd8/POM参数参考.png" alt="POM参数参考"></p><p><img src="/undefined/abd8/POM制造商及品牌.png" width="400px" alt="POM制造商及品牌"></p></div><div class="tab-item-content" id="test4-5"><ul><li>PTFE（聚四氟乙烯）：可在原材料基础上提高耐磨性（特氟龙是一个特定品牌名字，由杜邦公司生产和销售）</li><li>GF（玻璃纤维）：增加材料强度、耐温</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="PA66"><a href="#PA66" class="headerlink" title="PA66"></a>PA66</h2><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p><code>PA</code>：尼龙，化学名：聚酰胺；<code>66</code>：尼龙66分子式：—[NH(CH2)6NHCO(CH2)4CO]n—第一个6表示二元胺的碳原子数,第二个6表示二元酸的碳原子数</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">介绍</button><button type="button" class="tab " data-href="test4-2">特性</button><button type="button" class="tab " data-href="test4-3">注塑参数</button><button type="button" class="tab " data-href="test4-4">PA66 GF30材料特性</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>聚己二酰己二胺，俗称尼龙-66，是一种热塑性树脂</li><li>本色为<strong>半透明乳白色</strong></li><li>为提高PA66机械性能，常加入各种改性剂，如玻璃纤维</li><li><wavy>鉴别：用PA66与盐酸在110℃加热4小时，有少量的白色已二酸结晶沉淀析出，PA6没有 ；燃烧法：蓝色火焰</wavy></li></ul><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>如PA66 GF30，PA66 GF35；<code>GF</code>表示玻璃纤维，<code>30</code>表示玻璃纤维含量，玻纤含量越高，材料硬度越高，塑性越低，缩水率越小</p></div></div><div class="tab-item-content" id="test4-2"><ul><li><strong>吸湿性：</strong><ul><li>PA66塑料在成型后仍然具有吸湿性，其程度主要取决于材料的组成、壁厚以及环境条件</li></ul></li><li><strong>收缩率：</strong><ul><li>PA66的收缩率在1%~2%之间，加入玻璃纤维添加剂可以将收缩率降低到0.2%~1%</li></ul></li><li><strong>粘度：</strong><ul><li>对温度变化很敏感，粘性较低，流动性好</li></ul></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><strong>干燥：</strong> <strong>85℃</strong>的热空气中干燥处理。如果湿度大于0.2%，还需要进行105℃，12小时的真空干燥</li><li><strong>熔化温度</strong>  ：<strong>260~290℃</strong>。对玻璃添加剂的产品为275~280℃。熔化温度应避免高于300℃</li><li><strong>模具温度</strong>： <strong>建议80℃</strong>。模具温度将影响结晶度，而结晶度将影响产品的物理特性。对于薄壁塑件，如果使用低于40C的模具温度，则塑件的结晶度将随着时间而变化，为了保持塑件的几何稳定性，需要进行退火处理</li><li><strong>注射压力</strong>：<strong>通常在750~1250bar</strong>，取决于材料和产品设计</li><li><strong>注射速度</strong>：<strong>高速</strong>（对于增强型材料应稍低一些）</li></ul></div><div class="tab-item-content" id="test4-4"><ul><li><p>密度：1.3-1.4g/cm³</p></li><li><p>颜色：普通为<strong>黑色</strong></p></li><li><p>高强度</p></li><li><strong>短期耐温可以达到250度，长期耐温150-160度</strong></li><li>耐水解</li><li>耐磨</li><li>抗拉伸</li><li>收缩率：0.4~0.7%</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="PBT"><a href="#PBT" class="headerlink" title="PBT"></a>PBT</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">介绍</button><button type="button" class="tab " data-href="test4-2">特性</button><button type="button" class="tab " data-href="test4-3">PBT GF30材料特性</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>聚对苯二甲酸丁二酯（PBT）</li><li>乳白色半透明到不透明、半结晶型热塑性聚酯</li></ul><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>如PA66 GF30，PA66 GF35；<code>GF</code>表示玻璃纤维，<code>30</code>表示玻璃纤维含量，玻纤含量越高，材料硬度越高，塑性越低，缩水率越小</p></div></div><div class="tab-item-content" id="test4-2"><ul><li><p>密度：是1.30~1.31 g/cm³</p></li><li><p>高耐热性</p></li><li>不耐强酸、强碱，能耐有机溶剂，</li><li>可燃，高温下分解</li><li>高韧性</li><li>耐疲劳性</li><li>自润滑</li><li>低摩擦系数</li><li>耐候性</li><li>吸水率低，仅为0.1%</li><li>熔点为224℃</li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><strong>PBT+30%GF长期使用温度就是130-140度</strong></li></ul><details class="folding-tag" cyan open><summary> 工艺条件 </summary>              <div class="content">              <ul><li><strong>干燥处理</strong>：这种材料在高温下很容易水解，因此加工前的干燥处理是很重要的。在空气中的干燥条件为120℃，6~8小时，或者150℃，2~4小时。湿度必须小于0.03%。如果用吸湿干燥器干燥，建议条件为150℃，2.5小时</li><li><strong>熔化温度</strong>：225~275℃，建议温度：250℃</li><li><strong>模具温度</strong>：对于未增强型的材料为40~60℃。要很好地设计模具的冷却腔道以减小塑件的弯曲。热量的散失一定要快而均匀。建议模具冷却腔道的直径为12mm</li><li><strong>注射压力</strong>：中等（最大到1500bar）</li><li><strong>注射速度</strong>：应使用尽可能快的注射速度（因为PBT的凝固很快）</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="PA6"><a href="#PA6" class="headerlink" title="PA6"></a>PA6</h2><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>尼龙6分子式—[NH—（CH2）5—CO]n— 单体含有6个碳,6用来区别别的聚合物</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">介绍</button><button type="button" class="tab " data-href="test4-2">材料特性</button><button type="button" class="tab " data-href="test4-3">注塑成型工艺条件</button><button type="button" class="tab " data-href="test4-4">填充剂</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li><strong>微黄半透明材料</strong></li><li><wavy>鉴别：用PA6与盐酸在110℃加热4小时，没有少量白色己二酸结晶沉淀析出 ，燃烧法：蓝底黄火焰，烧植物味</wavy></li></ul></div><div class="tab-item-content" id="test4-2"><ul><li>熔点：215~225℃</li><li><p>密度：1.13g/cm³</p></li><li><p>热塑性好</p></li><li>轻质</li><li>耐化学品好</li><li><p>耐久性好</p></li><li><p><strong>机械强度较高，但低于PA66</strong></p></li><li><strong>抗冲击和柔性高于PA66</strong></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><strong>干燥</strong>：由于PA6很容易吸收水分，因此加工前的干燥特别要注意。如果材料是用防水材料包装供应的，则容器应保持密闭。如果湿度大于0.2%，建议在80C以上的热空气中干燥16小时。如果材料已经在空气中暴露超过8小时，建议进行105℃，8小时以上的真空烘干</li><li><strong>熔化温度</strong>：230~280℃，对于增强品种为250~280℃</li><li><strong>模具温度</strong>：80~90℃。模具温度很显著地影响结晶度，而结晶度又影响着塑件的机械特性。对于结构部件来说结晶度很重要，因此建议模具温度为80~90℃。对于薄壁的，流程较长的塑件也建议施用较高的模具温度。<wavy>增大模具温度可以提高塑件的强度和刚度，但却降低了韧性</wavy>。如果壁厚大于3mm，建议使用20~40C的低温模具。<wavy>对于玻璃增强材料模具温度应大于80℃</wavy></li><li><strong>注射压力</strong>：一般在750~1250bar之间（取决于材料和产品设计）</li><li><strong>注射速度</strong>：高速（对增强型材料要稍微降低）</li></ul></div><div class="tab-item-content" id="test4-4"><ul><li>MD30（矿纤维含量30%）：降低材料翘曲</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="PET"><a href="#PET" class="headerlink" title="PET"></a>PET</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">介绍</button><button type="button" class="tab " data-href="test4-2">材料特性</button><button type="button" class="tab " data-href="test4-3">注塑成型工艺条件</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>聚对苯二甲酸乙二酯</li><li>由美国杜邦公司在1953年最早实现工业生产</li><li>PET塑料为无色具有一定光泽的透明物质（<a href="https://www.zhihu.com/search?q=无定形&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra={&quot;sourceType&quot;%3A&quot;answer&quot;%2C&quot;sourceId&quot;%3A2817838944}">无定形</a>），或不透明乳白色物质（结晶性）</li><li>密度分别为1.30～1.33g/cm3、1.33～1.38g/cm3</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li>强度高</li><li>耐腐蚀性</li><li>耐磨性好</li><li>收缩率低：1%</li><li><a href="https://www.zhihu.com/question/574871272">(2 封私信 / 80 条消息) pet 塑料的特点有哪些？ - 知乎 (zhihu.com)</a></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="EPTFE"><a href="#EPTFE" class="headerlink" title="EPTFE"></a>EPTFE</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">介绍</button><button type="button" class="tab " data-href="test4-2">材料特性</button><button type="button" class="tab " data-href="test4-3">注塑成型工艺条件</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>膨体聚四氟乙烯</li><li></li></ul></div><div class="tab-item-content" id="test4-2"><ul><li></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 材料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 材料（磁性材料）</title>
      <link href="/undefined/8169.html"/>
      <url>/undefined/8169.html</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p><strong>永磁体磁性材料</strong> </p></div><h2 id="性能参数"><a href="#性能参数" class="headerlink" title="性能参数"></a>性能参数</h2><details class="folding-tag" cyan open><summary> 性能参数 </summary>              <div class="content">              <div class="checkbox"><input type="radio">            <p><strong>饱和磁感应强度Bs</strong>：单位特斯拉（T），其大小取决于材料的成分，它所对应的物理状态是材料内部的磁化矢量整齐排列</p>            </div><div class="checkbox"><input type="radio">            <p><strong>剩余磁感应强度Br</strong>：是磁滞回线上的特征参数，H回到0时的B值</p>            </div><div class="checkbox"><input type="radio">            <p><strong>矩形比</strong>：Br/Bs</p>            </div><div class="checkbox"><input type="radio">            <p><strong>矫顽力Hc</strong>：：是表示材料磁化难易程度的量，取决于材料的成分及缺陷（杂质、应力等）</p>            </div><div class="checkbox"><input type="radio">            <p><strong>磁导率μ</strong>：是磁滞回线上任何点所对应的B与H的比值，与器件工作状态密切相关</p>            </div><div class="checkbox"><input type="radio">            <p><strong><a href="https://baike.baidu.com/item/居里温度?fromModule=lemma_inlink">居里温度</a>Tc</strong>：：铁磁物质的磁化强度随温度升高而下降，达到某一温度时，自发磁化消失，转变为<a href="https://baike.baidu.com/item/顺磁性?fromModule=lemma_inlink">顺磁性</a>，该临界温度为居里温度。它确定了磁性器件工作的上限温度</p>            </div>              </div>            </details><h2 id="充磁方式"><a href="#充磁方式" class="headerlink" title="充磁方式"></a>充磁方式</h2><h3 id="不饱和充磁"><a href="#不饱和充磁" class="headerlink" title="不饱和充磁"></a>不饱和充磁</h3><ul><li><p>在给磁性材料磁化时，充磁能量达不到饱和充磁的95%以上，此方式充磁是可逆的，随着时间和外磁场力的共同作用下，磁石的剩磁会逐步下降</p></li><li><p>此充磁方式只在特殊工作场合使用，一般不会使用这种充磁方式</p></li></ul><h3 id="饱和充磁"><a href="#饱和充磁" class="headerlink" title="饱和充磁"></a>饱和充磁</h3><ul><li><p>在给磁性材料磁化时，充磁能量达到磁性材料、磁化特性拐点所需的能量，一般为磁性材料内禀矫顽力的1.5倍-2倍，最小一般取2倍</p></li><li><p>此充磁方式可以使磁石达到饱和充磁，一般情况下不会发生退磁现象</p></li></ul><h3 id="过饱和充磁"><a href="#过饱和充磁" class="headerlink" title="过饱和充磁"></a>过饱和充磁</h3><ul><li><p>在给磁性材料磁化时，充磁能量超过磁性材料磁化特性拐点所需的能量，一般为磁性材料内禀矫顽力的3倍，因为磁性材料特性，磁石的表面磁场在达到饱和后，外界磁场的强度只会对磁性材料有微量变化</p></li><li><p>一般对磁能要求较高的环境中，一般都采用这种充磁方式</p></li></ul><h2 id="充磁方向"><a href="#充磁方向" class="headerlink" title="充磁方向"></a>充磁方向</h2><h3 id="径向充磁和轴向充磁"><a href="#径向充磁和轴向充磁" class="headerlink" title="径向充磁和轴向充磁"></a>径向充磁和轴向充磁</h3><p><img src="/undefined/8169/径向充磁和轴向充磁.jpg" alt="径向充磁和轴向充磁"></p><h3 id="厚度充磁和侧面充磁"><a href="#厚度充磁和侧面充磁" class="headerlink" title="厚度充磁和侧面充磁"></a>厚度充磁和侧面充磁</h3><p><img src="/undefined/8169/厚度充磁和侧面充磁.jpg" alt="厚度充磁和侧面充磁"></p><h3 id="多极磁铁充磁方向"><a href="#多极磁铁充磁方向" class="headerlink" title="多极磁铁充磁方向"></a>多极磁铁充磁方向</h3><p><img src="/undefined/8169/多极充磁.jpg" alt="多极磁铁充磁方向"></p><ul><li>不同于普通充磁，多极充磁是利用定制的充磁夹具进行充磁，充磁后在一个平面上可呈现多个N，S极，</li><li>订做款多极充磁的夹具费用大概在1500-3000元不等</li></ul><h2 id="钕铁硼"><a href="#钕铁硼" class="headerlink" title="钕铁硼"></a>钕铁硼</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">介绍</button><button type="button" class="tab " data-href="test4-2">材料特性</button><button type="button" class="tab " data-href="test4-3">烧结钕铁硼磁性能表</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="/undefined/8169/钕铁硼.jpg" width="200px" alt="钕铁硼"></p><ul><li><p><strong>介绍：</strong></p><ul><li>钕铁硼磁铁由钕、铁和硼（Nd2Fe14B）组成</li><li>它同时是最常用的稀土磁铁</li></ul></li><li><p>制造工艺：</p><ul><li>钕铁硼是通过粉末冶金工艺制造的</li></ul></li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><strong>优点：</strong><ul><li>钕铁硼具有性价比高，机械性能好等优点</li></ul></li><li><strong>缺点：</strong><ul><li>居里温度低</li><li>温度特性差</li><li>容易粉碎和腐蚀，其化学活性很强，所以必须对其表面涂层处理（如电泳、电镀等）</li></ul></li></ul></div><div class="tab-item-content" id="test4-3"><p><img src="/undefined/8169/钕铁硼磁性能表.png" width="400px" alt="钕铁硼磁性能表"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="铁氧体"><a href="#铁氧体" class="headerlink" title="铁氧体"></a>铁氧体</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">介绍</button><button type="button" class="tab " data-href="test4-2">材料特性</button><button type="button" class="tab " data-href="test4-3">牌号</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="/undefined/8169/铁氧体.jpg" width="200px" alt="铁氧体"></p><ul><li><p><strong>介绍：</strong></p><ul><li>它主要原料包括BaFe12O19和SrFe12O19</li><li>非金属性磁性材料</li></ul></li><li><p><strong>制造工艺：</strong></p><ul><li>通过陶瓷工艺法制造而成</li></ul></li><li><strong>工作温度：</strong><ul><li>铁氧体耐热温度工作上限300℃，居里温度450~460℃</li></ul></li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><strong>优点：</strong><ul><li>质地比较硬，属脆性材料</li><li>有很好的耐温性</li><li>价格低廉</li><li>性能适中</li></ul></li></ul></div><div class="tab-item-content" id="test4-3"><details class="folding-tag" blue><summary> 烧结永磁铁氧体磁铁 </summary>              <div class="content">              <p><img src="/undefined/8169/烧结永磁铁氧体磁铁.png" width="400px" alt="烧结永磁铁氧体磁铁主要牌号性能参数"></p>              </div>            </details><details class="folding-tag" blue><summary> 粘结永磁铁氧体磁铁 </summary>              <div class="content">              <p><img src="/undefined/8169/粘结永磁铁氧体磁铁.png" width="400px" alt="粘结永磁铁氧体磁铁主要牌号性能参数"></p>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="钐钴"><a href="#钐钴" class="headerlink" title="钐钴"></a>钐钴</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">介绍</button><button type="button" class="tab " data-href="test4-2">材料特性</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="/undefined/8169/钐钴.jpg" width="200px" alt="钐钴"></p><ul><li><p><strong>介绍：</strong></p><ul><li>SmCo磁铁是另一种稀土磁铁</li></ul></li><li><p><strong>制造工艺：</strong></p><ul><li>这是1种将矛、钴和其他金属混合制成合金，随后将铝合金破碎、压制、烧结成的的磁铁</li><li>生产流程：配料 → 熔炼制锭→ 制粉 → 压型 → 烧结回火 → 磁性检测 → 磨加工 → 销切加工 → 成品</li></ul></li><li><strong>工作温度：</strong><ul><li>最大温度工作范围350℃，负温不限</li></ul></li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><strong>优点：</strong><ul><li>具有很强的耐腐蚀性和抗氧化性</li><li>具有高磁能积、极低的温度系数</li><li>在工作温度180℃以上时，其最大磁能积（BHmax）、<a href="https://baike.baidu.com/item/矫顽性?fromModule=lemma_inlink">矫顽性</a>（coercivity）及温度稳定性和<a href="https://baike.baidu.com/item/化学稳定性/1850096?fromModule=lemma_inlink">化学稳定性</a>均超过<a href="https://baike.baidu.com/item/钕铁硼?fromModule=lemma_inlink">钕铁硼</a>永磁材料</li></ul></li><li><strong>缺点：</strong><ul><li>钐钴磁铁很容易剥碎</li><li>价格昂贵</li></ul></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 材料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（十） - web基础（thymeleaf）</title>
      <link href="/undefined/526a.html"/>
      <url>/undefined/526a.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>服务端模板技术</li></ul><h3 id="物理视图"><a href="#物理视图" class="headerlink" title="物理视图"></a>物理视图</h3><p><img src="/undefined/526a/物理视图.png" alt="物理视图"></p><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">概述</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>在Servlet中，将请求转发到一个HTML页面文件时，使用的完整的转发路径就是<strong>物理视图</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/pages/user/index.html</span><br></pre></td></tr></table></figure><ul><li>如果我们把所有的HTML页面都放在某个统一的目录下，那么转发地址就会呈现出明显的规律：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/pages/user/login.html /pages/user/login_success.html /pages/user/regist.html /pages/user/regist_success.html</span><br></pre></td></tr></table></figure><ul><li><p>路径的开头都是：/pages/user/  这称为<strong>视图前缀</strong></p></li><li><p>路径的结尾都是：.html 这称为<strong>视图后缀</strong></p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="逻辑视图"><a href="#逻辑视图" class="headerlink" title="逻辑视图"></a>逻辑视图</h3><p>物理视图=视图前缀+逻辑视图+视图后缀</p><p>上面的例子中：</p><div class="table-container"><table><thead><tr><th>视图前缀</th><th>逻辑视图</th><th>视图后缀</th><th>物理视图</th></tr></thead><tbody><tr><td>/pages/user/</td><td>login</td><td>.html</td><td>/pages/user/login.html</td></tr><tr><td>/pages/user/</td><td>login_success</td><td>.html</td><td>/pages/user/login_success.html</td></tr></tbody></table></div><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h3><p><img src="/undefined/526a/thymeleaf的jar包.png" alt="jar包"></p><h3 id="配置上下文参数"><a href="#配置上下文参数" class="headerlink" title="配置上下文参数"></a>配置上下文参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf  前缀和后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-prefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-suffix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>.html<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>说明：param-value中设置的前缀、后缀的值不是必须叫这个名字，可以根据实际情况和需求进行修改</p></div><h3 id="创建Servlet基类"><a href="#创建Servlet基类" class="headerlink" title="创建Servlet基类"></a>创建Servlet基类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.thymeleaf.TemplateEngine;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.context.WebContext;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.templatemode.TemplateMode;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.templateresolver.ServletContextTemplateResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewBaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建Thymeleaf解析器对象</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(servletContext);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.给解析器对象设置参数</span></span><br><span class="line">        <span class="comment">// ①HTML是默认模式，明确设置是为了代码更容易理解</span></span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ②设置前缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">viewPrefix</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;view-prefix&quot;</span>);</span><br><span class="line"></span><br><span class="line">        templateResolver.setPrefix(viewPrefix);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ③设置后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">viewSuffix</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;view-suffix&quot;</span>);</span><br><span class="line"></span><br><span class="line">        templateResolver.setSuffix(viewSuffix);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ④设置缓存过期时间（毫秒）</span></span><br><span class="line">        templateResolver.setCacheTTLMs(<span class="number">60000L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⑤设置是否缓存</span></span><br><span class="line">        templateResolver.setCacheable(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⑥设置服务器端编码方式</span></span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.创建模板引擎对象</span></span><br><span class="line">        templateEngine = <span class="keyword">new</span> <span class="title class_">TemplateEngine</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.给模板引擎对象设置模板解析器</span></span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processTemplate</span><span class="params">(String templateName, HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.设置响应体内容类型和字符集</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建WebContext对象</span></span><br><span class="line">        <span class="type">WebContext</span> <span class="variable">webContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebContext</span>(req, resp, getServletContext());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.处理模板数据</span></span><br><span class="line">        templateEngine.process(templateName, webContext, resp.getWriter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳转thymeleaf页面"><a href="#跳转thymeleaf页面" class="headerlink" title="跳转thymeleaf页面"></a>跳转thymeleaf页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.声明当前请求要前往的视图名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">viewName</span> <span class="operator">=</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.调用ViewBaseServlet父类中的解析视图模板的方法</span></span><br><span class="line">    <span class="built_in">super</span>.processTemplate(viewName, request, response);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在html中使用"><a href="#在html中使用" class="headerlink" title="在html中使用"></a>在html中使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在html标签内加入Thymeleaf名称空间的声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在p标签的基础上，使用Thymeleaf的表达式，解析了一个URL地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;@&#123;&#x27;/aaa/bbb/ccc&#x27;&#125;&quot;</span>&gt;</span>Thymeleaf将在这里显示一个解析出来的URL地址<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记 - web基础九（Session）</title>
      <link href="/undefined/daa1.html"/>
      <url>/undefined/daa1.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>Session 就一个接口（HttpSession）</li><li>Session 就是会话。它是用来维护一个客户端和服务器之间关联的一种技术</li><li>每个客户端都有自己的一个 Session 会话</li><li>Session 会话中，我们经常用来保存用户登录之后的信息</li></ul><h2 id="创建和获取Session"><a href="#创建和获取Session" class="headerlink" title="创建和获取Session"></a>创建和获取Session</h2><h3 id="request-getSession"><a href="#request-getSession" class="headerlink" title="request.getSession()"></a>request.getSession()</h3><ul><li><strong>第一次调用是：创建 Session 会话，之后调用都是：获取前面创建好的 Session 会话对象</strong></li></ul><h3 id="isNew"><a href="#isNew" class="headerlink" title="isNew()"></a>isNew()</h3><ul><li><p>判断到底是不是刚创建出来的</p></li><li><p>true 表示刚创建，false 表示获取之前创建</p></li></ul><h3 id="getId"><a href="#getId" class="headerlink" title="getId()"></a>getId()</h3><ul><li>获取Session 的会话 id 值</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li>Session 默认的超时时间长为 30 分钟</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaxInactiveInterval</span><span class="params">(<span class="type">int</span> interval)</span> 设置 Session 的超时时间（以秒为单位），超过指定的时长，Session就会被销毁，值为正数的时候，设定 Session 的超时时长。负数表示永不超时（极少使用）</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxInactiveInterval</span><span class="params">()</span>获取 Session 的超时时间  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invalidate</span><span class="params">()</span> 让当前 Session 会话马上超时无效</span><br></pre></td></tr></table></figure><h3 id="设置所有Session超时时长"><a href="#设置所有Session超时时长" class="headerlink" title="设置所有Session超时时长"></a>设置所有Session超时时长</h3><ul><li>在xml中设置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--表示当前 web 工程。创建出来 的所有 Session 默认是 20 分钟 超时时长--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>20<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="设置单个Session超时时长"><a href="#设置单个Session超时时长" class="headerlink" title="设置单个Session超时时长"></a>设置单个Session超时时长</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">life3</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 先获取 Session 对象</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"><span class="comment">// 设置当前 Session3 秒后超时</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">3</span>);</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;当前 Session 已经设置为 3 秒后超时&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Session立刻失效"><a href="#Session立刻失效" class="headerlink" title="Session立刻失效"></a>Session立刻失效</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">deleteNow</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 先获取 Session 对象</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"><span class="comment">// 让 Session 会话马上超时</span></span><br><span class="line">session.invalidate();</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;Session 已经设置为超时（无效）&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/undefined/daa1/浏览器和Session关联.png" alt="image-20221209220317250"></p>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记-web基础九（cookie）</title>
      <link href="/undefined/500a.html"/>
      <url>/undefined/500a.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>Cookie 是服务器通知客户端保存键值对的一种技术</p></li><li><p>客户端有了 Cookie 后，每次请求都发送给服务器</p></li><li><p>每个 Cookie 的大小不能超过 4kb</p></li></ul><h2 id="创建cookie"><a href="#创建cookie" class="headerlink" title="创建cookie"></a>创建cookie</h2><p><img src="/undefined/500a/创建cookie.png" alt="创建cookie"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 创建cookie对象</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 通知客户端保存cookie</span></span><br><span class="line">    resp.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 通知客户端保存cookie</span></span><br><span class="line">    resp.addCookie(cookie1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 打印信息</span></span><br><span class="line">    resp.getWriter().write(<span class="string">&quot;Cookie创建成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h2><p><img src="/undefined/500a/获取cookie.png" alt="获取cookie"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">getCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    Cookie[] cookies = req.getCookies();</span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;key1&quot;</span>.equals(cookie.getName()) )&#123;</span><br><span class="line">            resp.getWriter().write(cookie.getName() + <span class="string">&quot;=&quot;</span> + cookie.getValue() + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查找指定名称的cookie</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">newCookie</span> <span class="operator">=</span> CookieUtils.findCookie(<span class="string">&quot;key1&quot;</span>,cookies);</span><br><span class="line">    <span class="keyword">if</span> (newCookie != <span class="literal">null</span>) &#123;</span><br><span class="line">        resp.getWriter().write(newCookie.getName() + <span class="string">&quot;=&quot;</span> + newCookie.getValue() + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 打印信息</span></span><br><span class="line">    resp.getWriter().write(<span class="string">&quot;Cookie获取成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>utils：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找对应的cookie</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cookies</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  如果匹配到要查找的cookie 就进行返回对应的cookie 否则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title function_">findCookie</span><span class="params">(String name, Cookie[] cookies)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span> || cookies.length == <span class="number">0</span> || cookies == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.equals(cookie.getName()))&#123;</span><br><span class="line">                <span class="keyword">return</span> cookie;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cookie修改"><a href="#cookie修改" class="headerlink" title="cookie修改"></a>cookie修改</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方案一：</span><br><span class="line"><span class="comment">// 1、先创建一个要修改的同名的 Cookie 对象</span></span><br><span class="line"><span class="comment">// 2、在构造器，同时赋于新的 Cookie 值。</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;newValue1&quot;</span>);</span><br><span class="line"><span class="comment">// 3、调用 response.addCookie( Cookie ); 通知 客户端 保存修改</span></span><br><span class="line">resp.addCookie(cookie);</span><br></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方案二：</span><br><span class="line"><span class="comment">// 1、先查找到需要修改的 Cookie 对象</span></span><br><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> CookieUtils.findCookie(<span class="string">&quot;key2&quot;</span>, req.getCookies());</span><br><span class="line"><span class="keyword">if</span> (cookie != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 2、调用 setValue()方法赋于新的 Cookie 值。</span></span><br><span class="line">cookie.setValue(<span class="string">&quot;newValue2&quot;</span>);</span><br><span class="line"><span class="comment">// 3、调用 response.addCookie()通知客户端保存修改</span></span><br><span class="line">resp.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="satMaxAge（）"><a href="#satMaxAge（）" class="headerlink" title="satMaxAge（）"></a>satMaxAge（）</h3><ul><li>正数，表示在指定的秒数后过期</li><li>负数，表示浏览器一关，Cookie 就会被删除（默认值是-1）</li><li>零，表示马上删除 Cookie</li></ul><h2 id="有效路径path的设置"><a href="#有效路径path的设置" class="headerlink" title="有效路径path的设置"></a>有效路径path的设置</h2><ul><li>path 属性是通过请求的地址来进行有效的过滤</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CookieA path=/工程路径</span><br><span class="line">CookieB path=/工程路径/abc</span><br><span class="line">请求地址如下：</span><br><span class="line">http://ip:port/工程路径/a.html</span><br><span class="line">CookieA 发送</span><br><span class="line">CookieB 不发送</span><br><span class="line">http://ip:port/工程路径/abc/a.html</span><br><span class="line">CookieA 发送</span><br><span class="line">CookieB 发送</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记 - web基础八（网页上传下载）</title>
      <link href="/undefined/225f.html"/>
      <url>/undefined/225f.html</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>web上传下载基础代码</p></div><p>jsp：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8888/09_el_jstl/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhibi&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photo&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>download：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">ckage com.study.download;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 执笔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/20 22:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Download</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 获取要下载的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">downloadFileName</span> <span class="operator">=</span> <span class="string">&quot;4.jpg&quot;</span>;</span><br><span class="line">        <span class="comment">// 2. 读取要下载的文件内容(通过ServletContext对象进行读取)</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">        <span class="comment">// MimeType() 数据类型的字符串描述符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> servletContext.getMimeType(<span class="string">&quot;/file/&quot;</span> + downloadFileName);</span><br><span class="line">        <span class="comment">// 4. 在回传前 通过响应头告诉客户端返回的数据类型</span></span><br><span class="line">        resp.setContentType(mimeType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 告诉客户端收到的数据用于下载(使用响应头)</span></span><br><span class="line">        <span class="comment">// 当文件名存在中文时 URLEncoder URL编码(IE浏览器、谷歌浏览器)</span></span><br><span class="line">        <span class="comment">// 这里的downloadFileName 文件名可以进行更改 </span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; fileName=&quot;</span> + URLEncoder.encode(<span class="string">&quot;你好.jpg&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>) );</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  / 被服务器解析表示地址http://ip:port/工程名/ 映射 到代码的根目录</span></span><br><span class="line"><span class="comment">         *  getResourceAsStream 获取资源向流一样返回</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> servletContext.getResourceAsStream(<span class="string">&quot;/file/&quot;</span> + downloadFileName);</span><br><span class="line">        <span class="comment">// 获取响应的输出流</span></span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">        <span class="comment">// 读取输入流中的全部数据 复制给输出流 输出给客户端</span></span><br><span class="line">        IOUtils.copy(resourceAsStream,outputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>upload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.upload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 执笔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/19 21:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Upload</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取文件的演示</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;文件提交&quot;);</span></span><br><span class="line">        <span class="comment">//ServletInputStream inputStream = req.getInputStream();</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//byte[] buff = new byte[1024000];</span></span><br><span class="line">        <span class="comment">//int read = inputStream.read(buff);</span></span><br><span class="line">        <span class="comment">//System.out.println(new String(buff,0,read));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 先判断上传的数据是否多段数据（只有多段数据才是文件上传的）</span></span><br><span class="line">        <span class="keyword">if</span> (ServletFileUpload.isMultipartContent(req)) &#123;</span><br><span class="line">            <span class="comment">// 创建fileItemFactory 工厂类实现</span></span><br><span class="line">            <span class="type">DiskFileItemFactory</span> <span class="variable">fileItemFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">            <span class="comment">// 创建用于解析上传数据的工具类ServletFileUpload</span></span><br><span class="line">            <span class="type">ServletFileUpload</span> <span class="variable">servletFileUpload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>(fileItemFactory);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 解析上传的数据 得到每一个表单项fileItem</span></span><br><span class="line">                List&lt;FileItem&gt; list = servletFileUpload.parseRequest(req);</span><br><span class="line">                <span class="comment">//循环判断 每一个表单 是普通类型 还是上传文件</span></span><br><span class="line">                <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fileItem.isFormField()) &#123;</span><br><span class="line">                        <span class="comment">//普通表单项</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;表单项的name属性值&quot;</span> + fileItem.getFieldName());</span><br><span class="line">                        <span class="comment">// 参数UTF-8 解决文件有中文名的乱码问题</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;表单项的value属性值&quot;</span> + fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//上传文件</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;表单项的name属性值&quot;</span> + fileItem.getFieldName());</span><br><span class="line">                        <span class="comment">// 参数UTF-8 解决文件有中文名的乱码问题</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;上传文件名&quot;</span> + fileItem.getName());</span><br><span class="line"></span><br><span class="line">                        fileItem.write(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;j:\\ATest\\&quot;</span> + fileItem.getName()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记 - web基础八（JSTL）</title>
      <link href="/undefined/7e51.html"/>
      <url>/undefined/7e51.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>JSTL 标签库 全称是指 JSP Standard Tag Library JSP 标准标签库。是一个不断完善的开放源代码的 JSP 标</p><p>签库</p></li></ul><h2 id="引入标签库"><a href="#引入标签库" class="headerlink" title="引入标签库"></a>引入标签库</h2><ul><li>使用 taglib 指令引入标签库</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE 标签库</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">XML 标签库</span><br><span class="line">&lt;%@ taglib prefix=&quot;x&quot; uri=&quot;http://java.sun.com/jsp/jstl/xml&quot; %&gt;</span><br><span class="line">FMT 标签库</span><br><span class="line">&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;</span><br><span class="line">SQL 标签库</span><br><span class="line">&lt;%@ taglib prefix=&quot;sql&quot; uri=&quot;http://java.sun.com/jsp/jstl/sql&quot; %&gt;</span><br><span class="line">FUNCTIONS 标签库</span><br><span class="line">&lt;%@ taglib prefix=&quot;fn&quot; uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; %&gt;</span><br></pre></td></tr></table></figure><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li><p>先导入 jstl 标签库的 jar 包</p><ul><li><p>taglibs-standard-impl-1.2.1.jar</p></li><li><p>taglibs-standard-spec-1.2.1.jar</p></li></ul></li><li><p>使用 taglib 指令引入标签库</p><ul><li>```html’<br>&lt;%@ taglib prefix=”c” uri=”<a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a>“ %&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 核心库使用</span><br><span class="line"></span><br><span class="line">### &lt;c:if /&gt;</span><br><span class="line"></span><br><span class="line">- if 标签用来做 if 判断</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;%--</span><br><span class="line">ii.&lt;c:if /&gt;</span><br><span class="line">if 标签用来做 if 判断。</span><br><span class="line">test 属性表示判断的条件（使用 EL 表达式输出）</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123; 12 == 12 &#125;&quot;&gt;</span><br><span class="line">&lt;h1&gt;12 等于 12&lt;/h1&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123; 12 != 12 &#125;&quot;&gt;</span><br><span class="line">&lt;h1&gt;12 不等于 12&lt;/h1&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签"><a href="#lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt-标签" class="headerlink" title="&lt; c:choose&gt; &lt; c:when&gt; &lt; c:otherwise&gt;标签"></a>&lt; c:choose&gt; &lt; c:when&gt; &lt; c:otherwise&gt;标签</h3><p> -作用：多路判断。跟 switch … case …. default 非常接近</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">choose 标签开始选择判断</span><br><span class="line">when 标签表示每一种判断情况</span><br><span class="line">test 属性表示当前这种判断情况的值</span><br><span class="line">otherwise 标签表示剩下的情况</span><br><span class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span> <span class="tag">&lt;<span class="name">c:when</span>&gt;</span> <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span>标签使用时需要注意的点：</span><br><span class="line">1、标签里不能使用 html 注释，要使用 jsp 注释</span><br><span class="line">2、when 标签的父标签一定要是 choose 标签</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">request.setAttribute(&quot;height&quot;, 180);</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">&lt;%-- 这是 html 注释 --%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123; requestScope.height &gt; 190 &#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>小巨人<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123; requestScope.height &gt; 180 &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>很高<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123; requestScope.height &gt; 170 &#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>还可以<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;requestScope.height &gt; 160&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>大于 160<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;requestScope.height &gt; 150&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>大于 150<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">&quot;$&#123;requestScope.height &gt; 140&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>大于 140<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">其他小于 140</span><br><span class="line"><span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a><c:forEach></c:forEach></h3><ul><li>遍历输出使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--1.遍历 1 到 10，输出</span><br><span class="line">begin 属性设置开始的索引</span><br><span class="line">end 属性设置结束的索引</span><br><span class="line">var 属性表示循环的变量(也是当前正在遍历到的数据)</span><br><span class="line">for (int i = 1; i &lt; 10; i++)</span><br><span class="line">--%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">begin</span>=<span class="string">&quot;1&quot;</span> <span class="attr">end</span>=<span class="string">&quot;10&quot;</span> <span class="attr">var</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>第$&#123;i&#125;行<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记 - web基础八（EL表达式）</title>
      <link href="/undefined/3a0.html"/>
      <url>/undefined/3a0.html</url>
      
        <content type="html"><![CDATA[<h2 id="EL表达式作用"><a href="#EL表达式作用" class="headerlink" title="EL表达式作用"></a>EL表达式作用</h2><ul><li><p>EL 表达式的全称是：Expression Language。是表达式语言</p></li><li><p>EL 表达式的什么作用：EL 表达式主要是代替 jsp 页面中的表达式脚本在 jsp 页面中进行数据的输出</p></li><li><p>EL 表达式的格式是：${表达式}</p></li><li>EL 表达式在输出 null 值的时候，输出的是空串。jsp 表达式脚本输出 null 值的时候，输出的是 null 字符串</li></ul><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123; 运算表达式 &#125;</span><br></pre></td></tr></table></figure><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><p><img src="/undefined/3a0/关系运算.png" alt="image-20221208211949803"></p><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p><img src="/undefined/3a0/逻辑运算.png" alt="逻辑运算"></p><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><p><img src="/undefined/3a0/算术运算.png" alt="image-20221208213252206"></p><h3 id="empty运算"><a href="#empty运算" class="headerlink" title="empty运算"></a>empty运算</h3><ul><li>empty 运算可以判断一个数据是否为空，如果为空，则输出 true,不为空输出 false</li><li>取反为 not empty</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;%</span><br><span class="line">// 1、值为 null 值的时候，为空</span><br><span class="line">request.setAttribute(&quot;emptyNull&quot;, null);</span><br><span class="line">// 2、值为空串的时候，为空</span><br><span class="line">request.setAttribute(&quot;emptyStr&quot;, &quot;&quot;);</span><br><span class="line">// 3、值是 Object 类型数组，长度为零的时候</span><br><span class="line">request.setAttribute(&quot;emptyArr&quot;, new Object[]&#123;&#125;);</span><br><span class="line">// 4、list 集合，元素个数为零</span><br><span class="line">List<span class="tag">&lt;<span class="name">String</span>&gt;</span> list = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">// list.add(&quot;abc&quot;);</span><br><span class="line">request.setAttribute(&quot;emptyList&quot;, list);</span><br><span class="line">// 5、map 集合，元素个数为零</span><br><span class="line">Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">// map.put(&quot;key1&quot;, &quot;value1&quot;);</span><br><span class="line">request.setAttribute(&quot;emptyMap&quot;, map);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123; empty emptyNull &#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">$&#123; empty emptyStr &#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">$&#123; empty emptyArr &#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">$&#123; empty emptyList &#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">$&#123; empty emptyMap &#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h3><ul><li>表达式 1？表达式 2：表达式 3</li><li>如果表达式 1 的值为真，返回表达式 2 的值，如果表达式 1 的值为假，返回表达式 3 的值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三元运算 --&gt;</span></span><br><span class="line">$&#123; 12 == 12 ? &quot;你说的是真的&quot; : &quot;你说的是假的&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="“-”点运算和-中括号运算"><a href="#“-”点运算和-中括号运算" class="headerlink" title="“.”点运算和[]中括号运算"></a>“.”点运算和[]中括号运算</h3><ul><li>.点运算，可以输出 Bean 对象中某个属性的值</li><li>[]中括号运算，可以输出有序集合中某个元素的值</li><li>并且[]中括号运算，还可以输出 map 集合中 key 里含有特殊字符的 key 的值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;%</span><br><span class="line">Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(&quot;a.a.a&quot;, &quot;aaaValue&quot;);</span><br><span class="line">map.put(&quot;b+b+b&quot;, &quot;bbbValue&quot;);</span><br><span class="line">map.put(&quot;c-c-c&quot;, &quot;cccValue&quot;);</span><br><span class="line">request.setAttribute(&quot;map&quot;, map);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123; map[&#x27;a.a.a&#x27;] &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">$&#123; map[&quot;b+b+b&quot;] &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">$&#123; map[&#x27;c-c-c&#x27;] &#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="EL-表达式的-11-个隐含对象"><a href="#EL-表达式的-11-个隐含对象" class="headerlink" title="EL 表达式的 11 个隐含对象"></a>EL 表达式的 11 个隐含对象</h2><div class="table-container"><table><thead><tr><th>变量</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContextImpl</td><td>获取 jsp 中的九大内置对象</td></tr><tr><td>pageScope</td><td>Map<String,Object></String,Object></td><td>获取 pageContext 域中的数据</td></tr><tr><td>requestScope</td><td>Map<String,Object></String,Object></td><td>获取 Request 域中的数据</td></tr><tr><td>sessionScope</td><td>Map<String,Object></String,Object></td><td>获取 Session 域中的数据</td></tr><tr><td>applicationScope</td><td>Map<String,Object></String,Object></td><td>获取 ServletContext 域中的数据</td></tr><tr><td>param</td><td>Map<String,String></String,String></td><td>获取请求参数的值</td></tr><tr><td>paramValues</td><td>Map<String,String[]></String,String[]></td><td>获取请求参数的值，获取多个值的时候使用</td></tr><tr><td>header</td><td>Map<String,String></String,String></td><td>获取请求头的信息</td></tr><tr><td>headerValues</td><td>Map<String,String[]></String,String[]></td><td>获取请求头的信息，它可以获取多个值的情况</td></tr><tr><td>cookie</td><td>Map<String,Cookie></String,Cookie></td><td>获取当前请求的 Cookie 信息</td></tr><tr><td>initParam</td><td>Map<String,String></String,String></td><td>获取在 web.xml 中配置的&lt; context-param &gt;上下文参数</td></tr></tbody></table></div><h2 id="四个域"><a href="#四个域" class="headerlink" title="四个域"></a>四个域</h2><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>先从最小的作用访问进行选取，作用范围：<code>pageContext</code> (一个jsp页面)&lt; <code>Request</code>(一次请求)  &lt; <code>Session</code> （一个会话）&lt; <code>ServletContext</code> （整个web页面）</p></div><ul><li>pageScope ：pageContext 域</li><li>requestScope ：Request 域</li><li>sessionScope ：Session 域</li><li>applicationScope ：ServletContext 域</li></ul><h3 id="pageContext-对象的使用"><a href="#pageContext-对象的使用" class="headerlink" title="pageContext 对象的使用"></a>pageContext 对象的使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &lt;%--</span><br><span class="line">        request.getScheme() 获取请求协议</span><br><span class="line">        request.getServerName() 获取请求的服务器ip或域名</span><br><span class="line">        request.getServerPort() 获取请求的服务器的端口号</span><br><span class="line">        request.getContextPath() 获取当前工程路径</span><br><span class="line">        request.getMethod() 获取请求的方式(GET 或 POST)</span><br><span class="line">        request.getRemoteHost() 获取客户端ip地址</span><br><span class="line"></span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;%=request.getScheme()%&gt;</span><br><span class="line">    1. 协议：$&#123;pageContext.request.scheme&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    2. 服务器ip：$&#123;pageContext.request.serverName&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    3. 服务器端口号：$&#123;pageContext.request.serverPort&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    4. 当前工程路径：$&#123;pageContext.request.contextPath&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    5. 请求方式：$&#123;pageContext.request.method&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    6. 客户端ip地址：$&#123;pageContext.request.remoteHost&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记-  web基础六（Servlet）</title>
      <link href="/undefined/dec3.html"/>
      <url>/undefined/dec3.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Servlet 是 JavaEE 规范之一。规范就是接口</li><li>Servlet 就 JavaWeb 三大组件之一。三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监听器</li><li>Servlet 是运行在服务器上的一个 java 小程序，它可以接收客户端发送过来的请求，并响应数据给客户端</li></ul><h2 id="URL地址到Servlet程序访问"><a href="#URL地址到Servlet程序访问" class="headerlink" title="URL地址到Servlet程序访问"></a>URL地址到Servlet程序访问</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202212062211018.png" alt="URL地址到Servlet程序访问"></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li><p>执行 Servlet 构造器方法，执行 init 初始化方法，是在第一次访问的时候创建 S   ervlet 程序会调用</p></li><li><p>执行 service 方法，每次访问都会调用</p></li><li><p>执行 destroy 销毁方法，，在 web 工程停止的时候调用</p></li></ol><h2 id="Servlet类的继承体系"><a href="#Servlet类的继承体系" class="headerlink" title="Servlet类的继承体系"></a>Servlet类的继承体系</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202212062226229.png" alt="Servlet类的继承体系"></p><h2 id="ServletConfig类"><a href="#ServletConfig类" class="headerlink" title="ServletConfig类"></a>ServletConfig类</h2><ul><li>Servlet 程序的配置信息类</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li><p>可以获取 Servlet 程序的别名 servlet-name 的值</p></li><li><p>获取初始化参数 init-param</p></li><li><p>获取 ServletContext 对象</p></li></ul><p>xml中配置文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context-param是上下文参数(属于整个web工程)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- servlet标签给Tomcat配置servlet程序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet name标签 servlet程序的一个别名(一般为类名) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletTest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet class标签 是servlet程序的全类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.study.servlet.ServletTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--init-param 是初始化参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- param-name 参数名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- param-value 参数值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--servlet-mapping 标签给servlet程序配置访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-name标签的作用告诉服务器 当前配置的地址给那个servlet程序使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletTest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- url-pattern 标签配置访问地址</span></span><br><span class="line"><span class="comment">                / 在服务器中解析 表示地址为：http://ip:prot/工程路径</span></span><br><span class="line"><span class="comment">                /ServletTest 表示地址为：http://ip:port/工程路径/ServletTest</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ServletTest<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Servlet：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class ServletTest implements Servlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(ServletConfig servletConfig) throws ServletException &#123;</span><br><span class="line">        System.out.println(&quot;2. init初始化方法&quot;);</span><br><span class="line">        //1. 可以获取Servlet程序的别名servlet-name值</span><br><span class="line">        System.out.println(&quot; ServletTest程序的别名：&quot; + servletConfig.getServletName());</span><br><span class="line">        //2. 获取初始化参数init-param</span><br><span class="line">        System.out.println(&quot; 初始化参数username的值：&quot; + servletConfig.getInitParameter(&quot;username&quot;));</span><br><span class="line">        System.out.println(&quot; 初始化参数url的值：&quot; + servletConfig.getInitParameter(&quot;url&quot;));</span><br><span class="line">        //3. 获取ServletContext对象</span><br><span class="line">        System.out.println(servletConfig.getServletContext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>httpServlet：</p><p>​    <div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>继承httpServlet 进行重写init() 方法需要调用父类的init() 不然后面获取会空指针异常</p></div></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class ServletTest2 extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(ServletConfig config) throws ServletException &#123;</span><br><span class="line">        // 这里需要调用父类的init() 不然后面获取会空指针异常</span><br><span class="line">        /**</span><br><span class="line">         * public void init(ServletConfig config) throws ServletException &#123;</span><br><span class="line">         *         this.config = config;</span><br><span class="line">         *         this.init();</span><br><span class="line">         *     &#125;</span><br><span class="line">         *     </span><br><span class="line">         *     重写后这里父类GenericServlet中的init() config无法进行保存</span><br><span class="line">         */</span><br><span class="line">        super.init(config);</span><br><span class="line">        System.out.println(&quot;重写init方法，执行一些操作&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ServletContext类"><a href="#ServletContext类" class="headerlink" title="ServletContext类"></a>ServletContext类</h2><ul><li>ServletContext 是一个接口，它表示 Servlet 上下文对象</li><li>一个 web 工程，只有一个 ServletContext 对象实例</li><li>ServletContext 对象是一个域对象</li><li>ServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁</li></ul><h3 id="域对象"><a href="#域对象" class="headerlink" title="域对象"></a>域对象</h3><ul><li><p>可以像 Map 一样存取数据的对象，叫域对象</p></li><li><p>域指的是存取数据的操作范围是整个 web 工程</p></li></ul><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><ul><li>获取 web.xml 中配置的上下文参数 context-param</li><li>获取当前的工程路径，格式: /工程路径</li><li>获取工程部署后在服务器硬盘上的绝对路径</li><li>像 Map 一样存取数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ServletContext extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        //1. 获取web.xml中配置的上下文参数context-param</span><br><span class="line">        javax.servlet.ServletContext context = getServletConfig().getServletContext();</span><br><span class="line">        String username = context.getInitParameter(&quot;username&quot;);</span><br><span class="line">        System.out.println(&quot;ContextServlet的username是：&quot; + username);</span><br><span class="line">        System.out.println(&quot; ContextServlet的password是:&quot; + context.getInitParameter(&quot;password&quot;));</span><br><span class="line"></span><br><span class="line">        //2. 获取当前的工程路径，格式：/工程路径</span><br><span class="line">        String contextPath = context.getContextPath();</span><br><span class="line">        System.out.println(&quot; 当前工程路径是：&quot; + contextPath);</span><br><span class="line">        //3. 获取工程部署后再服务器硬盘上的绝对路径</span><br><span class="line">        /**</span><br><span class="line">         *  / 被服务器解析地址为：http://ip:port/工程名/ 映射到IDEA代码的web目录</span><br><span class="line">         */</span><br><span class="line">        System.out.println(&quot; 工程部署的绝对路径是：&quot; + context.getRealPath(&quot;/&quot;));</span><br><span class="line">        System.out.println(&quot; 工程部署的绝对路径是：&quot; + context.getRealPath(&quot;/css&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--context-param 是上下文参数(它属于整个 web 工程)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>context<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--context-param 是上下文参数(它属于整个 web 工程)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><ul><li><p>客户端和服务器之间通信时，发送的数据，需要遵守的规则，叫 HTTP 协议</p></li><li><p>HTTP 协议中的数据又叫报文</p></li></ul><h3 id="请求的HTTP格式"><a href="#请求的HTTP格式" class="headerlink" title="请求的HTTP格式"></a>请求的HTTP格式</h3><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><h5 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h5><ul><li><p>请求的方式，如 GET或POST</p></li><li><p>请求的资源路径[+?+请求参数]</p></li><li><p>请求的协议的版本号 HTTP/1.1</p></li></ul><h5 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h5><ul><li>key : value 组成 ，不同的键值对，表示不同的含义</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202212072124288.png" alt="GET请求HTTP协议内容"></p><h5 id="那些为GET请求"><a href="#那些为GET请求" class="headerlink" title="那些为GET请求"></a>那些为GET请求</h5><ul><li><p>form 标签 method=get</p></li><li><p>a 标签</p></li><li><p>link 标签引入 css</p></li><li><p>Script 标签引入 js 文件</p></li><li><p>img 标签引入图片</p></li><li><p>iframe 引入 html 页面</p></li><li><p>在浏览器地址栏中输入地址后敲回车</p></li></ul><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><h5 id="请求行-1"><a href="#请求行-1" class="headerlink" title="请求行"></a>请求行</h5><ul><li><p>请求的方式 POST</p></li><li><p>请求的资源路径[+?+请求参数]</p></li><li><p>请求的协议的版本号 HTTP/1.1</p></li></ul><h5 id="请求头-1"><a href="#请求头-1" class="headerlink" title="请求头"></a>请求头</h5><ul><li><p>key : value 不同的请求头，有不同的含义</p></li><li><p><strong>空行</strong></p></li></ul><h5 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h5><ul><li>发送给服务器的数据</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202212072134603.png" alt="POST请求的HTTP协议内容"></p><h3 id="常用请求头说明"><a href="#常用请求头说明" class="headerlink" title="常用请求头说明"></a>常用请求头说明</h3><ul><li><p>Accept: 表示客户端可以接收的数据类型</p></li><li><p>Accpet-Languege: 表示客户端可以接收的语言类型</p></li><li><p>User-Agent: 表示客户端浏览器的信息</p></li><li><p>Host： 表示请求时的服务器 ip 和端口号</p></li></ul><h4 id="那些为POST请求"><a href="#那些为POST请求" class="headerlink" title="那些为POST请求"></a>那些为POST请求</h4><ul><li>form 标签 method=post</li></ul><h3 id="响应的HTTP协议格式"><a href="#响应的HTTP协议格式" class="headerlink" title="响应的HTTP协议格式"></a>响应的HTTP协议格式</h3><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><ul><li><p>响应的协议和版本号</p></li><li><p>响应状态码</p></li><li><p>响应状态描述符</p></li></ul><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><ul><li><p>key : value 不同的响应头，有其不同含义</p></li><li><p><strong>空行</strong></p></li></ul><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><ul><li>回传给客户端的数据</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202212072139823.png" alt="响应的HTTP协议内容"></p><h3 id="常用响应码"><a href="#常用响应码" class="headerlink" title="常用响应码"></a>常用响应码</h3><ul><li>200 表示请求成功</li><li>302 表示请求重定向</li><li>404 表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误）</li><li>500 表示服务器已经收到请求，但是服务器内部错误（代码错误）</li></ul><h3 id="MIME类型"><a href="#MIME类型" class="headerlink" title="MIME类型"></a>MIME类型</h3><ul><li>MIME 是 HTTP 协议中数据类型，</li><li>英文全称是”Multipurpose Internet Mail Extensions” 多功能 Internet 邮件扩充服务</li><li>格式是“大类型/小类型”，并与某一种文件的扩展名相对应</li></ul><div class="table-container"><table><thead><tr><th>文件</th><th>MIME类型</th></tr></thead><tbody><tr><td>超文本标记语言文本</td><td>.html , .htm                            text/html</td></tr><tr><td>普通文本</td><td>.txt                                           text/plain</td></tr><tr><td>RTF文本</td><td>.rtf                                           application/rtf</td></tr><tr><td>GIF图形</td><td>.gif                                           image/gif</td></tr><tr><td>JEPG图形</td><td>.jpeg,.jpg                                image/jpeg</td></tr><tr><td>au声音文件</td><td>.au                                          audio/basic</td></tr><tr><td>MIDI 音乐文件</td><td>mid,.midi                               audio/midi,audio/x-midi</td></tr><tr><td>RealAudio 音乐文件</td><td>.ra, .ram                                 audio/x-pn-realaudio</td></tr><tr><td>MPEG 文件</td><td>.mpg,.mpeg                           video/mpeg</td></tr><tr><td>AVI 文件</td><td>.avi                                          video/x-msvideo</td></tr><tr><td>GZIP 文件</td><td>.gz                                          application/x-gzip</td></tr><tr><td>TAR 文件</td><td>.tar                                         application/x-tar</td></tr></tbody></table></div><h2 id="HttpServletRequest-类"><a href="#HttpServletRequest-类" class="headerlink" title="HttpServletRequest 类"></a>HttpServletRequest 类</h2><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><ul><li>通过HttpServletRequest对象获取请求的信息</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getRequestURI() 获取请求的资源路径</span><br><span class="line">getRequestURL() 获取请求的统一资源定位符（绝对路径）</span><br><span class="line">getRemoteHost() 获取客户端的 ip 地址</span><br><span class="line">getHeader() 获取请求头</span><br><span class="line">getParameter() 获取请求的参数</span><br><span class="line">getParameterValues() 获取请求的参数（多个值的时候使用）</span><br><span class="line">getMethod() 获取请求的方式 GET 或 POST</span><br><span class="line">setAttribute(key, value); 设置域数据</span><br><span class="line">getAttribute(key); 获取域数据</span><br><span class="line">getRequestDispatcher() 获取请求转发对象</span><br></pre></td></tr></table></figure><h3 id="doGet"><a href="#doGet" class="headerlink" title="doGet"></a>doGet</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class ResponseISOServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        // 返回中文显示不对解决方案一</span><br><span class="line">        System.out.println(resp.getCharacterEncoding());//默认是ISO-8859-1</span><br><span class="line">        // 设置服务器的字符集为UTF-8</span><br><span class="line">//        resp.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">//        // 通过响应头 设置浏览器的字符集为 UTF-8</span><br><span class="line">//        resp.setHeader(&quot;Content-Type&quot;,&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">        // 方案二</span><br><span class="line">        // 需要在获取流对象之前调用才有效</span><br><span class="line">        resp.setContentType(&quot;text/html; charset=UTF-8&quot;);</span><br><span class="line">        //返回数据给客户端</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.write(&quot;你哈&quot;);//这里输入中文会无法显示</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST请求中文乱码解决"><a href="#POST请求中文乱码解决" class="headerlink" title="POST请求中文乱码解决"></a>POST请求中文乱码解决</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 设置请求体的字符集为 UTF-8，从而解决 post 请求的中文乱码问题</span><br><span class="line">req.setCharacterEncoding(&quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><ul><li>服务器收到请求后，从一次资源跳转到另一个资源的操作</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202212072156426.png" alt="请求转发"></p><p>Servlet1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Servlet1 extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        // 请求转发可以访问 WEB-INF下的内容</span><br><span class="line">        // 请求转发浏览器中地址栏的地址不变</span><br><span class="line">        // 获取请求的参数</span><br><span class="line">        String username = req.getParameter(&quot;username&quot;);</span><br><span class="line">        System.out.println(&quot;在servlet1(柜台1) 查看参数(材料)：&quot; + username);</span><br><span class="line">        // 盖章 并传递到servlet2去查看</span><br><span class="line">        req.setAttribute(&quot;key&quot;,&quot;servlet1的章&quot;);</span><br><span class="line">        // 问路 servlet2(柜台2)怎么走</span><br><span class="line">        /**</span><br><span class="line">         * 这里必须为 /开头 因为/被解析为 http://ip:port/工程名/  映射到IDEA代码的web目录</span><br><span class="line">         */</span><br><span class="line">        RequestDispatcher requestDispatcher = req.getRequestDispatcher(&quot;/servlet2&quot;);</span><br><span class="line">        // 请求转发</span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Servlet2：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Servlet2 extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        // 获取请求的参数</span><br><span class="line">        String username = req.getParameter(&quot;username&quot;);</span><br><span class="line">        System.out.println(&quot;在servlet2(柜台2) 查看参数(材料)：&quot; + username);</span><br><span class="line">        // 查看柜台1servlet1的章</span><br><span class="line">        Object key = req.getAttribute(&quot;key&quot;);</span><br><span class="line">        System.out.println(&quot;柜台1是否有章&quot; + key);</span><br><span class="line">        // 处理柜台2的任务</span><br><span class="line">        System.out.println(&quot;处理柜台2的任务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>浏览器地址栏没有变化</li><li>是一次请求</li><li>共享Request域中的数据</li><li>可以转发到WEB-INF目录下</li><li>不可以访问工程外的资源</li></ul><h2 id="base标签"><a href="#base标签" class="headerlink" title="base标签"></a>base标签</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202212072203146.png" alt="base标签作用"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--base 标签设置页面相对路径工作时参照的地址</span></span><br><span class="line"><span class="comment">href 属性就是参数的地址值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/07_servlet/a/b/&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web中的相对路径和绝对路径"><a href="#web中的相对路径和绝对路径" class="headerlink" title="web中的相对路径和绝对路径"></a>web中的相对路径和绝对路径</h2><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>在实际开发中，路径都使用绝对路径，而不简单的使用相对路径</p><p>1、绝对路径</p><p>2、base+相对</p></div><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><ul><li><p>. ：表示当前目录</p></li><li><p>.. ：表示上一级目录</p></li><li><p>资源名 ：表示当前目录/资源名</p></li></ul><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><ul><li><a href="http://ip:port/工程路径/资源路径">http://ip:port/工程路径/资源路径</a></li></ul><h3 id="斜杠意义"><a href="#斜杠意义" class="headerlink" title="/斜杠意义"></a>/斜杠意义</h3><ul><li>/ 斜杠 如果被浏览器解析，得到的地址是：<a href="http://ip:port/">http://ip:port/</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>斜杠<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>/ 斜杠 如果被服务器解析，得到的地址是：<a href="http://ip:port/工程路径">http://ip:port/工程路径</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">servletContext.getRealPath(“/”);</span><br><span class="line">request.getRequestDispatcher(“/”);</span><br></pre></td></tr></table></figure><ul><li>特殊情况： response.sendRediect(“/”); 把斜杠发送给浏览器解析。得到 <a href="http://ip:port/">http://ip:port/</a></li></ul><h2 id="HttpServletResponse-类"><a href="#HttpServletResponse-类" class="headerlink" title="HttpServletResponse 类"></a>HttpServletResponse 类</h2><ul><li>返回给客户端的信息，都可以通过 HttpServletResponse 对象来进行设置</li></ul><h3 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>二者只能使用其一，否则报错</p></div><ul><li>字节流 getOutputStream(); 常用于下载（传递二进制数据）</li><li>字符流 getWriter(); 常用于回传字符串（常用）</li><li>网客户端回传数据：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class ResponseIOServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,IOException &#123;</span><br><span class="line">        // 要求 ： 往客户端回传 字符串 数据。</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.write(&quot;response&#x27;s content!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应乱码问题解决"><a href="#响应乱码问题解决" class="headerlink" title="响应乱码问题解决"></a>响应乱码问题解决</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class ResponseISOServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        // 返回中文显示不对解决方案一</span><br><span class="line">        System.out.println(resp.getCharacterEncoding());//默认是ISO-8859-1</span><br><span class="line">        // 设置服务器的字符集为UTF-8</span><br><span class="line">//        resp.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">//        // 通过响应头 设置浏览器的字符集为 UTF-8</span><br><span class="line">//        resp.setHeader(&quot;Content-Type&quot;,&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">        // 方案二</span><br><span class="line">        // 需要在获取流对象之前调用才有效</span><br><span class="line">        resp.setContentType(&quot;text/html; charset=UTF-8&quot;);</span><br><span class="line">        //返回数据给客户端</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.write(&quot;你好&quot;);//这里输入中文会无法显示</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h3><ul><li>请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说。我给你一些地址。你去新地址访问。叫请求重定向（因为之前的地址可能已经被废弃）</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202212072215389.png" alt="请求重定向"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Response1 extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        // 请求重定向第一种方案（不推荐）</span><br><span class="line">//        //设置为状态为 302</span><br><span class="line">//        resp.setStatus(302);</span><br><span class="line">//        //  设置响应头 将新的路径发送给客户端</span><br><span class="line">//        resp.setHeader(&quot;Location&quot;, &quot;http://localhost:8888/07_servlet/response2&quot;);</span><br><span class="line"></span><br><span class="line">        // 第二种 （推荐）</span><br><span class="line">        resp.sendRedirect(&quot;http://localhost:8888/07_servlet/response2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>浏览器地址会发生变化</li><li>两次请求</li><li>不共享Request中数据</li><li>不能访问WEB-INF下的资源</li><li>可以访问工程外的资源</li></ul>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记 - web基础五（xml）</title>
      <link href="/undefined/14b7.html"/>
      <url>/undefined/14b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>xml 是可扩展的标记性语言</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>用来保存数据，而且这些数据具有自我描述性</li><li>它还可以做为项目或者模块的配置文件</li><li>还可以做为网络传输数据的格式（现在 JSON 为主）</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><p>文档声明</p></li><li><p>元素（标签）</p></li><li><p>xml 属性</p></li><li><p>xml 注释</p></li><li><p>文本区域（CDATA 区）</p><ul><li>CDATA 语法可以告诉 xml 解析器，我 CDATA 里的文本内容，只是纯文本，不需要 xml 语法解析</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CDATA 格式：&lt;![CDATA[这里可以把你输入的字符原样显示，不会解析 xml]]&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; 是xml文件的声明</span></span><br><span class="line"><span class="comment">        version             是版本号</span></span><br><span class="line"><span class="comment">        encoding=&quot;UTF-8&quot;    是xml文件使用的字符集编码</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span><span class="comment">&lt;!-- books表示多个图书信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">sn</span>=<span class="string">&quot;sn0000001&quot;</span>&gt;</span><span class="comment">&lt;!--book表示一个图书信息 sn属性表示图书序列号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>时间简史<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!--name标签表示书名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>霍金<span class="tag">&lt;/<span class="name">author</span>&gt;</span><span class="comment">&lt;!--author标签表示作者--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>75<span class="tag">&lt;/<span class="name">price</span>&gt;</span><span class="comment">&lt;!--price标签表示价格--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">sn</span>=<span class="string">&quot;sn0000002&quot;</span>&gt;</span><span class="comment">&lt;!--book表示一个图书信息 sn属性表示图书序列号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="comment">&lt;!--name标签表示书名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>吴承恩<span class="tag">&lt;/<span class="name">author</span>&gt;</span><span class="comment">&lt;!--author标签表示作者--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>20<span class="tag">&lt;/<span class="name">price</span>&gt;</span><span class="comment">&lt;!--price标签表示价格--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是注释内容--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul><li><p>名称可以含字母、数字以及其他的字符</p></li><li><p>名称不能以数字或者标点符号开始</p></li><li><p>名称不能包含空格</p></li></ul><h2 id="元素（标签）"><a href="#元素（标签）" class="headerlink" title="元素（标签）"></a>元素（标签）</h2><h3 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式： &lt;标签名 属性=”值” 属性=”值” ...... /&gt;</span><br></pre></td></tr></table></figure><h3 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式：&lt; 标签名 属性=”值” 属性=”值” ......&gt;文本数据或子标签&lt;/标签名&gt;</span><br></pre></td></tr></table></figure><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><ul><li><p>所有 XML 元素都须有关闭标签（也就是闭合）</p></li><li><p>XML 标签对大小写敏感</p></li><li><p>XML 必须正确地嵌套</p></li><li><p>XML 文档必须有根元素</p><ul><li>根元素就是顶级元素，没有父标签的元素而且是唯一一个才行</li></ul></li><li><p>XML 的属性值须加引号</p></li><li><p>XML 中的特殊字符，需使用对应编码，如&gt; 为 &amp;gt ；</p></li></ul><h2 id="dom4j解析技术"><a href="#dom4j解析技术" class="headerlink" title="dom4j解析技术"></a>dom4j解析技术</h2><ul><li>使用 dom4j 就需要到 dom4j 官网下载 dom4j的 jar 包</li></ul><h3 id="编程步骤"><a href="#编程步骤" class="headerlink" title="编程步骤"></a>编程步骤</h3><ol><li><p>先加载 xml 文件创建 Document 对象</p></li><li><p>通过 Document 对象拿到根元素对象</p></li><li><p>通过根元素.elelemts(标签名); 可以返回一个集合，这个集合里放着。所有你指定的标签名的元素对象</p></li><li><p>找到你想要修改、删除的子元素，进行相应在的操作</p></li><li><p>保存到硬盘上</p></li></ol><h3 id="遍历步骤"><a href="#遍历步骤" class="headerlink" title="遍历步骤"></a>遍历步骤</h3><ol><li><p>通过创建 SAXReader 对象。来读取 xml 文件，获取 Document 对象</p></li><li><p>通过 Document 对象。拿到 XML 的根元素对象</p></li><li><p>通过根元素对象。获取所有的 book 标签对象</p></li><li><p>遍历每个 book 标签对象。然后获取到 book 标签对象内的每一个元素，再通过 getText() 方法拿到起始标签和结束标签之间的文本内容</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class Dom4jTest &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 读取books.xml文件生成book类</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void test1() throws Exception &#123;</span><br><span class="line">        //1. 读取配置文件</span><br><span class="line">        SAXReader reader = new SAXReader();</span><br><span class="line">        Document document = reader.read(&quot;src/books.xml&quot;);</span><br><span class="line">        //2. 通过document获取对象根元素</span><br><span class="line">        Element rootElement = document.getRootElement();</span><br><span class="line">        //3. 通过根元素获取book标签对象</span><br><span class="line">        List<span class="tag">&lt;<span class="name">Element</span>&gt;</span> books = rootElement.elements(&quot;book&quot;);</span><br><span class="line">        //4. 遍历，处理每个book标签转换为Book类</span><br><span class="line">        for (Element book :books) &#123;</span><br><span class="line">            // asXML() 是把标签对象转换为标签字符串</span><br><span class="line">//            System.out.println(book.asXML());</span><br><span class="line">            Element nameElement = book.element(&quot;name&quot;);</span><br><span class="line">//            System.out.println(nameElement.asXML());</span><br><span class="line">            // getText() 可以获取标签中的文本内容</span><br><span class="line">            String nameText = nameElement.getText();</span><br><span class="line">//            System.out.println(nameText);</span><br><span class="line">            // 直接获取指定标签的文本内容</span><br><span class="line">            String priceText = book.elementText(&quot;price&quot;);</span><br><span class="line">//            System.out.println(priceText);</span><br><span class="line">            String authorText = book.elementText(&quot;author&quot;);</span><br><span class="line">            // attributeValue() 获取属性值得内容</span><br><span class="line">            String snValue = book.attributeValue(&quot;sn&quot;);</span><br><span class="line">            System.out.println(new Book(snValue,nameText,authorText,new BigDecimal(priceText)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记 - web基础四（jQuery）</title>
      <link href="/undefined/1d1.html"/>
      <url>/undefined/1d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>是 JavaScript 和查询（Query），它就是辅助 JavaScript 开发的 js 类库</p></li><li><p>它实现了很多浏览器的兼容问题</p></li></ul><h2 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数"></a>核心函数</h2><ul><li>$ 是 jQuery 的核心函数，$()就是调用$这个函数</li></ul><h3 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h3><h4 id="函数"><a href="#函数" class="headerlink" title="$(函数)"></a>$(函数)</h4><ul><li>传入参数为 [ 函数 ] 时：表示页面加载完成之后。相当于 window.onload = function(){}</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">alert($);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="HTML-字符串"><a href="#HTML-字符串" class="headerlink" title="$(HTML 字符串 )"></a>$(HTML 字符串 )</h4><ul><li>传入参数为 [ HTML 字符串 ] 时：会对我们创建这个 html 标签对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\n&quot; +</span><br><span class="line">            &quot;        <span class="tag">&lt;<span class="name">span</span>&gt;</span>div-span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span>\n&quot; +</span><br><span class="line">            &quot;        <span class="tag">&lt;<span class="name">span</span>&gt;</span>div-span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span>\n&quot; +</span><br><span class="line">            &quot;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;).appendTo(&quot;body&quot;);</span><br></pre></td></tr></table></figure><h4 id="选择器字符串"><a href="#选择器字符串" class="headerlink" title="$(选择器字符串)"></a>$(选择器字符串)</h4><h5 id="“-id属性值”"><a href="#“-id属性值”" class="headerlink" title="$(“#id属性值”)"></a>$(“#id属性值”)</h5><ul><li>id 选择器，根据 id 查询标签对象</li></ul><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>这里的<code>#</code>表示id</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#username&quot;).click(function()&#123;&#125;);</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="“标签名”"><a href="#“标签名”" class="headerlink" title="$(“标签名”)"></a>$(“标签名”)</h5><ul><li>标签名选择器，根据指定的标签名查询标签对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).click(function()&#123;&#125;);</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="“-class属性值”"><a href="#“-class属性值”" class="headerlink" title="$(“.class属性值”)"></a>$(“.class属性值”)</h5><ul><li>类型选择器，可以根据 class 属性查询标签对象</li></ul><h4 id="dom对象"><a href="#dom对象" class="headerlink" title="$(dom对象)"></a>$(dom对象)</h4><ul><li>将dom 对象转换为 jQuery 对象</li></ul><h2 id="jQuery对象和dom对象区分"><a href="#jQuery对象和dom对象区分" class="headerlink" title="jQuery对象和dom对象区分"></a>jQuery对象和dom对象区分</h2><h3 id="dom对象-1"><a href="#dom对象-1" class="headerlink" title="dom对象"></a>dom对象</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>dom对象通过alert显示的效果为：<code>[object HTML 标签名Element]</code></p></div><ul><li>通过 getElementById()查询出来的标签对象是 Dom 对象</li><li>通过 getElementsByName()查询出来的标签对象是 Dom 对象</li><li>通过 getElementsByTagName()查询出来的标签对象是 Dom 对象</li><li>通过 createElement() 方法创建的对象，是 Dom 对象</li></ul><h3 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>jQuery对象通过alert显示的效果为：<code>[object Object]</code></p></div><ul><li>通过 JQuery 提供的 API 创建的对象，是 JQuery 对象</li><li>通过 JQuery 包装的 Dom 对象，也是 JQuery 对象</li><li><p>通过 JQuery 提供的 API 查询到的对象，是 JQuery 对象</p></li><li><p><strong>jQuery 对象是 dom 对象的数组 + jQuery 提供的一系列功能函数</strong></p></li></ul><h3 id="互转"><a href="#互转" class="headerlink" title="互转"></a>互转</h3><h4 id="dom转jQuery对象"><a href="#dom转jQuery对象" class="headerlink" title="dom转jQuery对象"></a>dom转jQuery对象</h4><ul><li>先有 DOM 对象</li><li>$( DOM 对象 ) 就可以转换成为 jQuery 对象</li></ul><h4 id="jQuery转dom对象"><a href="#jQuery转dom对象" class="headerlink" title="jQuery转dom对象"></a>jQuery转dom对象</h4><ul><li>先有 jQuery 对象</li><li>jQuery 对象[下标]取出相应的 DOM 对象</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202212042220237.png" alt="jQuery和dom对象互转"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">// jQuery对象相当于数组</span><br><span class="line">// dom对象相当于里面的元素</span><br><span class="line">//dom对象转换为jquery对象</span><br><span class="line">// 通过核心函数</span><br><span class="line">var btnObj = document.getElementById(&quot;dom2dom&quot;);</span><br><span class="line">alert($(btnObj));</span><br><span class="line"></span><br><span class="line">//jQuery对象转换为dom对象</span><br><span class="line">// 通过下标获取</span><br><span class="line">var $button = $(&quot;button&quot;);</span><br><span class="line">alert($button[0]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><h4 id="ID-选择器"><a href="#ID-选择器" class="headerlink" title="#ID 选择器"></a>#ID 选择器</h4><ul><li>根据 id 查找标签对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#btn1&quot;).click(function () &#123;</span><br><span class="line">// alert( $(&quot;#one&quot;));</span><br><span class="line">// css 方法可设置和查看样式</span><br><span class="line">$(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="class-选择器"><a href="#class-选择器" class="headerlink" title=".class 选择器"></a>.class 选择器</h4><ul><li>根据 class 查找标签对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//2.选择 class 为 mini 的所有元素</span><br><span class="line">$(&quot;#btn2&quot;).click(function () &#123;</span><br><span class="line">$(&quot;.mini&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="element-选择器"><a href="#element-选择器" class="headerlink" title="element 选择器"></a>element 选择器</h4><ul><li>根据标签名查找标签对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//3.选择 元素名是 div 的所有元素</span><br><span class="line">$(&quot;#btn3&quot;).click(function () &#123;</span><br><span class="line">$(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="选择器"><a href="#选择器" class="headerlink" title="* 选择器"></a>* 选择器</h4><ul><li>表示任意的，所有的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//4.选择所有的元素</span><br><span class="line">$(&quot;#btn4&quot;).click(function () &#123;</span><br><span class="line">$(&quot;*&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="selector1，selector2-组合选择器"><a href="#selector1，selector2-组合选择器" class="headerlink" title="selector1，selector2 组合选择器"></a>selector1，selector2 组合选择器</h4><ul><li>合并选择器 1，选择器 2 的结果并返回</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//5.选择所有的 span 元素和id为two的元素</span><br><span class="line">$(&quot;#btn5&quot;).click(function () &#123;</span><br><span class="line">$(&quot;span,#two&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><h4 id="ancestor-descendant-后代选择器"><a href="#ancestor-descendant-后代选择器" class="headerlink" title="ancestor descendant 后代选择器"></a>ancestor descendant 后代选择器</h4><ul><li>在给定的祖先元素下匹配所有的后代元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.选择 body 内的所有 div 元素 </span><br><span class="line">$(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">$(&quot;body div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="parent-gt-child-子元素选择器"><a href="#parent-gt-child-子元素选择器" class="headerlink" title="parent &gt; child 子元素选择器"></a>parent &gt; child 子元素选择器</h4><ul><li>在给定的父元素下匹配所有的子元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//2.在 body 内, 选择div子元素  </span><br><span class="line">$(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">$(&quot;body &gt; div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="prev-next-相邻元素选择器"><a href="#prev-next-相邻元素选择器" class="headerlink" title="prev + next 相邻元素选择器"></a>prev + next 相邻元素选择器</h4><ul><li>匹配所有紧接在 prev 元素后的 next 元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//3.选择 id 为 one 的下一个 div 元素 </span><br><span class="line">$(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#two+div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="prev-sibings-之后的兄弟元素选择器"><a href="#prev-sibings-之后的兄弟元素选择器" class="headerlink" title="prev ~ sibings 之后的兄弟元素选择器"></a>prev ~ sibings 之后的兄弟元素选择器</h4><ul><li>匹配 prev 元素之后的所有 siblings 元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//4.选择 id 为 two 的元素后面的所有 div 兄弟元素</span><br><span class="line">$(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#two~div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><h4 id="基本过滤器"><a href="#基本过滤器" class="headerlink" title="基本过滤器"></a>基本过滤器</h4><h5 id="first"><a href="#first" class="headerlink" title=":first"></a>:first</h5><ul><li>获取第一个元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.选择第一个 div 元素  </span><br><span class="line">$(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:first&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="last"><a href="#last" class="headerlink" title=":last"></a>:last</h5><ul><li>获取最后个元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//2.选择最后一个 div 元素</span><br><span class="line">$(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:last&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="not-selector"><a href="#not-selector" class="headerlink" title=":not(selector)"></a>:not(selector)</h5><ul><li>去除所有与给定选择器匹配的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//3.选择class不为 one 的所有 div 元素</span><br><span class="line">$(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:not(.one)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="even"><a href="#even" class="headerlink" title=":even"></a>:even</h5><ul><li>匹配所有索引值为偶数的元素，从 0 开始计数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//4.选择索引值为偶数的 div 元素</span><br><span class="line">$(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:even&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="odd"><a href="#odd" class="headerlink" title=":odd"></a>:odd</h5><ul><li>匹配所有索引值为奇数的元素，从 0 开始计数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//5.选择索引值为奇数的 div 元素</span><br><span class="line">$(&quot;#btn5&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:odd&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="eq-index"><a href="#eq-index" class="headerlink" title=":eq(index)"></a>:eq(index)</h5><ul><li>匹配一个给定索引值的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//6.选择索引值为等于 3 的 div 元素</span><br><span class="line">$(&quot;#btn7&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:eq(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="gt-index"><a href="#gt-index" class="headerlink" title=":gt(index)"></a>:gt(index)</h5><ul><li>匹配所有大于给定索引值的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//7.选择索引值为大于 3 的 div 元素</span><br><span class="line">$(&quot;#btn6&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:gt(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="lt-index"><a href="#lt-index" class="headerlink" title=":lt(index)"></a>:lt(index)</h5><ul><li>匹配所有小于给定索引值的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//8.选择索引值为小于 3 的 div 元素</span><br><span class="line">$(&quot;#btn8&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:lt(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="header"><a href="#header" class="headerlink" title=":header"></a>:header</h5><ul><li>匹配如 h1, h2, h3 之类的标题元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//9.选择所有的标题元素</span><br><span class="line">$(&quot;#btn9&quot;).click(function()&#123;</span><br><span class="line">$(&quot;:header&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="animated"><a href="#animated" class="headerlink" title=":animated"></a>:animated</h5><ul><li>匹配所有正在执行动画效果的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//10.选择当前正在执行动画的所有元素</span><br><span class="line">$(&quot;#btn10&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:animated&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//11.选择没有执行动画的最后一个元素</span><br><span class="line">$(&quot;#btn11&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:not(:animated):last&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h3><h4 id="contains-text"><a href="#contains-text" class="headerlink" title=":contains(text)"></a>:contains(text)</h4><ul><li>匹配包含给定文本的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.选择 含有文本 &#x27;di&#x27; 的 div 元素</span><br><span class="line">$(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:contains(&#x27;di&#x27;)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="empty"><a href="#empty" class="headerlink" title=":empty"></a>:empty</h4><ul><li>匹配所有不包含子元素或者文本的空元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//2.选择不包含子元素(或者文本元素) 的 div 空元素</span><br><span class="line">$(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:empty&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="parent"><a href="#parent" class="headerlink" title=":parent"></a>:parent</h4><ul><li>匹配含有子元素或者文本的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//3.选择含有 class 为 mini 元素的 div 元素</span><br><span class="line">$(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:has(.mini)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="has-selector"><a href="#has-selector" class="headerlink" title=":has(selector)"></a>:has(selector)</h4><ul><li>匹配含有选择器所匹配的元素的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//4.选择含有子元素(或者文本元素)的div元素</span><br><span class="line">$(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div:parent&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="属性过滤器"><a href="#属性过滤器" class="headerlink" title="属性过滤器"></a>属性过滤器</h3><h4 id="attribute"><a href="#attribute" class="headerlink" title="[attribute]"></a>[attribute]</h4><ul><li>匹配包含给定属性的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.选取含有 属性title 的div元素</span><br><span class="line">$(&quot;#btn1&quot;).click(function() &#123;</span><br><span class="line">$(&quot;div[title]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="attribute-value"><a href="#attribute-value" class="headerlink" title="[attribute=value]"></a>[attribute=value]</h4><ul><li>匹配给定的属性是某个特定值的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//2.选取 属性title值等于&#x27;test&#x27;的div元素</span><br><span class="line">$(&quot;#btn2&quot;).click(function() &#123;</span><br><span class="line">$(&quot;div[title=&#x27;test&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="attribute-value-1"><a href="#attribute-value-1" class="headerlink" title="[attribute!=value]"></a>[attribute!=value]</h4><ul><li>匹配所有不含有指定的属性，或者属性不等于特定值的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//3.选取 属性title值不等于&#x27;test&#x27;的div元素(*没有属性title的也将被选中)</span><br><span class="line">$(&quot;#btn3&quot;).click(function() &#123;</span><br><span class="line">$(&quot;div[title!=&#x27;test&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="attribute-value-2"><a href="#attribute-value-2" class="headerlink" title="[attribute^=value]"></a>[attribute^=value]</h4><ul><li>匹配给定的属性是以某些值开始的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//4.选取 属性title值 以&#x27;te&#x27;开始 的div元素</span><br><span class="line">$(&quot;#btn4&quot;).click(function() &#123;</span><br><span class="line">$(&quot;div[title^=&#x27;te&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="attribute-value-3"><a href="#attribute-value-3" class="headerlink" title="[attribute$=value]"></a>[attribute$=value]</h4><ul><li>匹配给定的属性是以某些值结尾的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//5.选取 属性title值 以&#x27;est&#x27;结束 的div元素</span><br><span class="line">$(&quot;#btn5&quot;).click(function() &#123;</span><br><span class="line">$(&quot;div[title$=&#x27;est&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="attribute-value-4"><a href="#attribute-value-4" class="headerlink" title="[attribute*=value]"></a>[attribute*=value]</h4><ul><li>匹配给定的属性是以包含某些值的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//6.选取 属性title值 含有&#x27;es&#x27;的div元素</span><br><span class="line">$(&quot;#btn6&quot;).click(function() &#123;</span><br><span class="line">$(&quot;div[title*=&#x27;es&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="attrSel1-attrSel2-attrSelN"><a href="#attrSel1-attrSel2-attrSelN" class="headerlink" title="[attrSel1] [attrSel2] [attrSelN]"></a>[attrSel1] [attrSel2] [attrSelN]</h4><ul><li>复合属性选择器，需要同时满足多个条件时使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//7.首先选取有属性id的div元素，然后在结果中 选取属性title值 含有&#x27;es&#x27;的 div 元素</span><br><span class="line">$(&quot;#btn7&quot;).click(function() &#123;</span><br><span class="line">$(&quot;div[id][title*=&#x27;es&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">//8.选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素</span><br><span class="line">$(&quot;#btn8&quot;).click(function() &#123;</span><br><span class="line">$(&quot;div[title!=&#x27;test&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="表单对象属性过滤器"><a href="#表单对象属性过滤器" class="headerlink" title="表单对象属性过滤器"></a>表单对象属性过滤器</h3><h4 id="enabled"><a href="#enabled" class="headerlink" title=":enabled"></a>:enabled</h4><ul><li>匹配所有可用元素</li></ul><h4 id="disabled"><a href="#disabled" class="headerlink" title=":disabled"></a>:disabled</h4><ul><li>匹配所有不可用元素</li></ul><h4 id="checked"><a href="#checked" class="headerlink" title=":checked"></a>:checked</h4><ul><li>匹配所有选中的单选，复选，和下拉列表中选中的 option 标签对象</li></ul><h4 id="selected"><a href="#selected" class="headerlink" title=":selected"></a>:selected</h4><ul><li>匹配所有选中的 option</li></ul><h3 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器"></a>表单过滤器</h3><h4 id="input"><a href="#input" class="headerlink" title=":input"></a>:input</h4><ul><li>匹配所有 input, textarea, select 和 button 元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//1.对表单内 可用input 赋值操作</span><br><span class="line">$(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">    // val()方法是jQuery中提供用来获取value属性值</span><br><span class="line">    $(&quot;:text:enabled&quot;).val(&quot;New Value&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="text"><a href="#text" class="headerlink" title=":text"></a>:text</h4><ul><li>匹配所有 文本输入框</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//2.对表单内 不可用input 赋值操作</span><br><span class="line">$(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">$(&quot;:text:disabled&quot;).val(&quot;New Value Too&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="password"><a href="#password" class="headerlink" title=":password"></a>:password</h4><ul><li>匹配所有的密码输入框</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//3.获取多选框选中的个数  使用size()方法获取选取到的元素集合的元素个数</span><br><span class="line">$(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">alert($(&quot;:checkbox:checked&quot;).length);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="radio"><a href="#radio" class="headerlink" title=":radio"></a>:radio</h4><ul><li>匹配所有的单选框</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//4.获取多选框，每个选中的value值</span><br><span class="line">$(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">var $checkboxes = $(&quot;:checkbox:checked&quot;);</span><br><span class="line">    // each() 是jQuery中提供的遍历方法</span><br><span class="line">    // this指当前对象</span><br><span class="line">    $checkboxes.each(function () &#123;</span><br><span class="line">    alert(this.value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="checkbox"><a href="#checkbox" class="headerlink" title=":checkbox"></a>:checkbox</h4><ul><li>匹配所有的复选框</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//5.获取下拉框选中的内容  </span><br><span class="line">$(&quot;#btn5&quot;).click(function()&#123;</span><br><span class="line">    var $options = $(&quot;select option:selected&quot;);</span><br><span class="line">    $options.each(function () &#123;</span><br><span class="line">    alert(this.innerHTML);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="submit"><a href="#submit" class="headerlink" title=":submit"></a>:submit</h4><ul><li>匹配所有提交按钮</li></ul><h4 id="image"><a href="#image" class="headerlink" title=":image"></a>:image</h4><ul><li>匹配所有 img 标签</li></ul><h4 id="reset"><a href="#reset" class="headerlink" title=":reset"></a>:reset</h4><ul><li>匹配所有重置按钮</li></ul><h4 id="button"><a href="#button" class="headerlink" title=":button"></a>:button</h4><ul><li>匹配所有 input type=button &lt; button &gt; 按钮</li></ul><h4 id="file"><a href="#file" class="headerlink" title=":file"></a>:file</h4><ul><li>匹配所有 input type=file 文件上传</li></ul><h4 id="hidden"><a href="#hidden" class="headerlink" title=":hidden"></a>:hidden</h4><ul><li>匹配所有不可见元素 display:none 或 input type=hidden</li></ul><h3 id="元素筛选"><a href="#元素筛选" class="headerlink" title="元素筛选"></a>元素筛选</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">eq() 获取给定索引的元素 功能跟 :eq() 一样</span><br><span class="line">first() 获取第一个元素 功能跟 :first 一样</span><br><span class="line">last() 获取最后一个元素 功能跟 :last 一样</span><br><span class="line">filter(exp) 留下匹配的元素</span><br><span class="line">is(exp) 判断是否匹配给定的选择器，只要有一个匹配就返回，true</span><br><span class="line">has(exp) 返回包含有匹配选择器的元素的元素 功能跟 :has 一样</span><br><span class="line">not(exp) 删除匹配选择器的元素 功能跟 :not 一样</span><br><span class="line">children(exp) 返回匹配给定选择器的子元素 功能跟 parent&gt;child 一样</span><br><span class="line">find(exp) 返回匹配给定选择器的后代元素 功能跟 ancestor descendant 一样</span><br><span class="line">next() 返回当前元素的下一个兄弟元素 功能跟 prev + next 功能一样</span><br><span class="line">nextAll() 返回当前元素后面所有的兄弟元素 功能跟 prev ~ siblings 功能一样</span><br><span class="line">nextUntil() 返回当前元素到指定匹配的元素为止的后面元素</span><br><span class="line">parent() 返回父元素</span><br><span class="line">prev(exp) 返回当前元素的上一个兄弟元素</span><br><span class="line">prevAll() 返回当前元素前面所有的兄弟元素</span><br><span class="line">prevUnit(exp) 返回当前元素到指定匹配的元素为止的前面元素</span><br><span class="line">siblings(exp) 返回所有兄弟元素</span><br><span class="line">add() 把 add 匹配的选择器的元素添加到当前 jquery 对象中</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">//(1)eq()  选择索引值为等于 3 的 div 元素</span><br><span class="line">$(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">$(&quot;div&quot;).eq(3).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(2)first()选择第一个 div 元素</span><br><span class="line">$(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">//first()   选取第一个元素</span><br><span class="line">$(&quot;div&quot;).first().css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(3)last()选择最后一个 div 元素</span><br><span class="line">$(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">//last()  选取最后一个元素</span><br><span class="line">$(&quot;div&quot;).last().css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(4)filter()在div中选择索引为偶数的</span><br><span class="line">$(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">//filter()  过滤   传入的是选择器字符串</span><br><span class="line">$(&quot;div&quot;).filter(&quot;:even&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(5)is()判断#one是否为:empty或:parent</span><br><span class="line">//is用来检测jq对象是否符合指定的选择器</span><br><span class="line">$(&quot;#btn5&quot;).click(function()&#123;</span><br><span class="line">alert($(&quot;#one&quot;).is(&quot;empty&quot;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(6)has()选择div中包含.mini的</span><br><span class="line">$(&quot;#btn6&quot;).click(function()&#123;</span><br><span class="line">//has(selector)  选择器字符串    是否包含selector</span><br><span class="line">$(&quot;div&quot;).has(&quot;.mini&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(7)not()选择div中class不为one的</span><br><span class="line">$(&quot;#btn7&quot;).click(function()&#123;</span><br><span class="line">//not(selector)  选择不是selector的元素</span><br><span class="line">$(&quot;div&quot;).not(&quot;.one&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(8)children()在body中选择所有class为one的div子元素</span><br><span class="line">$(&quot;#btn8&quot;).click(function()&#123;</span><br><span class="line">//children()  选出所有的子元素</span><br><span class="line">$(&quot;body&quot;).children(&quot;div.one&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(9)find()在body中选择所有class为mini的div元素</span><br><span class="line">$(&quot;#btn9&quot;).click(function()&#123;</span><br><span class="line">//find()  选出所有的后代元素</span><br><span class="line">$(&quot;body&quot;).find(&quot;div.mini&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(10)next() #one的下一个div</span><br><span class="line">$(&quot;#btn10&quot;).click(function()&#123;</span><br><span class="line">//next()  选择下一个兄弟元素</span><br><span class="line">$(&quot;#one&quot;).next().css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(11)nextAll() #one后面所有的span元素</span><br><span class="line">$(&quot;#btn11&quot;).click(function()&#123;</span><br><span class="line">//nextAll()   选出后面所有的元素</span><br><span class="line">$(&quot;#one&quot;).nextAll(&quot;span&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(12)nextUntil() #one和span之间的元素</span><br><span class="line">$(&quot;#btn12&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#one&quot;).nextUntil(&quot;span&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(13)parent() .mini的父元素</span><br><span class="line">$(&quot;#btn13&quot;).click(function()&#123;</span><br><span class="line">$(&quot;.mini&quot;).parent().css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(14)prev() #two的上一个div</span><br><span class="line">$(&quot;#btn14&quot;).click(function()&#123;</span><br><span class="line">//prev()  </span><br><span class="line">$(&quot;#two&quot;).prev(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(15)prevAll() span前面所有的div</span><br><span class="line">$(&quot;#btn15&quot;).click(function()&#123;</span><br><span class="line">//prevAll()   选出前面所有的元素</span><br><span class="line">$(&quot;span&quot;).prevAll(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(16)prevUntil() span向前直到#one的元素</span><br><span class="line">$(&quot;#btn16&quot;).click(function()&#123;</span><br><span class="line">//prevUntil(exp)   找到之前所有的兄弟元素直到找到exp停止</span><br><span class="line">$(&quot;span&quot;).prevUntil(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(17)siblings() #two的所有兄弟元素</span><br><span class="line">$(&quot;#btn17&quot;).click(function()&#123;</span><br><span class="line">//siblings()    找到所有的兄弟元素，包括前面的和后面的</span><br><span class="line">$(&quot;#two&quot;).siblings(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//(18)add()选择所有的 span 元素和id为two的元素</span><br><span class="line">$(&quot;#btn18&quot;).click(function()&#123;</span><br><span class="line">//   $(&quot;span,#two,.mini,#one&quot;)</span><br><span class="line">$(&quot;span&quot;).add(&quot;#two&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery的属性操作"><a href="#jQuery的属性操作" class="headerlink" title="jQuery的属性操作"></a>jQuery的属性操作</h2><h3 id="html"><a href="#html" class="headerlink" title="html()"></a>html()</h3><ul><li>它可以设置和获取起始标签和结束标签中的内容。跟 dom 属性 innerHTML 一样</li></ul><h3 id="text-1"><a href="#text-1" class="headerlink" title="text()"></a>text()</h3><ul><li>它可以设置和获取起始标签和结束标签中的文本。 跟 dom 属性 innerText 一样</li></ul><h3 id="val"><a href="#val" class="headerlink" title="val()"></a>val()</h3><ul><li>它可以设置和获取表单项的 value 属性值。 跟 dom 属性 value 一样</li></ul><h3 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h3><ul><li><p>可以设置和获取属性的值，不推荐操作 checked、readOnly、selected、disabled 等等</p></li><li><p>还可以操作非标准的属性。比如自定义属性：abc,bbj</p></li></ul><h3 id="prop"><a href="#prop" class="headerlink" title="prop()"></a>prop()</h3><ul><li>可以设置和获取属性的值,只推荐操作 checked、readOnly、selected、disabled 等等</li></ul><h2 id="Dom的增删改查"><a href="#Dom的增删改查" class="headerlink" title="Dom的增删改查"></a>Dom的增删改查</h2><h3 id="内部插入"><a href="#内部插入" class="headerlink" title="内部插入"></a>内部插入</h3><h4 id="appendTo"><a href="#appendTo" class="headerlink" title="appendTo()"></a>appendTo()</h4><ul><li>a.appendTo(b) ：把 a 插入到 b 子元素末尾，成为最后一个子元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 第一个按钮 【选中添加到右边】</span><br><span class="line">$(&quot;button:eq(0)&quot;).click(function () &#123;</span><br><span class="line">$(&quot;select:eq(0) option:selected&quot;).appendTo($(&quot;select:eq(1)&quot;));</span><br><span class="line">&#125;);</span><br><span class="line">// 第二个按钮 【全部添加到右边】</span><br><span class="line">$(&quot;button:eq(1)&quot;).click(function () &#123;</span><br><span class="line">$(&quot;select:eq(0) option&quot;).appendTo($(&quot;select:eq(1)&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="prependTo"><a href="#prependTo" class="headerlink" title="prependTo()"></a>prependTo()</h4><ul><li>a.prependTo(b)：把 a 插到 b 所有子元素前面，成为第一个子元素</li></ul><h3 id="外部插入"><a href="#外部插入" class="headerlink" title="外部插入"></a>外部插入</h3><h4 id="insertAfter"><a href="#insertAfter" class="headerlink" title="insertAfter()"></a>insertAfter()</h4><ul><li>a.insertAfter(b) ：得到 ba</li></ul><h4 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore()"></a>insertBefore()</h4><ul><li>a.insertBefore(b) ：得到 ab</li></ul><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><h4 id="replaceWith"><a href="#replaceWith" class="headerlink" title="replaceWith()"></a>replaceWith()</h4><ul><li>a.replaceWith(b) ：用 b 替换掉 a</li></ul><h4 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll()"></a>replaceAll()</h4><ul><li>a.replaceAll(b) ：用 a 替换掉所有 b</li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><ul><li>a.remove()：删除 a 标签</li></ul><h4 id="empty-1"><a href="#empty-1" class="headerlink" title="empty()"></a>empty()</h4><ul><li>a.empty()：清空 a 标签里的内容</li></ul><h2 id="css样式操作"><a href="#css样式操作" class="headerlink" title="css样式操作"></a>css样式操作</h2><h3 id="addClass"><a href="#addClass" class="headerlink" title="addClass()"></a>addClass()</h3><ul><li>添加样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var $divEle = $(&#x27;div:first&#x27;);</span><br><span class="line">$(&#x27;#btn01&#x27;).click(function()&#123;</span><br><span class="line">//addClass() - 向被选元素添加一个或多个类</span><br><span class="line">$divEle.addClass(&quot;redDiv blackDiv&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass()"></a>removeClass()</h3><ul><li>删除样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;#btn02&#x27;).click(function()&#123;</span><br><span class="line">//removeClass() - 从被选元素删除一个或多个类 </span><br><span class="line">$divEle.removeClass()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass()"></a>toggleClass()</h3><ul><li>有就删除，没有就添加样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;#btn03&#x27;).click(function()&#123;</span><br><span class="line">//toggleClass() - 对被选元素进行添加/删除类的切换操作 </span><br><span class="line">//切换就是如果具有该类那么删除，如果没有那么添加上</span><br><span class="line">$divEle.toggleClass(&quot;redDiv&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="offset"><a href="#offset" class="headerlink" title="offset()"></a>offset()</h3><ul><li>获取和设置元素的坐标。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;#btn04&#x27;).click(function()&#123;</span><br><span class="line">//offset() - 返回第一个匹配元素相对于文档的位置。</span><br><span class="line">var os = $divEle.offset();</span><br><span class="line">//注意通过offset获取到的是一个对象，这个对象有两个属性top表示顶边距，left表示左边距</span><br><span class="line">alert(&quot;顶边距：&quot;+os.top+&quot; 左边距：&quot;+os.left);</span><br><span class="line"></span><br><span class="line">//调用offset设置元素位置时，也需要传递一个js对象，对象有两个属性top和left</span><br><span class="line">//offset(&#123; top: 10, left: 30 &#125;);</span><br><span class="line">$divEle.offset(&#123;</span><br><span class="line">top:50,</span><br><span class="line">left:60</span><br><span class="line">&#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h2><h3 id="基本动画"><a href="#基本动画" class="headerlink" title="基本动画"></a>基本动画</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>1、第一个参数是动画 执行的时长，以毫秒为单位</p><p>2、第二个参数是动画的回调函数 (动画完成后自动调用的函数)</p></div><h4 id="show"><a href="#show" class="headerlink" title="show()"></a>show()</h4><ul><li>将隐藏的元素显示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//显示   show()</span><br><span class="line">$(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).show(1000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="hide"><a href="#hide" class="headerlink" title="hide()"></a>hide()</h4><ul><li>将可见的元素隐藏</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//隐藏  hide()</span><br><span class="line">$(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).hide(1000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="toggle"><a href="#toggle" class="headerlink" title="toggle()"></a>toggle()</h4><ul><li>可见就隐藏，不可见就显示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//切换   toggle()</span><br><span class="line">$(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).toggle(1000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="淡入淡出动画"><a href="#淡入淡出动画" class="headerlink" title="淡入淡出动画"></a>淡入淡出动画</h3><h4 id="fadeIn"><a href="#fadeIn" class="headerlink" title="fadeIn()"></a>fadeIn()</h4><ul><li>淡入（慢慢可见）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//淡入   fadeIn()</span><br><span class="line">$(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).fadeIn(500);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="fadeOut"><a href="#fadeOut" class="headerlink" title="fadeOut()"></a>fadeOut()</h4><ul><li>淡出（慢慢消失）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//淡出  fadeOut()</span><br><span class="line">$(&quot;#btn5&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).fadeOut(500);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="fadeTo"><a href="#fadeTo" class="headerlink" title="fadeTo()"></a>fadeTo()</h4><ul><li>在指定时长内慢慢的将透明度修改到指定的值。0 透明，1 完成可见，0.5 半透明</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//淡化到  fadeTo()</span><br><span class="line">$(&quot;#btn6&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).fadeTo(&quot;slow&quot;,Math.random());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="fadeToggle"><a href="#fadeToggle" class="headerlink" title="fadeToggle()"></a>fadeToggle()</h4><ul><li>淡入/淡出 切换</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//淡化切换  fadeToggle()</span><br><span class="line">$(&quot;#btn7&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).fadeToggle(&quot;slow&quot;,&quot;linear&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery事件操作"><a href="#jQuery事件操作" class="headerlink" title="jQuery事件操作"></a>jQuery事件操作</h2><h3 id="function-和window-onload-function-的区别"><a href="#function-和window-onload-function-的区别" class="headerlink" title="$( function(){} );和window.onload = function(){}的区别"></a>$( function(){} );和window.onload = function(){}的区别</h3><h4 id="什么时候触发"><a href="#什么时候触发" class="headerlink" title="什么时候触发"></a>什么时候触发</h4><ol><li><p>jQuery 的页面加载完成之后是浏览器的内核解析完页面的标签创建好 DOM 对象之后就会马上执行</p></li><li><p>原生 js 的页面加载完成之后，除了要等浏览器内核解析完标签创建好 DOM 对象，还要等标签显示时需要的内容加载完成</p></li></ol><h4 id="触发顺序"><a href="#触发顺序" class="headerlink" title="触发顺序"></a>触发顺序</h4><ol><li><p>jQuery 页面加载完成之后先执行</p></li><li><p>原生 js 的页面加载完成之后</p></li></ol><h4 id="执行次数"><a href="#执行次数" class="headerlink" title="执行次数"></a>执行次数</h4><ol><li><p>原生 js 的页面加载完成之后，只会执行最后一次的赋值函数</p></li><li><p>jQuery 的页面加载完成之后是全部把注册的 function 函数，依次顺序全部执行</p></li></ol><h3 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">click() 它可以绑定单击事件，以及触发单击事件</span><br><span class="line">mouseover() 鼠标移入事件</span><br><span class="line">mouseout() 鼠标移出事件</span><br><span class="line">mousemover() 鼠标移动事件</span><br><span class="line">bind() 可以给元素一次性绑定一个或多个事件。</span><br><span class="line">one() 使用上跟 bind 一样。但是 one 方法绑定的事件只会响应一次。</span><br><span class="line">unbind() 跟 bind 方法相反的操作，解除事件的绑定</span><br><span class="line">live() 也是用来绑定事件。它可以用来绑定选择器匹配的所有元素的事件。哪怕这个元素是后面动态创建出来的也有效</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 使用 bind 同时对多个事件绑定同一个函数</span><br><span class="line">$(&quot;#areaDiv&quot;).bind(&quot;mouseover mouseout&quot;,function (event) &#123;</span><br><span class="line">if (event.type == &quot;mouseover&quot;) &#123;</span><br><span class="line">console.log(&quot;鼠标移入&quot;);</span><br><span class="line">&#125; else if (event.type == &quot;mouseout&quot;) &#123;</span><br><span class="line">console.log(&quot;鼠标移出&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><ul><li>在给元素绑定事件的时候，在事件的 function( event ) 参数列表中添加一个参数，这个参数名，这个 event 就是 javascript 传递参事件处理函数的事件对象</li></ul><h4 id="原生获取事件对象"><a href="#原生获取事件对象" class="headerlink" title="原生获取事件对象"></a>原生获取事件对象</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function () &#123;</span><br><span class="line">document.getElementById(&quot;areaDiv&quot;).onclick = function (event) &#123;</span><br><span class="line">console.log(event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jQuery获取事件对象"><a href="#jQuery获取事件对象" class="headerlink" title="jQuery获取事件对象"></a>jQuery获取事件对象</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">$(&quot;#areaDiv&quot;).click(function (event) &#123;</span><br><span class="line">console.log(event);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记 - web基础三（javaScript）</title>
      <link href="/undefined/fe6c.html"/>
      <url>/undefined/fe6c.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>作用：主要是完成页面的数据验证</p></li><li><p>JS 是弱类型，Java 是强类型</p></li><li>特点：<ul><li>交互性（它可以做的就是信息的动态交互）</li><li>安全性（不允许直接访问本地硬盘）</li><li>跨平台性（只要是可以解释 JS 的浏览器都可以执行，和平台无关）</li></ul></li></ul><h2 id="javaScript与html代码结合使用方式"><a href="#javaScript与html代码结合使用方式" class="headerlink" title="javaScript与html代码结合使用方式"></a>javaScript与html代码结合使用方式</h2><h3 id="在head或body标签中"><a href="#在head或body标签中" class="headerlink" title="在head或body标签中"></a>在head或body标签中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//alert是javaScript语言提供的一个警告框函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//它可以接收任意类型的参数，这个参数就是警告框的提示信息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;hello javaScrip&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用script标签引入单独javaScript文件"><a href="#使用script标签引入单独javaScript文件" class="headerlink" title="使用script标签引入单独javaScript文件"></a>使用script标签引入单独javaScript文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用scrip引入外部脚本</span></span><br><span class="line"><span class="comment">            src属性用于引入js文件路径（可以是相对路径或者绝对路径）</span></span><br><span class="line"><span class="comment">        scrip标签可以用来定义js代码 也可以引入js文件</span></span><br><span class="line"><span class="comment">        但是两个功能不能同时使用，需要同时使用新建一个标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;第二次弹窗&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="javaScript变量"><a href="#javaScript变量" class="headerlink" title="javaScript变量"></a>javaScript变量</h2><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>在<code>javaScript</code>语言中，所有的变量都可以作为一个boolean类型的变量去使用。<span class="p red">0 、null、 undefined、””(空串) 都认为是 false</span></p></div><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数值类型： number</span><br><span class="line">字符串类型： string</span><br><span class="line">对象类型： object</span><br><span class="line">布尔类型： boolean</span><br><span class="line">函数类型： function</span><br></pre></td></tr></table></figure><h3 id="特殊的值"><a href="#特殊的值" class="headerlink" title="特殊的值"></a>特殊的值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">undefined 未定义，所有 js 变量未赋于初始值的时候，默认值都是 undefined</span><br><span class="line">null 空值</span><br><span class="line">NaN 全称是：Not a Number。非数字。非数值</span><br></pre></td></tr></table></figure><h3 id="定义变量格式"><a href="#定义变量格式" class="headerlink" title="定义变量格式"></a>定义变量格式</h3><ul><li>var也可用let代替</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var 变量名;</span><br><span class="line">var 变量名 = 值;</span><br></pre></td></tr></table></figure><h2 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h2><h3 id="警告框函数"><a href="#警告框函数" class="headerlink" title="警告框函数"></a>警告框函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert();</span><br><span class="line"></span><br><span class="line">// 案例</span><br><span class="line">alert(&quot;今天你好吗！&quot;);</span><br></pre></td></tr></table></figure><h3 id="返回变量的数据类型"><a href="#返回变量的数据类型" class="headerlink" title="返回变量的数据类型"></a>返回变量的数据类型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typeof(i)；</span><br><span class="line"></span><br><span class="line">// 案例</span><br><span class="line">var str = &quot;执笔&quot;;</span><br><span class="line">alert(typeof(str));//String</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="关系比较运算"><a href="#关系比较运算" class="headerlink" title="关系比较运算"></a>关系比较运算</h3><h4 id="等于"><a href="#等于" class="headerlink" title="等于"></a>等于</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">== 等于是简单的做字面值的比较</span><br></pre></td></tr></table></figure><h4 id="全等于"><a href="#全等于" class="headerlink" title="全等于"></a>全等于</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=== 除了做字面值的比较之外，还会比较两个变量的数据类型</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = &quot;12&quot;;</span><br><span class="line">var b = 12;</span><br><span class="line">alert( a == b ); // true</span><br><span class="line">alert( a === b ); // false</span><br></pre></td></tr></table></figure><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>&amp;&amp; 且运算 和 ||或运算，有结果了后，后面的表达式不在执行</p></div><h4 id="且运算（-amp-amp-）"><a href="#且运算（-amp-amp-）" class="headerlink" title="且运算（&amp;&amp;）"></a>且运算（&amp;&amp;）</h4><ul><li>第一种：当表达式全为真的时候。返回最后一个表达式的值</li><li>第二种：当表达式中，有一个为假的时候。返回第一个为假的表达式的值</li></ul><h4 id="或运算（-）"><a href="#或运算（-）" class="headerlink" title="或运算（||）"></a>或运算（||）</h4><ul><li>第一种情况：当表达式全为假时，返回最后一个表达式的值</li><li>第二种情况：只要有一个表达式为真。就会把回第一个为真的表达式的值</li></ul><h4 id="取反运算（-）"><a href="#取反运算（-）" class="headerlink" title="取反运算（!）"></a>取反运算（!）</h4><ul><li>表示与当前的值取反</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p><code>javaScript</code>语言中的数组，只要我们通过数组下标赋值，那么最大的下标值，就会自动的给数组做扩容操作</p></div><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var 数组名 = []; // 空数组</span><br><span class="line">var 数组名 = [1 , ’abc’ , true]; // 定义数组同时赋值元素</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>1、<code>javaScript</code>语言中的定义带有返回值得函数，只需要在函数体内直接使用·return语句返回即可</p><p>2、函数需要被调用才会生效</p><p>3、<code>javaScript</code>中函数的重载会直接覆盖掉上一次的定义</p></div><h3 id="定义方式-1"><a href="#定义方式-1" class="headerlink" title="定义方式"></a>定义方式</h3><h4 id="function关键字"><a href="#function关键字" class="headerlink" title="function关键字"></a>function关键字</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名(形参列表)&#123;</span><br><span class="line">函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">alert(&quot;无参函数&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun();//调用</span><br></pre></td></tr></table></figure><h4 id="变量的形式"><a href="#变量的形式" class="headerlink" title="变量的形式"></a>变量的形式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 函数名 = function(形参列表) &#123; 函数体 &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var fun = function () &#123;</span><br><span class="line">alert(&quot;无参函数&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带返回值函数"><a href="#带返回值函数" class="headerlink" title="带返回值函数"></a>带返回值函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fun3(num1,num2) &#123;</span><br><span class="line">    var result = num1 + num2;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">alert(fun3(1,2));// 3</span><br></pre></td></tr></table></figure><h3 id="隐形参数（arguments）"><a href="#隐形参数（arguments）" class="headerlink" title="隐形参数（arguments）"></a>隐形参数（arguments）</h3><ul><li><p>在 function 函数中不需要定义，但却可以直接用来获取所有参数的变量</p></li><li><p>类似于<code>java</code>中的可变参数</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>10.隐形参数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(arguments.length);//可以看参数个数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(arguments[0]);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(arguments[1]);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(arguments[2]);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="variable language_">arguments</span>[i]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;无参函数&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fun</span>(<span class="number">1</span>,<span class="string">&quot;abc&quot;</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//需求写一个函数，可以用于计算所有的参数相加的和并返回</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1,num2</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> result = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                result += <span class="variable language_">arguments</span>[i];</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>));</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS中的自定义对象"><a href="#JS中的自定义对象" class="headerlink" title="JS中的自定义对象"></a>JS中的自定义对象</h3><h3 id="Object形式"><a href="#Object形式" class="headerlink" title="Object形式"></a>Object形式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var 变量名 = new Object(); // 对象实例（空对象）</span><br><span class="line">变量名.属性名 = 值; // 定义一个属性</span><br><span class="line">变量名.函数名 = function()&#123;&#125; // 定义一个函数</span><br><span class="line">对象的访问：</span><br><span class="line">变量名.属性 / 函数名();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 对象的定义： var 变量名 = new Object();</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// // 对象实例（空对象） 变量名.属性名 = 值;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// // 定义一个属性 变量名.函数名 = function()&#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// // 定义一个函数 对象的访问： 变量名.属性 / 函数名();</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="title function_">typeof</span>(obj));</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">name</span> = <span class="string">&quot;执笔&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">age</span> = <span class="number">18</span>;</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">fun</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; 年龄：&quot;</span>  + <span class="variable language_">this</span>.<span class="property">age</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(obj.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(obj.<span class="title function_">fun</span>());</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="花括号形式"><a href="#花括号形式" class="headerlink" title="花括号形式"></a>花括号形式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var 变量名 = &#123; // 空对象</span><br><span class="line">属性名：值, // 定义一个属性</span><br><span class="line">属性名：值, // 定义一个属性</span><br><span class="line">函数名：function()&#123;&#125; // 定义一个函数</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">变量名.属性 / 函数名();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 对象的定义： var 变量名 = &#123; // 空对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 属性名：值, // 定义一个属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 属性名：值, // 定义一个属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 函数名：function()&#123;&#125; // 定义一个函数 &#125;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 对象的访问： 变量名.属性 / 函数名();</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;执笔&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">            fun : <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; 年龄：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(obj.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="title function_">fun</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li>事件是电脑输入设备与页面进行交互的响应</li></ul><h3 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h3><ul><li>告诉浏览器，当事件响应后要执行哪些操作代码，叫事件注册或事件绑定</li></ul><h4 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h4><ul><li>通过 html 标签的事件属性直接赋于事件响应后的代码，这种方式我们叫静态注册</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>onblur<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onblurFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console是想浏览器控制台输出信息 相当于System.out，用于测试使用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// log()是打印的方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;静态注册onblur事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;onblurFun();&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h4><ul><li><p>是指先通过 js 代码得到标签的 dom 对象，然后再通过 dom 对象.事件名 = function(){} 这种形式赋于事件</p><p>响应后的代码，叫动态注册</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>onblur<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1 获取标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> elementById = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(elementById);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2 通过标签对象.事件名 = function()&#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">            elementById.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;动态注册onblur事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onload-加载完成事件"><a href="#onload-加载完成事件" class="headerlink" title="onload(加载完成事件)"></a>onload(加载完成事件)</h3><ul><li>页面加载完成之后，常用于做页面 js 代码初始化操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>onload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//onload事件方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onloadFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;静态注册的onload事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//onload事件动态注册，固定写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;动态注册的onload事件&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 静态注册onload事件</span></span><br><span class="line"><span class="comment">        onload事件是浏览器解析完成页面之后就会自动触发的事件</span></span><br><span class="line"><span class="comment">        &lt;body onload=&quot;onloadFun();&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onclick-单击事件"><a href="#onclick-单击事件" class="headerlink" title="onclick(单击事件)"></a>onclick(单击事件)</h3><ul><li>常用于按钮的点击响应操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>onclick<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onclickFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;静态注册onclick事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//动态注册onclick事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1 先获取标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * document 是javaScript语言提供的一个对象(文档)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * getElementById 通过id属性获取标签对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * <span class="doctag">@type</span> &#123;<span class="type">HTMLElement</span>&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             */</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> bonObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bon01&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(bonObj);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2 通过标签对象.事件名 = function()&#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">            bonObj.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;动态注册onclick事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    静态注册onclick事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;onclickFun()&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;bon01&quot;</span> &gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onbure-失去焦点事件"><a href="#onbure-失去焦点事件" class="headerlink" title="onbure(失去焦点事件)"></a>onbure(失去焦点事件)</h3><ul><li>常用用于输入框失去焦点后验证其输入内容是否合法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>onblur<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onblurFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console是想浏览器控制台输出信息 相当于System.out，用于测试使用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// log()是打印的方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;静态注册onblur事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1 获取标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> elementById = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(elementById);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2 通过标签对象.事件名 = function()&#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">            elementById.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;动态注册onblur事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;onblurFun();&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onchange-内容发生改变事件"><a href="#onchange-内容发生改变事件" class="headerlink" title="onchange(内容发生改变事件)"></a>onchange(内容发生改变事件)</h3><ul><li>常用于下拉列表和输入框内容发生改变后操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>onchange<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onchangeFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;你的女神改变了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1 获取标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> selObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sel01&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(selObj)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2 通过标签对象.事件名 = function()&#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">            selObj.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;你的男神改变了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  静态注册onchange事件  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">onchange</span>=<span class="string">&quot;onchangeFun()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择你的女神<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;sel01&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择你的男神<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>周星驰<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>华仔<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="onsubmit-表单提交事件"><a href="#onsubmit-表单提交事件" class="headerlink" title="onsubmit(表单提交事件)"></a>onsubmit(表单提交事件)</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>return false; 可阻止表单进行提交或页面进行跳转</p></div><ul><li>常用于表单提交前，验证所有表单项是否合法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>onsubmit<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onsubmitFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//验证所有表单项是否合法，如果有一个不合法就阻止提交表单</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;静态注册表单提交事件---发现不合法&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1 获取标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> subObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sub01&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(subObj);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2 通过标签对象.事件名 = function()&#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">            subObj.<span class="property">onsubmit</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;动态注册表单提交事件---发现不合法&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  return false 可以阻止表单提交--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return onsubmitFun();&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;静态注册&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sub01&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;动态注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DOM模型"><a href="#DOM模型" class="headerlink" title="DOM模型"></a>DOM模型</h2><ul><li><p>全称：Document Object Model 文档对象模型</p></li><li><p>是把文档中的标签，属性，文本，转换成为对象来管理</p></li></ul><h3 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h3><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202212042040411.png" alt="Document文档树"></p><ul><li>Document它管理了所有的HTML文档内容</li><li>document它是一种树结构的文档，有层级关系</li><li>所有的标签都对象化</li><li>可以通过document访问所有的标签对象</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>1、如果有id属性，优先使用<strong>getElementById()</strong>方法进行查询</p><p>2、如果没有id属性，则优先使用<strong>getElementsByName()</strong>方法进行查询；</p><p>3、如果id属性和name属性都没有最后按标签名进行查询<strong>getElementsByTagName()</strong></p><p>4、这三个方法都需要在页面加载完成之后执行，才能查询到对象</p></div><h4 id="createElement-tagName"><a href="#createElement-tagName" class="headerlink" title="createElement(tagName)"></a>createElement(tagName)</h4><ul><li>通过给定的标签名tagName，创建一个标签对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>createElement<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// window.onload 页面加载</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用js代码创建html标签，并显示</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 标签内容：&lt;div&gt;执笔，你好&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> divObj = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);<span class="comment">//在内存中&lt;div&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> textNodeObj = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;执笔，你好！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            divObj.<span class="title function_">appendChild</span>(textNodeObj);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// divObj.innerHTML = &quot;执笔，你好！&quot;;//在内存中&lt;div&gt;执笔，你好&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 添加子元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(divObj);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="getElementById-elementId"><a href="#getElementById-elementId" class="headerlink" title="getElementById(elementId)"></a>getElementById(elementId)</h4><ul><li>通过标签的id属性查找标签dom对象，elementId是标签的id属性值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>getElementById<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         * 需求：当用户点击了较验按钮，要获取输出框中的内容。然后验证其是否合法。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         * 验证的规则是：必须由字母，数字。下划线组成。并且长度是 5 到 12 位</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onclickFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1 当我们要操作一个标签的时候，一定要先获取这个标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(usernameObj);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// [object HTMLInputElement] 就是dom对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameText = usernameObj.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用正则表达式进行校验字符串是否符合规则</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> patt = <span class="regexp">/^\w&#123;5,12&#125;$/</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> usernameObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;usernamSpan&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// innerHTML 表示起始标签和结束标签中的内容</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// innerHTML 这个属性可读，可写</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (patt.<span class="title function_">test</span>(usernameText))&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// alert(&quot;用户名合法！&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// usernameObj.innerHTML = &quot;用户名合法！&quot;;</span></span></span><br><span class="line"><span class="language-javascript">                usernameObj.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;img src=\&quot;right.png\&quot; width=\&quot;12\&quot; height=\&quot;12\&quot;&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// alert(&quot;用户名不合法！&quot;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// usernameObj.innerHTML = &quot;用户名不合法！&quot;;</span></span></span><br><span class="line"><span class="language-javascript">                usernameObj.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;img src=\&quot;wrong.png\&quot; width=\&quot;12\&quot; height=\&quot;12\&quot;&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernamSpan&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;onclickFun()&quot;</span>&gt;</span>校验<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="getElementsByName-elementName"><a href="#getElementsByName-elementName" class="headerlink" title="getElementsByName(elementName)"></a>getElementsByName(elementName)</h4><ul><li>通过标签的name属性查找标签dom对象，elementName标签的name属性值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>getElementByName<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//全选</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkAll</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> hobbies = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// document.getElementsByName 根据指定的name属性 返回多个标签的对象集合</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(hobbies);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 这个集合的操作和数组一样</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 集合中的每一个元素都是dom对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 是有序集合</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hobbies.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// checked 属性是复选框选中的状态 选中为true 不是选中为false</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// checked 属性可读 可写</span></span></span><br><span class="line"><span class="language-javascript">                hobbies[i].<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//全不选</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkNo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> hobbies = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// document.getElementsByName 根据指定的name属性 返回多个标签的对象集合</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(hobbies);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 这个集合的操作和数组一样</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 集合中的每一个元素都是dom对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 是有序集合</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hobbies.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// checked 属性是复选框选中的状态 选中为true 不是选中为false</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// checked 属性可读 可写</span></span></span><br><span class="line"><span class="language-javascript">                hobbies[i].<span class="property">checked</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//反选</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkReverse</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> hobbies = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hobbies.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                hobbies[i].<span class="property">checked</span> = !hobbies[i].<span class="property">checked</span>;</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// if (hobbies[i].checked)&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     hobbies[i].checked = false;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#125; else&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     hobbies[i].checked = true;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">兴趣爱好：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cpp&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>c++</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>java</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;javaScript&quot;</span>&gt;</span>javaScript</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;checkAll()&quot;</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;checkNo()&quot;</span>&gt;</span>全不选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;checkReverse()&quot;</span>&gt;</span>反选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="getElementsByTagName-tagname"><a href="#getElementsByTagName-tagname" class="headerlink" title="getElementsByTagName(tagname)"></a>getElementsByTagName(tagname)</h4><ul><li>通过标签名tagName查找标签dom对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>getElementByName<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//全选</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">checkAll</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// document.getElementsByTagName(&quot;input&quot;) 根据标签名返回 标签的对象集合</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// inputs 也相当于数组</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> inputs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inputs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                inputs[i].<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">兴趣爱好：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;cpp&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>c++</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>java</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;javaScript&quot;</span>&gt;</span>javaScript</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;checkAll()&quot;</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节点（标签对象）常用属性和方法"><a href="#节点（标签对象）常用属性和方法" class="headerlink" title="节点（标签对象）常用属性和方法"></a>节点（标签对象）常用属性和方法</h3><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName()"></a>getElementsByTagName()</h5><ul><li>获取当前节点的指定标签名孩子节点</li></ul><h5 id="appendChild-oChildNode"><a href="#appendChild-oChildNode" class="headerlink" title="appendChild(oChildNode)"></a>appendChild(oChildNode)</h5><ul><li>可以添加一个子节点，oChildNode是要添加的孩子节点</li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><h5 id="childNodes"><a href="#childNodes" class="headerlink" title="childNodes"></a>childNodes</h5><ul><li>获取当前节点的所有子节点</li></ul><h5 id="firstChild"><a href="#firstChild" class="headerlink" title="firstChild"></a>firstChild</h5><ul><li>获取当前节点的第一个子节点</li></ul><h5 id="lastChild"><a href="#lastChild" class="headerlink" title="lastChild"></a>lastChild</h5><ul><li>获取当前节点的最后一个子节点</li></ul><h5 id="parentNode"><a href="#parentNode" class="headerlink" title="parentNode"></a>parentNode</h5><ul><li>获取当前节点的父节点</li></ul><h5 id="nextSibling"><a href="#nextSibling" class="headerlink" title="nextSibling"></a>nextSibling</h5><ul><li>获取当前节点的下一个节点</li></ul><h5 id="previousSibling"><a href="#previousSibling" class="headerlink" title="previousSibling"></a>previousSibling</h5><ul><li>获取当前节点的上一个节点</li></ul><h5 id="className"><a href="#className" class="headerlink" title="className"></a>className</h5><ul><li>用于获取或设置标签的class属性值</li></ul><h5 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h5><ul><li>表示获取/设置起始标签和结束标签中的内容</li></ul><h5 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a>innerText</h5><ul><li>表示获取/设置起始标签和结束标签中的文本</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>dom查询<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style/css.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.查找#bj节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> but = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">but.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> bjObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>( bjObj.<span class="property">innerHTML</span> );</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2.查找所有li节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn02Ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn02&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">btn02Ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> liObj = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>( liObj.<span class="property">length</span> );</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//3.查找name=gender的所有节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn03Ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn03&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">btn03Ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> genders = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;gender&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(genders.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//4.查找#city下所有li节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn04Ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn04&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">btn04Ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> citys = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> lis = citys.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(lis.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//5.返回#city的所有子节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn05Ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn05&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">btn05Ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> citys = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;city&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//这里多个空格会保留一个 也算一个节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(citys.<span class="property">childNodes</span>.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//6.返回#phone的第一个子节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn06Ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn06&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">btn06Ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> phone = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;phone&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>( phone.<span class="property">firstElementChild</span>.<span class="property">innerHTML</span>  );</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//7.返回#bj的父节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn07Ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn07&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">btn07Ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> bjObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>( bjObj.<span class="property">parentNode</span> );</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//8.返回#android的前一个兄弟节点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn08Ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn08&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">btn08Ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> andro = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;android&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>( andro.<span class="property">previousElementSibling</span>.<span class="property">innerHTML</span> );</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//9.读取#username的value属性值</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn09Ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn09&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">btn09Ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> usernameObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>( usernameObj.<span class="property">value</span> );</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//10.设置#username的value属性值</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn10Ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn10&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">btn10Ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> usernameObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>( usernameObj.<span class="property">value</span> = <span class="string">&quot;这是默认值&quot;</span> );</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//11.返回#bj的文本值</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> btn11Ele = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn11&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">btn11Ele.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// innerHTML 输出会显示标签和文本</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// innerText 只输出里面的文本</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> bjObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>( bjObj.<span class="property">innerText</span> );</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;total&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">你喜欢哪个城市?</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>东京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>首尔<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">你喜欢哪款单机游戏?</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;rl&quot;</span>&gt;</span>红警<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>实况<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>极品飞车<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>魔兽<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">你手机的操作系统是?</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;phone&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>IOS<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;android&quot;</span>&gt;</span>Android<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>Windows Phone<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">gender:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>/&gt;</span></span><br><span class="line">Male</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>/&gt;</span></span><br><span class="line">Female</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">name:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abcde&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btnList&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>查找#bj节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>&gt;</span>查找所有li节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn03&quot;</span>&gt;</span>查找name=gender的所有节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn04&quot;</span>&gt;</span>查找#city下所有li节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn05&quot;</span>&gt;</span>返回#city的所有子节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn06&quot;</span>&gt;</span>返回#phone的第一个子节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn07&quot;</span>&gt;</span>返回#bj的父节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn08&quot;</span>&gt;</span>返回#android的前一个兄弟节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn09&quot;</span>&gt;</span>返回#username的value属性值<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn10&quot;</span>&gt;</span>设置#username的value属性值<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn11&quot;</span>&gt;</span>返回#bj的文本值<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记 - web基础二（css）</title>
      <link href="/undefined/3d57.html"/>
      <url>/undefined/3d57.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>CSS 是「层叠样式表单」</li><li>是用于(增强)控制网页样式并允许将样式信息与网页内容分离的一种标记性语言</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202212012133247.png" alt="css语法规则"></p><ul><li><p><strong>选择器</strong>：浏览器根据“选择器”决定受 CSS 样式影响的 HTML 元素（标签）</p></li><li><p><strong>属性</strong> (property) ：是你要改变的样式名，并且每个属性都有一个值。属性和值被冒号分开，并</p><p>由花括号包围，这样就组成了一个完整的样式声明（declaration），例如：p {color: blue}</p></li><li><p><strong>多个声明：</strong>如果要定义不止一个声明，则需要用分号将每个声明分开，一般每行只描述一个属性</p></li></ul><h2 id="css和html结合使用方式"><a href="#css和html结合使用方式" class="headerlink" title="css和html结合使用方式"></a>css和html结合使用方式</h2><h3 id="在标签属性上设置"><a href="#在标签属性上设置" class="headerlink" title="在标签属性上设置"></a>在标签属性上设置</h3><p>在标签的 style 属性上设置”key:value value;”，修改标签样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red;&quot;</span>&gt;</span>div 标签 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在head标签中使用style标签定义"><a href="#在head标签中使用style标签定义" class="headerlink" title="在head标签中使用style标签定义"></a>在head标签中使用style标签定义</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--格式 --&gt;</span></span><br><span class="line">xxx &#123;</span><br><span class="line">Key : value value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--案例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- style标签专门用来定义css样式代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*需求 1：分别定义两个 div、span 标签，分别修改每个 div 标签的样式为：边框 1 个像素，实线，红色。*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> &gt;</span>标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> &gt;</span>标签1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="link标签引入css文件（推荐使用）"><a href="#link标签引入css文件（推荐使用）" class="headerlink" title="link标签引入css文件（推荐使用）"></a>link标签引入css文件（推荐使用）</h3><p>css文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">span&#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- link 标签专门用来引入 css 样式代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;3.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> &gt;</span>标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> &gt;</span>标签1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><h3 id="标签名选择器"><a href="#标签名选择器" class="headerlink" title="标签名选择器"></a>标签名选择器</h3><ul><li>可以决定哪些标签被动的使用这个样式</li></ul><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标签名&#123;</span><br><span class="line">属性：值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid yellow;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">5px</span> dashed blue;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">需求1：在所有div标签上修改字体颜色为蓝色，字体大小30个像素。边框为1像素黄色实线。</span></span><br><span class="line"><span class="comment">并且修改所有span 标签的字体颜色为黄色，字体大小20个像素。边框为5像素蓝色虚线。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><ul><li>可以通过id属性值选择性的去使用这个样式</li></ul><h4 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#id 属性值&#123;</span><br><span class="line">属性：值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#id001</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> yellow solid ;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#id002</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">5px</span> dotted blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">需求1：分别定义两个 div 标签，</span></span><br><span class="line"><span class="comment">第一个div 标签定义 id 为 id001 ，然后根据id 属性定义css样式修改字体颜色为蓝色，</span></span><br><span class="line"><span class="comment">字体大小30个像素。边框为1像素黄色实线。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二个div 标签定义 id 为 id002 ，然后根据id 属性定义css样式 修改的字体颜色为红色，字体大小20个像素。</span></span><br><span class="line"><span class="comment">边框为5像素蓝色点线。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id001&quot;</span>&gt;</span>div标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id002&quot;</span>&gt;</span>div标签2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="class选择器（类选择器）"><a href="#class选择器（类选择器）" class="headerlink" title="class选择器（类选择器）"></a>class选择器（类选择器）</h3><ul><li>通过 class 属性有效的选择性地去使用这个样式</li><li>class的命名不能为纯数字</li></ul><h4 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.class 属性值&#123;</span><br><span class="line">属性：值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.class01</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> yellow solid;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.class02</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: dimgray;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">需求1：修改 class 属性值为 class01的 span 或 div 标签，字体颜色为蓝色，字体大小30个像素。边框为1像素黄色实线。</span></span><br><span class="line"><span class="comment">需求2：修改 class 属性值为 class02的 div 标签，字体颜色为灰色，字体大小26个像素。边框为1像素红色实线。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- class命名不能为纯数字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;class01&quot;</span>&gt;</span>div标签class01<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;class02&quot;</span>&gt;</span>div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;class01&quot;</span>&gt;</span>span标签class01<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><ul><li>器可以让多个选择器共用同一个 css 样式代码</li></ul><h4 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 1，选择器 2，选择器 n&#123;</span><br><span class="line">属性：值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.class01</span>,<span class="selector-id">#id01</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span> ;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> yellow solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">需求1：修改 class=&quot;class01&quot; 的div 标签 和 id=&quot;id01&quot; 所有的span标签，</span></span><br><span class="line"><span class="comment">字体颜色为蓝色，字体大小20个像素。边框为1像素黄色实线。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;class01&quot;</span>&gt;</span>div标签class01<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;id01&quot;</span>&gt;</span>span 标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>div标签id01<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用样式"><a href="#常用样式" class="headerlink" title="常用样式"></a>常用样式</h2><h3 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h3><ul><li>颜色可以写颜色名如：black, blue, red, green </li><li>颜色也可以写 rgb 值和十六进制表示值：如 rgb(255,0,0)，#00F6DE，如果写十六进制值必须加#</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color: red;</span><br></pre></td></tr></table></figure><h3 id="宽度"><a href="#宽度" class="headerlink" title="宽度"></a>宽度</h3><ul><li>宽度可以写像素值：19px</li><li>也可以写百分比值：20%</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width: 19px;</span><br></pre></td></tr></table></figure><h3 id="高度"><a href="#高度" class="headerlink" title="高度"></a>高度</h3><ul><li>高度可以写像素值：19px</li><li>也可以写百分比值：20%</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hright:19px;</span><br></pre></td></tr></table></figure><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color:#ffffff</span><br></pre></td></tr></table></figure><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">color: #FFFFFF; /*字体颜色*/</span><br><span class="line">font_size: 20px; /*字体大小*/</span><br></pre></td></tr></table></figure><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border: 1px solid red; /*红色1像素实线边框*/</span><br></pre></td></tr></table></figure><h3 id="DIV居中（相对于页面）"><a href="#DIV居中（相对于页面）" class="headerlink" title="DIV居中（相对于页面）"></a>DIV居中（相对于页面）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">margin-left: auto; /*自动*/</span><br><span class="line">margin-right: auto; /*自动*/</span><br></pre></td></tr></table></figure><h3 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align: center;</span><br></pre></td></tr></table></figure><h3 id="超链接去下划线"><a href="#超链接去下划线" class="headerlink" title="超链接去下划线"></a>超链接去下划线</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-decoration: none;</span><br></pre></td></tr></table></figure><h3 id="表格细线"><a href="#表格细线" class="headerlink" title="表格细线"></a>表格细线</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">table &#123;</span><br><span class="line">border: 1px solid black; /*设置边框*/</span><br><span class="line">border-collapse: collapse; /*将边框合并*/</span><br><span class="line">&#125;</span><br><span class="line">td,th &#123;</span><br><span class="line">border: 1px solid black; /*设置边框*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列表去除修饰"><a href="#列表去除修饰" class="headerlink" title="列表去除修饰"></a>列表去除修饰</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ul &#123;</span><br><span class="line">list-style: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记 - web基础一（html）</title>
      <link href="/undefined/45803.html"/>
      <url>/undefined/45803.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>本文是对于html标签以及css使用记录</p></div><h2 id="网页组成部分"><a href="#网页组成部分" class="headerlink" title="网页组成部分"></a>网页组成部分</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><ul><li>在页面中可以看到的数据，一般使用html实现</li></ul><h3 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h3><ul><li>内容在页面上的展现形式，如颜色、布局、大小等，一般使用css实现</li></ul><h3 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h3><ul><li>页面中元素与输入设备交互的响应，一般使用javaScript实现</li></ul><h2 id="Html-简介"><a href="#Html-简介" class="headerlink" title="Html 简介"></a>Html 简介</h2><ul><li><code>Hyper Text Markup Language</code>（超文本标记语言） 简写：<code>HTML</code></li><li>HTML 通过标签来标记要显示的网页中的各个部分</li><li>网页文件本身是一种文本文件， 通过在文本文件中添加标记符，可以告诉浏览器如何显示其中的内容（如：文字如何处理，画 面如何安排，图片如何显示等)</li></ul><h2 id="Html-书写规范"><a href="#Html-书写规范" class="headerlink" title="Html 书写规范"></a>Html 书写规范</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>                       <span class="comment">&lt;!--表示整个 html 页面的开始--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>                   <span class="comment">&lt;!--头信息--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span>   <span class="comment">&lt;!--标题--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">                          <span class="comment">&lt;!--body 是页面的主体内容 页面主体内容--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>                       <span class="comment">&lt;!--表示整个 html 页面的结束--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Html 的代码注释  这是 html 注释，可以在页面右键查看源代码中看到 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Html-标签"><a href="#Html-标签" class="headerlink" title="Html 标签"></a>Html 标签</h2><h3 id="标签的格式"><a href="#标签的格式" class="headerlink" title="标签的格式"></a>标签的格式</h3><ul><li>标签名大小写不敏感</li><li><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202211302200930.png" alt="标签示例"></li></ul><h4 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h4><ul><li>自结束标签</li></ul><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">格式</button><button type="button" class="tab " data-href="test4-2">案例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签名 /&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 换行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 水平线 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span> </span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h4 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h4><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">格式</button><button type="button" class="tab " data-href="test4-2">案例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一个标签为开始标签 后面的为结束标签 --&gt;</span></span><br><span class="line">&lt;标签名 &gt; 封装的数据 &lt;标签名&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    这里是数据</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="标签的属性"><a href="#标签的属性" class="headerlink" title="标签的属性"></a>标签的属性</h3><h4 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可以修改简单的样式效果 --&gt;</span></span><br><span class="line">bgcolor=&quot;red&quot;  </span><br></pre></td></tr></table></figure><h4 id="事件属性"><a href="#事件属性" class="headerlink" title="事件属性"></a>事件属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可以直接设置事件响应后的代码 --&gt;</span></span><br><span class="line">onclick=&quot;alert(&quot;你好！&quot;);&quot;  </span><br></pre></td></tr></table></figure><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><h4 id="font字体标签"><a href="#font字体标签" class="headerlink" title="font字体标签"></a>font字体标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 字体标签</span></span><br><span class="line"><span class="comment">    需求 1：在网页上显示 我是字体标签 ，并修改字体为 宋体，颜色为红色。</span></span><br><span class="line"><span class="comment">    font 标签是字体标签,它可以用来修改文本的字体,颜色,大小(尺寸)</span></span><br><span class="line"><span class="comment">    color 属性修改颜色</span></span><br><span class="line"><span class="comment">    face 属性修改字体</span></span><br><span class="line"><span class="comment">    size 属性修改文本大小</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">face</span>=<span class="string">&quot;宋体&quot;</span> <span class="attr">size</span>=<span class="string">&quot;7&quot;</span>&gt;</span>我是字体标签<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><h5 id="常用的字符实体"><a href="#常用的字符实体" class="headerlink" title="常用的字符实体"></a>常用的字符实体</h5><div class="note info flat"><p>分号（;）为英文输入法下的;</p></div><div class="table-container"><table><thead><tr><th>显示结果</th><th>描述</th><th>实体名称</th><th>实体编号</th></tr></thead><tbody><tr><td></td><td>空格</td><td>&amp;nbsp；</td><td>&amp;#160；</td></tr><tr><td>&lt;</td><td>小于号</td><td>&amp;lt；</td><td>&amp;#60；</td></tr><tr><td>&gt;</td><td>大于号</td><td>&amp;gt；</td><td>&amp;#62；</td></tr><tr><td>&amp;</td><td>和号</td><td>&amp;amp；</td><td>&amp;#38；</td></tr><tr><td>“</td><td>引号</td><td>&amp;quot；</td><td>&amp;#34；</td></tr><tr><td>‘</td><td>撇号</td><td>&amp;apos；(IE不支持)</td><td>&amp;#39；</td></tr></tbody></table></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 特殊字符</span></span><br><span class="line"><span class="comment">需求：把&lt;br/&gt; 换行标签 变成文本 转换成字符显示在页面上</span></span><br><span class="line"><span class="comment">连续输入空格或者回车 浏览器只会保存第一个</span></span><br><span class="line"><span class="comment">常用的特殊字符：</span></span><br><span class="line"><span class="comment">&lt;    &amp;lt;</span></span><br><span class="line"><span class="comment">&gt;    &amp;gt;</span></span><br><span class="line"><span class="comment">空格  &amp;nbsp;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">我是<span class="symbol">&amp;lt;</span>br<span class="symbol">&amp;gt;</span>换行标签<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">你好<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>执笔</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标题标签</span></span><br><span class="line"><span class="comment">需求 1：演示标题 1 到 标题 6 的</span></span><br><span class="line"><span class="comment">h1 - h6 都是标题标签</span></span><br><span class="line"><span class="comment">h1 最大</span></span><br><span class="line"><span class="comment">h6 最小</span></span><br><span class="line"><span class="comment">align 属性是对齐属性</span></span><br><span class="line"><span class="comment">left 左对齐(默认)</span></span><br><span class="line"><span class="comment">center 剧中</span></span><br><span class="line"><span class="comment">right 右对齐</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>标题 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>标题 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>标题 3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题 4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题 5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题 6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h7</span>&gt;</span>标题 7<span class="tag">&lt;/<span class="name">h7</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><ul><li>在网页中所有点击之后可以跳转的内容都是超连接</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 超链接</span></span><br><span class="line"><span class="comment">a标签 超链接</span></span><br><span class="line"><span class="comment">href 属性设置连接的地址</span></span><br><span class="line"><span class="comment">target属性设置是新开窗口还是本窗口</span></span><br><span class="line"><span class="comment">_self 表示当前窗口打开（默认）</span></span><br><span class="line"><span class="comment">_blank 表示新建一个空白窗口打开</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>百度_self<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度_blank<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 列表</span></span><br><span class="line"><span class="comment">    需求：无序列表显示 西游记 红楼梦 三国演义 水浒传</span></span><br><span class="line"><span class="comment">        ul 是无序列表</span></span><br><span class="line"><span class="comment">            type 属性可以修改列表前面的符号</span></span><br><span class="line"><span class="comment">        li 是列表项</span></span><br><span class="line"><span class="comment">        ol 是有序列表</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 列表</span></span><br><span class="line"><span class="comment">    需求：无序列表显示 西游记 红楼梦 三国演义 水浒传</span></span><br><span class="line"><span class="comment">        ul 是无序列表</span></span><br><span class="line"><span class="comment">            type 属性可以修改列表前面的符号</span></span><br><span class="line"><span class="comment">        li 是列表项</span></span><br><span class="line"><span class="comment">        ol 是有序列表</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h4><ul><li>img 标签可以在 html 页面上显示图片</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片标签</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    img标签用来显示图片</span></span><br><span class="line"><span class="comment">    src属性可以设置图片的路径</span></span><br><span class="line"><span class="comment">    width设置宽度</span></span><br><span class="line"><span class="comment">    height设置高度</span></span><br><span class="line"><span class="comment">    border设置边框粗细</span></span><br><span class="line"><span class="comment">    alt设置在图片没找到时显示使用文本代替</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    JavaSe中 </span></span><br><span class="line"><span class="comment">        相对路径：从工程名开始算</span></span><br><span class="line"><span class="comment">        绝对路径：盘符/目录/文件名</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">    web中</span></span><br><span class="line"><span class="comment">        相对路径：</span></span><br><span class="line"><span class="comment">            .        表示当前文件夹所在的目录</span></span><br><span class="line"><span class="comment">            ..       表示当前文件夹所在的上一级目录</span></span><br><span class="line"><span class="comment">            文件名    表示当前文件所在目录的文件，相当于./文件名   ./可以省略    </span></span><br><span class="line"><span class="comment">    --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../imgs/1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片没有找到&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../imgs/2.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        table 表格标签</span></span><br><span class="line"><span class="comment">            border 设置边框粗细</span></span><br><span class="line"><span class="comment">            width 设置表格宽度</span></span><br><span class="line"><span class="comment">            height 设置表格高度</span></span><br><span class="line"><span class="comment">            aline 设置表格相对于页面的对齐方式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        tr 行标签</span></span><br><span class="line"><span class="comment">        th 表头标签</span></span><br><span class="line"><span class="comment">        td 单元格标签</span></span><br><span class="line"><span class="comment">            b 设置字体加粗</span></span><br><span class="line"><span class="comment">            aline 设置表格中文本对齐方式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="跨行列表格"><a href="#跨行列表格" class="headerlink" title="跨行列表格"></a>跨行列表格</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">需求1:</span></span><br><span class="line"><span class="comment">新建一个五行，五列的表格，</span></span><br><span class="line"><span class="comment">第一行，第一列的单元格要跨两列，</span></span><br><span class="line"><span class="comment">第二行第一列的单元格跨两行，</span></span><br><span class="line"><span class="comment">第四行第四列的单元格跨两行两列。</span></span><br><span class="line"><span class="comment">colspan 属性设置跨列</span></span><br><span class="line"><span class="comment">rowspan 属性设置跨行</span></span><br><span class="line"><span class="comment">生成多行多列快捷方式 如5行5列</span></span><br><span class="line"><span class="comment">table&gt;tr*5&gt;td*5 tab键</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>3.5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>4.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>4.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>4.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>4.4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>5.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>5.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>5.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="iframe框架标签（内嵌窗口）"><a href="#iframe框架标签（内嵌窗口）" class="headerlink" title="iframe框架标签（内嵌窗口）"></a>iframe框架标签（内嵌窗口）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    iframe 可以在页面上单独开辟一个小区域显示一个单独页面</span></span><br><span class="line"><span class="comment">        iframe标签和a标签组合使用步骤：</span></span><br><span class="line"><span class="comment">            1. 在iframe中使用name属性定义一个名字</span></span><br><span class="line"><span class="comment">            2. 在a标签中的target属性值上设置iframe的name的属性值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    我是一个单独的页面<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;3.标题标签.html&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">name</span>=<span class="string">&quot;单独页面&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;0-标签语法.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;单独页面&quot;</span>&gt;</span>0-标签语法<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.font标签.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;单独页面&quot;</span>&gt;</span>1.font标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;2.特殊字符.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;单独页面&quot;</span>&gt;</span>2.特殊字符<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h4><ul><li>表单就是 html 页面中，用来收集用户信息的所有元素集合，然后把这些信息发送给服务器</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    form标签是表单标签</span></span><br><span class="line"><span class="comment">        action属性设置提交的服务器地址</span></span><br><span class="line"><span class="comment">        method属性值设置提交的方式：GET（默认值）或POST</span></span><br><span class="line"><span class="comment">    表单提交的时候，数据没有发送给服务器的三种情况</span></span><br><span class="line"><span class="comment">        1、表单项没有name属性值</span></span><br><span class="line"><span class="comment">        2、单选、复选（下拉列表中option标签）都需要添加value属性</span></span><br><span class="line"><span class="comment">        3、表单项不在提交的form标签中</span></span><br><span class="line"><span class="comment">    GET请求特点是：</span></span><br><span class="line"><span class="comment">        1、浏览器地址栏中的地址是：action属性+[？+请求参数]可以没有</span></span><br><span class="line"><span class="comment">            请求参数的格式：name=value&amp;name=value</span></span><br><span class="line"><span class="comment">        2、不安全</span></span><br><span class="line"><span class="comment">        3、它有数据长度限制</span></span><br><span class="line"><span class="comment">    POST请求特点是：</span></span><br><span class="line"><span class="comment">        1、浏览器地址栏中只有action属性值</span></span><br><span class="line"><span class="comment">        2、相对GET更安全</span></span><br><span class="line"><span class="comment">        3、理论上没有长度限制</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;action&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名称：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;这是默认值&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span>&gt;</span>男</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span>&gt;</span>女</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>兴趣爱好：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;java&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>Java</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;javaSe&quot;</span>&gt;</span>JavaSe</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;c++&quot;</span>&gt;</span>c++</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>国籍：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;usa&quot;</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;jp&quot;</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>自我评价：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">name</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>这里填入默认值<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清零&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表单细节"><a href="#表单细节" class="headerlink" title="表单细节"></a>表单细节</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    form 表单标签</span></span><br><span class="line"><span class="comment">        input type=&quot;text&quot;       是字符输入框 value设置默认显示内容</span></span><br><span class="line"><span class="comment">        input type=&quot;password&quot;   是密码输入框 value设置默认显示内容</span></span><br><span class="line"><span class="comment">        input type=&quot;radio&quot;      是单选框 name属性值可以对其进行分组 checked=&quot;checked&quot; 默认选中</span></span><br><span class="line"><span class="comment">        input type=&quot;checkbox&quot;   是复选框 checked=&quot;checked&quot; 默认选中</span></span><br><span class="line"><span class="comment">        input type=&quot;reset&quot;      是重置按钮 value属性修改按钮上的文本</span></span><br><span class="line"><span class="comment">        input type=&quot;submit&quot;     是提交按钮 value属性修改按钮上的文本</span></span><br><span class="line"><span class="comment">        input type=&quot;button&quot;     是按钮    value属性修改按钮上的文本</span></span><br><span class="line"><span class="comment">        input type=&quot;file&quot;       是文件上传域</span></span><br><span class="line"><span class="comment">        select 标签是下拉复选框</span></span><br><span class="line"><span class="comment">            option 标签是下拉列表框中的选项 selected=&quot;selected&quot; 设置默认选中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        textarea 标签是 多行文本输入框 （起始标签和结束标签中的内容是默认值）</span></span><br><span class="line"><span class="comment">            rows 属性设置可以显示的几行高度</span></span><br><span class="line"><span class="comment">            cols 属性设置每行可以显示几个字符宽度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名称：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;这是默认值&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>男</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>兴趣爱好：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>Java</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>JavaSe</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>c++</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>国籍：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>德国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>自我评价：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span>这里填入默认值<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清零&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h4><h5 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--span标签  它的长度是封装数据的长度--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>标签1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="div标签"><a href="#div标签" class="headerlink" title="div标签"></a>div标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--div标签   默认独占一行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>标签1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="p标签"><a href="#p标签" class="headerlink" title="p标签"></a>p标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--p段落标签  默认会在段落的上方或下方个空出一行（如果有就不再空出）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p段落标签1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 术语名词解释</title>
      <link href="/undefined/d889.html"/>
      <url>/undefined/d889.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p><code>TS16949</code>中定义</p></div><h2 id="APQP"><a href="#APQP" class="headerlink" title="APQP"></a>APQP</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">说明</button><button type="button" class="tab " data-href="test4-2">作用</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li><code>advance product quality planning</code>： 产品质量先期策划</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>产品质量策划是一种结构化的方法，用来确定和制定确保某产品使顾客满意所需的步骤</p></li><li><p>产品质量策划的目标是促进与所涉及每一个人的联系，以确保所要求的步骤按时完成</p></li><li><p><code>APQP</code>五个阶段的输入和输出</p><ul><li><p>计划和确定项目（立项）</p></li><li><p>产品设计和开发验证（样件试制）</p></li><li><p>过程设计和开发验证（试生产策划）</p></li><li><p>产品和过程确认（试生产）</p></li><li><p>反馈、评定和纠正措施（量产及持续改进）</p></li></ul></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="PPAP"><a href="#PPAP" class="headerlink" title="PPAP"></a>PPAP</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">说明</button><button type="button" class="tab " data-href="test4-2">作用</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li><code>Production part approval process</code>：生产件批准程序</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li>是用来确定组织是否已经正确理解了顾客工程设计记录和规范的所有要求,并且是在执行所要求的依报价时的产量生产节拍条件下的实际零件生产过程中，具有持续满足这些要求的潜在能力</li><li><code>PPAP</code>是在试生产完成后,并制造过程的设计开发验证也完成后,由顾客对企业产品的批准,只有经过了PPAP，企业才能进行批量生产</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="FMEA"><a href="#FMEA" class="headerlink" title="FMEA"></a>FMEA</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">说明</button><button type="button" class="tab " data-href="test4-2">作用</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li><code>Failure Mode Effect Analysis</code>：潜在失效模式及后果分析</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li>对各种可能的风险进行评价、分析,以便在现有技术的基础上消除这些风险或将这些风险减小到可接受的水平</li><li><code>FMEA</code>连贯于设计、开发和制造的整个过程,是一种预防不良后果的工具，它还是在设计研发阶段用来研究失效因果关系的一种可靠度工程技术</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="MSA"><a href="#MSA" class="headerlink" title="MSA"></a>MSA</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">说明</button><button type="button" class="tab " data-href="test4-2">作用</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li><code>Measurement System Analysis</code>：测量系统分析</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><code>MSA</code>使用数理统计和图表的方法对测量系统的分辨率和误差进行分析，以评估测量系统的分辨率和误差对于被测量的参数来说是否合适，并确定测量系统误差的主要成分</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="SPC"><a href="#SPC" class="headerlink" title="SPC"></a>SPC</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">说明</button><button type="button" class="tab " data-href="test4-2">作用</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li><code>Statistical Process Control</code>：统计过程控制</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><code>SPC</code>是一种制造控制方法，是将制造中的控制项目，依其特性所收集的数据，通过过程能力的分析与过程标准化，发掘过程中的异常，并立即采取改善措施，使过程恢复正常的方法</li><li><code>4M1E</code>：即人、机、料、法、环</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="CPK-Cp"><a href="#CPK-Cp" class="headerlink" title="CPK Cp"></a>CPK Cp</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">说明</button><button type="button" class="tab " data-href="test4-2">作用</button><button type="button" class="tab " data-href="test4-3">应用·</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li><code>Process capability index</code>：过程能力指数</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li>过程能力满足产品质量标准要求（规格范围等）的程度，也称工序能力指数</li><li><code>Cpk</code>是指过程平均值与产品标准规格发生偏移（ε）的大小，常用客户满意的上限偏差值减去平均值和平均值减去下限偏差值中数值小的一个，再除以三倍的西格玛的结果来表示</li><li>公式：<ul><li><code>CPK= Min[ (USL- Mu)/3σ, (Mu - LSL)/3σ]</code></li><li>通常状况下，质量特性值分布的总体标准差（<code>σ</code>）是未知的，所以应采用样本标准差（<code>s</code>）来代替</li></ul></li><li>其定义与Cp基本相同，最初版的Minitab中并无Cpk的计算，但对于任何生产，实际过程总会发生偏移，产品质量也是分散地存在着，为满足实际需求，之后考虑了对偏移度的修正，引入了Cpk这一概念。其源自Cpk=Cp<em>k  k为修正指数，k=1-|Ca|即`Cpk = Cp </em> ( 1 - |Ca|)`<ul><li>Cpk是Ca及Cp两者的中和反应，Ca反应的是位置关系(居中趋势)，Cp反应的是散布关系(离散趋势)</li></ul></li></ul><details class="folding-tag" red><summary> 双侧规格Cp </summary>              <div class="content">              <p><img src="https://bkimg.cdn.bcebos.com/pic/34fae6cd7b899e517bfd7e9042a7d933c9950dc6?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt="过程能力指数双侧规格计算公式"></p><ul><li><code>Cp</code>是指过程满足技术要求的能力，即是指工序在一定时间里，处于控制状态(稳定状态)下的实际加工能力。它是工序固有的能力，或者说它是工序保证质量的能力。其方差取值为样本，且不考虑过程的偏移。常用客户满意的偏差范围除以六倍的西格玛的结果来表示</li><li>过程能力指数<code>Cp</code>的计算公式如式中，<code>T</code>为过程统计量的技术规格的公差幅度；<code>TU、TL</code>分别为上、下公差界限；<code>σ</code>为过程统计量的总体标准差，可以在过程处于稳态时得到</li><li>T=允许最大值（<code>Tu</code>）-允许最小值（<code>Tl</code>）</li><li>公式：<ul><li><code>Cp=T/（6*σ)</code></li><li>所以<code>σ</code>越小，其<code>Cp</code>值越大，则过程技术能力越好</li></ul></li></ul>              </div>            </details><details class="folding-tag" red><summary> 单侧规格Cpu </summary>              <div class="content">              <p><img src="https://bkimg.cdn.bcebos.com/pic/0b7b02087bf40ad1d1578367572c11dfa8ecce87?x-bce-process=image/resize,m_lfit,w_440,limit_1" alt="单侧规格过程能力指数计算公式"></p><ul><li>单侧规格情形的过程能力指数：若只有规格上限的要求，而对规格下限无要求</li><li>式中，CPU为上单侧过程能力指数。若μ≥TU，令CPU=0，表示过程能力严重不足，过程的不合格品率高达50%以上</li><li>μ：平均值</li></ul>              </div>            </details></div><div class="tab-item-content" id="test4-3"><ol><li>计算取样数据至少应有20~25组数据，方具有一定代表性</li><li>计算Cpk除收集取样数据外，还应知晓该品质特性的规格上下限(USL，LSL)，才可顺利计算其值</li><li>首先可用Excel的“STDEV”函数自动计算所取样数据的标准差(σ)，再计算出规格公差(T)，及规格中心值(u)， 规格公差=规格上限－规格下限；规格中心值=（规格上限+规格下限）/2</li><li>依据公式：Ca=(X-μ)/(T/2) ， 计算出制程准确度：Ca值 (x为所有取样数据的平均值)</li><li>依据公式：Cp =T/6σ ， 计算出制程精密度：Cp值</li><li>依据公式：Cpk=Cp(1-|Ca|) ， 计算出制程能力指数：Cpk值</li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="PpK-Pp"><a href="#PpK-Pp" class="headerlink" title="PpK Pp"></a>PpK Pp</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">说明</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li><code>Performance Index of Process</code>：计算工序性能或叫过程性能的指数</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="Cpk与Ppk的关系"><a href="#Cpk与Ppk的关系" class="headerlink" title="Cpk与Ppk的关系"></a>Cpk与Ppk的关系</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">说明</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>当可能得到历史的数据或有足够的初始数据来绘制控制图时（至少100个个体样本），可以在过程稳定时计算<code>Cpk</code></li><li>对于输出满足规格要求且呈可预测图形的长期不稳定过程，应该使用<code>Ppk</code></li></ul><p><img src="https://inews.gtimg.com/newsapp_bt/0/14445096025/1000" alt="Cp CPk Pp Ppk计算公式"></p><ul><li><strong>过程绩效指数（Pp和Ppk）是过程的过去或现实</strong></li><li><strong>过程能力指数（Cp和Cpk）是过程的潜能或将来</strong></li><li>过程能力指数的计算必须满足”过程稳定”和”数据正态分布”两个必要条件</li><li><p>而用于Pp和Ppk计算的数据则不必进行这两个测试</p></li><li><p>过程能力指数及过程绩效指数的数学关系是：Cp≥Pp ， Cpk≥Ppk。当过程稳定（stable或under control）且数据呈正态分布时Cp=Pp，Cpk=Ppk（注意这里的”=”是统计学意义上的相同)；只要有特殊原因存在， Cp&gt;Pp , Cpk&gt;Ppk</p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="Cgk"><a href="#Cgk" class="headerlink" title="Cgk"></a>Cgk</h2><ul><li>量检具准确精度能力系数 </li><li>是用于评价一个测量设备的测量能力是否和被测产品的公差要求相匹配的方法</li><li><strong>检测方法通常是在量具的使用环境下，由同一个人重复测量标准件的同一个位置n次，（如25次）</strong>，通过测量值所构成的样本得到测量的均值、标准差和偏倚等：<ul><li><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202211042038790.png" alt="T是被测特征的公差，USL代表上极限偏差，LSL代表下极限偏差"></li></ul></li><li><strong>Cg/Cgk的判定准则是：Cg和Cgk都大于1.33</strong><ul><li><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202211042040988.png" alt="cg计算公式"><ul><li>对于系数0.2：有的公司会选用0.15；对于系数6：有的公司会选用4，意味着基于测量正态分布假设，以测量值95.45%的离散区间宽度来计算而不是以测量值99.73%的离散区间宽度来计算，这两个系数都是由使用的公司自主选择，Q-DAS软件推荐的标准分别是：0.2和4</li></ul></li><li><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202211042040639.png" alt="Cgk计算公式"></li></ul></li></ul><h2 id="Cmk"><a href="#Cmk" class="headerlink" title="Cmk"></a>Cmk</h2><ul><li><p>设备能力指数</p></li><li><p>短时间内取样，抽取数据是连续性的</p></li><li><p>假定操作者、环境、原料都不受影响；只考虑设备单一的因素影响</p></li><li><p>产品是同一批次材料，最好同模具号的；测试过程中设备和产品不能做任何调整，强调稳定的过程研究</p></li><li><p>应用范围：</p><ul><li><p>(1) 用于新增加设备验收、新产品试制、设备大修之后等情况</p></li><li><p>(2)在稳定的生产状态下，阶段性的了解机器设备对产品质量的影响</p></li></ul></li><li><p><strong>CMK要求大于1.67才为合格</strong></p></li><li><p>计算公式</p><ul><li><img src="https://img-blog.csdnimg.cn/img_convert/e0d23e316cd5da5da2ead0b20e197c10.png" alt="Cmk计算公式"><ul><li>S：取样数据的标准差，用STDEV公式直接计算</li><li>T：公差范围，即上、下极限值之差</li><li>K: 为修正系数或偏离系数</li><li>Bi：平均值Xbar 和测量的理论中间值之差</li><li>Bi=[ Xbar - 图纸中间值 -(上偏差＋下偏差)/2]</li></ul></li></ul></li></ul><h2 id="Cgk-Cmk-PpK-Cpk对比"><a href="#Cgk-Cmk-PpK-Cpk对比" class="headerlink" title="Cgk Cmk PpK Cpk对比"></a>Cgk Cmk PpK Cpk对比</h2><h3 id="能力指数区别"><a href="#能力指数区别" class="headerlink" title="能力指数区别"></a>能力指数区别</h3><div class="table-container"><table><thead><tr><th>能力指数</th><th>Cgk</th><th>Cmk</th><th>Ppk</th><th>Cpk</th></tr></thead><tbody><tr><td>名称</td><td>量检具准确精度能力系数</td><td>设备能力指数</td><td>过程性能的指数</td><td>过程能力指数</td></tr><tr><td>适用范围</td><td>检测仪器</td><td>检测设备</td><td>缩合制程</td><td>缩合制程</td></tr><tr><td>评价时期</td><td>初期或定期</td><td>验收期</td><td>试生产期间</td><td>量产期间</td></tr><tr><td>评价目的</td><td>评估检测系统公差相匹配性</td><td>评估设备稳定性</td><td>普通原因 特殊原因</td><td>普通原因 稳定条件）</td></tr><tr><td>抽取数量</td><td>N≥25次</td><td>N≥50个</td><td>N≥50个</td><td>N≥25组，且≥5个/组</td></tr><tr><td>标准差计算</td><td>N-1</td><td>N-1</td><td>N-1</td><td>N或R/d₂（极差估计）</td></tr><tr><td>指数值</td><td>≥1.33</td><td>≥1.67</td><td>≥1.67</td><td>≥1.33</td></tr><tr><td>探查作用</td><td>反映过程的过去</td><td>反映过程的过去</td><td>反映过程的过去</td><td>预测过程的未来</td></tr></tbody></table></div><ul><li>N-1样本 ，N总体</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202211032016158.png" alt></p><h3 id="能力指数评级标准"><a href="#能力指数评级标准" class="headerlink" title="能力指数评级标准"></a>能力指数评级标准</h3><div class="table-container"><table><thead><tr><th>等级</th><th>要求值</th><th>状态</th><th>处理方案</th></tr></thead><tbody><tr><td>A++级</td><td>xxk ≥ 2</td><td>特优</td><td>可考虑降低成本</td></tr><tr><td>A+级</td><td>2 &gt; xxk ≥ 1.67</td><td>优</td><td>应当保持</td></tr><tr><td>A级</td><td>1.67 &gt; xxk ≥ 1.33</td><td>良</td><td>能力良好，状态稳定</td></tr><tr><td>B级</td><td>1.33 &gt; xxk ≥ 1.0</td><td>一般</td><td>状态一般</td></tr><tr><td>C级</td><td>1.0 &gt; xxk ≥ 0.67</td><td>差</td><td>制成不良较多，必须提升能力</td></tr><tr><td>D级</td><td>0.67 &gt; xxk</td><td>不可接受</td><td>其能力太差，重新整改设计制程</td></tr></tbody></table></div><h4 id="涉及K值（Ca值）评价"><a href="#涉及K值（Ca值）评价" class="headerlink" title="涉及K值（Ca值）评价"></a>涉及K值（Ca值）评价</h4><ul><li>K = |Ca| = (X - μ) / （T / 2）<ul><li>μ：规格中心值 =（规格上限+规格下限）/2</li><li>x：所有取样数据的平均值</li><li>T：规格公差 = 规格上限－规格下限</li></ul></li></ul><div class="table-container"><table><thead><tr><th>等级</th><th>要求值</th><th>状态</th><th>处理方案</th></tr></thead><tbody><tr><td>A级</td><td>\</td><td>Ca\</td><td>≤ 12.5%</td><td>优</td><td>按SOP作业</td></tr><tr><td>B级</td><td>12.5% &lt; \</td><td>Ca\</td><td>≤ 25%</td><td>良</td><td>可考量改进</td></tr><tr><td>C级</td><td>25 &lt; \</td><td>Ca\</td><td>≤ 50%</td><td>差</td><td>调查规格的合理性或错误操作</td></tr><tr><td>D级</td><td>50% &lt; \</td><td>Ca\</td><td></td><td>极差</td><td>停机，重新调整后生成</td></tr></tbody></table></div><h4 id="涉及Cp评价"><a href="#涉及Cp评价" class="headerlink" title="涉及Cp评价"></a>涉及Cp评价</h4><ul><li>Cp=(Uls - Lsl) / 6s<ul><li>Uls：上极限</li><li>Lsl：下极限</li><li>s：样品标准差</li></ul></li><li>单边Cp=Cpk=Cpu=Cpl=规格容许差 / 3</li></ul><div class="table-container"><table><thead><tr><th>等级</th><th>要求值</th><th>状态</th><th>处理方案</th></tr></thead><tbody><tr><td>A级</td><td>1.33 ≤ Cp</td><td>稳定</td><td>可考量缩小规格</td></tr><tr><td>B级</td><td>1.0 &lt; Cp ≤ 1.33</td><td>一般</td><td>必须加以注意，维持</td></tr><tr><td>C级</td><td>0.83 &lt; Cp ≤ 1.0</td><td>危险</td><td>检讨规格书及作业标准</td></tr><tr><td>D级</td><td>Cp ≤ 0.83</td><td>极差</td><td>停机，重新调整后生产</td></tr></tbody></table></div><h2 id="SOP"><a href="#SOP" class="headerlink" title="SOP"></a>SOP</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">说明</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li><code>Standard Operating Procedure</code>：标准作业程序</li><li>指将某一事件的标准操作步骤和要求以统一的格式描述出来，用于指导和规范日常的工作</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 几何公差</title>
      <link href="/undefined/42d2.html"/>
      <url>/undefined/42d2.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>资料等均来源与网络仅，限于个人学习使用</p></div><h2 id="几何公差符号一览表"><a href="#几何公差符号一览表" class="headerlink" title="几何公差符号一览表"></a>几何公差符号一览表</h2><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202210281943147.png" alt></p><h2 id="形状公差"><a href="#形状公差" class="headerlink" title="形状公差"></a>形状公差</h2><h3 id="真直度（直线度）"><a href="#真直度（直线度）" class="headerlink" title="真直度（直线度）"></a>真直度（直线度）</h3><details class="folding-tag" cyan open><summary> 真直度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_001_1809466.png" alt="真直度"></p><ul><li>指定“笔直度”的参数</li><li>标示应该呈现何等正确的笔直度。适用于直线而非平面对象，表示中心线、母线等的弯曲情况。因此，可用于设定长尺寸物体的容许翘曲等</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_form-tolerance_002_1809504.png" alt="真直度标注示例"></p><ul><li>表示圆柱直径的尺寸与形体控制框相连时，该圆柱的轴线必须位于直径0.1 mm的圆柱内</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p>​    <img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_straightness_001_1809381.png" alt="真直度的图纸示例"></p><details class="folding-tag" red><summary> 利用高度尺规测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_straightness_002_1809382.png" alt="a: 微型千斤顶 b: △H=真直度 c: 高度（Hn"></p><ul><li>为避免目标物倾斜，根据左右高度用小型千斤顶进行固定后，笔直移动目标物或高度尺规进行测量，最大值与最小值之差（ΔH），就是真直度</li><li>存在的问题点：<ul><li>高度尺规的精度通常都低于三坐标测量仪，用高度尺规测量部抵住目标物时的力度，会对测量值造成影响等问题，可能会导致测量结果不稳定</li><li>对于无法水平设置的目标物，不能移动高度尺规，故难以进行测量</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_straightness_003_1809383.png" alt="a: 探针 b: 目标物"></p><ul><li>三坐标测量仪只需用探针轻触目标物，就能进行测量。因此，几乎不会发生因测量压力导致的误差，可获得稳定的测量结果</li><li>探针能从各种角度接触目标物，对于因无法水平固定、很难用高度尺规测量的目标物，也能实现正确测量</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><h3 id="平面度"><a href="#平面度" class="headerlink" title="平面度"></a>平面度</h3><details class="folding-tag" cyan open><summary> 平面度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_form-tolerance_003_1809505.png" alt="平面度"></p><ul><li>指定“表面凸凹度”</li><li>标示应该呈现何等正确的平坦面。最凸起部分与最凹陷部分必须位于上下分离2个平面之间夹住的一定距离</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_form-tolerance_004_1809506.png" alt="平面度的标注示例"></p><ul><li>该表面必须位于仅相隔0.3 mm的2个平行平面之间</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p>​    <img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_flatness_001_1809353.png" alt="平面度的图纸示例"></p><details class="folding-tag" red><summary> 利用千分表测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_flatness_002_1809354.png" alt="a: 目标物 b: 工作台 c: 千分表"></p><ul><li>将目标物放置在精密平面工作台上并固定，装设千分表的测量部，使其可接触测量面</li><li>移动目标物，使测量位置均匀分布，读取千分表的示值。测得偏差的最大值，就是平面度</li><li>存在的问题点：<ul><li>目标物的移动方式会改变测量点，可能会产生不同的测量值。因此，很难得到稳定的测量值</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_flatness_003_1809355.png" alt="a: 目标物"></p><ul><li>用探针抵住4处以上的点位进行点测量，就能测得平面度</li><li>测量点更多，测量范围更广时，同样可实现高精度的稳定测量</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="真圆度"><a href="#真圆度" class="headerlink" title="真圆度"></a>真圆度</h3><details class="folding-tag" cyan open><summary> 真圆度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_003_1809468.png" alt="真圆度"></p><ul><li>指定“圆度”的参数</li><li>表示轴、孔、圆锥等圆形截面的圆度，标示应该呈现何等正确的圆形</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_form-tolerance_006_1809508.png" alt="真圆度的标注示例"></p><ul><li>任意轴直角截面的外周，必须位于在同一平面上仅相隔0.1 mm的2个同心圆之间</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_roundness_001_1809375.png" alt="真圆度的图纸示例"></p><details class="folding-tag" red><summary> 利用千分表测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_roundness_002_1809376.png" alt="a: 目标物 b: 千分尺测量端"></p><ul><li>对外形进行4至8等分后，测量2点间距，确认最大值与最小值，并将两值之差除以2，就能计算出真圆度<ul><li>真圆度＝（Dmax−Dmin）/2</li><li>Dmax：最大值</li><li>Dmin：最小值</li></ul></li><li>问题点：<ul><li>使用2点间距测量的平均值，精度有限</li><li>千分尺测量端子接触方式的区别也可能会导致误差</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_roundness_003_1809377.png" alt="a: 目标物 b: 平板"></p><ul><li>用探针抵住4处以上的点位进行点测量，就能测得真圆度</li><li>测量值是利用<a href="https://www.keyence.com.cn/ss/products/measure-sys/gd-and-t/measure/instrument.jsp#section3">最小二乘法</a>计算得出的，与各个测量点之间的误差之和最小</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="圆柱度"><a href="#圆柱度" class="headerlink" title="圆柱度"></a>圆柱度</h3><details class="folding-tag" cyan open><summary> 圆柱度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_004_1809469.png" alt="圆柱度"></p><ul><li>指定“圆度”与“笔直度”的参数</li><li>表示圆柱的歪曲度，标示应该呈现何等正确的圆柱形</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_form-tolerance_008_1809510.png" alt="真圆度的标注示例"></p><ul><li>作为对象的面，必须位于仅相隔0.1 mm的2个同轴圆柱面之间</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_cylindricity_001_1809347.png" alt="圆柱度的图纸示例"></p><details class="folding-tag" red><summary> 利用真圆度测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_cylindricity_002_1809348.png" alt="a: 目标物 b: 平板"></p><ul><li>将目标物放置在真圆度测量仪的旋转工作台上并固定</li><li>用探针抵住目标物，转动旋转工作台，对各测量点进行测量</li><li>若目标物较大，则固定工作台，旋转并上下移动探针</li><li>问题点：<ul><li>探针的可动区域有限，目标物较大时难以测量</li><li>由于测量仪只能测量真圆度或圆柱度，若需测量其他几何特性，必须准备支持其他功能的测量仪</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_cylindricity_003_1809349.png" alt="a: 目标物 b: 平板"></p><ul><li>只需通过点测量来测量目标物表面的4点以上，即可完成测量</li><li>通过改变探针的位置，能够从各类角度及位置进行测量</li><li>1台三坐标测量仪可支持各类几何特性的测量</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="线轮廓度"><a href="#线轮廓度" class="headerlink" title="线轮廓度"></a>线轮廓度</h3><details class="folding-tag" cyan open><summary> 线轮廓度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_005_1809470.png" alt="线轮廓度"></p><ul><li>这是标示设计部件“实际曲面是否与设计理想值一致”的参数</li><li>表示轮廓线（表面切断面呈现的线要素）的歪曲度。切断指定曲面的截面线，必须位于公差带内</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_profile_002_1809539.png" alt="线轮廓度的标注示例"></p><ul><li>在投影面平行的任一截面作为对象的轮廓必须在具有理论上正确轮廓的线上置中，并在直径0.03 mm的圆所产生的2条包络线之间</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_profile-line_001_1809364.png" alt="线轮廓度的图纸示例"></p><details class="folding-tag" red><summary> 利用投影仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_profile-line_002_1809365.png" alt="a 屏幕 b 接物透镜 c 目标物 d XY玻璃台 e 光线"></p><ul><li>准备好绘制有中心线（理论正确R形状）、体现规格宽度的描图纸</li><li>将描图纸贴放在屏幕上，将目标物放置在XY玻璃台上并投影，将屏幕上投射的目标物的R与描图纸上绘制的R重叠起来，确认是否位于公差内</li><li>问题点：<ul><li>目标物定位及原点定位操作耗费时间。手动操作投影也费时费力</li><li>对焦方式会改变测量结果，照明照射方式及光量也会改变边缘的观测效果，可能会导致测量误差</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_profile-line_003_1809366.png" alt="a: 目标物 b: 平板"></p><ul><li>设定基准要素（平面），测量与目标要素（平面）之间的偏差时，只需用探针抵住测量点即可，能够快速进行高精度的稳定测量</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="面轮廓度"><a href="#面轮廓度" class="headerlink" title="面轮廓度"></a>面轮廓度</h3><details class="folding-tag" cyan open><summary> 面轮廓度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_006_1809471.png" alt="面轮廓度"></p><ul><li>标示设计部件“实际曲面（表面）等是否与设计理想值一致”的参数</li><li>面轮廓度不同于线轮廓度，以整个指定曲面为对象</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_profile_004_1809541.png" alt="面轮廓度的标注示例"></p><ul><li>对象面必须在具有理论上正确轮廓的线上置中，并在直径0.1 mm的球所产生的2条弯曲线之间</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_profile-surface_001_1809369.png" alt="面轮廓度的图纸示例"></p><details class="folding-tag" red><summary> 利用轮廓测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_profile-surface_002_1809370.png" alt="a: 目标物 b: 轮廓测量仪"></p><ul><li>用探针抵住目标物的测量原点，指定测量长度并进行测量</li><li>利用读取到测量数据与测量仪中的理论正确数据进行分析，可以输出P/V值（相对于理论正确形状的最大值、最小值，以及标准偏差σ值）</li><li>问题点：<ul><li>探针的可动区域有限，目标物较大时难以测量</li><li>对于位于复杂位置的测量点，因为探针不能探入，无法进行测量</li><li>探针的重量（测量压力）可能还会导致测量面变形，使测量结果出现误差</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_f_profile-line_003_1809366.png" alt="a: 目标物 b: 平板"></p><ul><li>通过改变探针的位置，能够从各类角度及位置进行测量</li><li>只需用探针轻触测量点即可，不必担心因探针重量（测量压力）导致测量面变形这样一来，能够快速进行高精度的稳定测量</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h2 id="姿态公差"><a href="#姿态公差" class="headerlink" title="姿态公差"></a>姿态公差</h2><h3 id="平行度"><a href="#平行度" class="headerlink" title="平行度"></a>平行度</h3><details class="folding-tag" cyan open><summary> 平行度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_007_1809472.png" alt="平行度"></p><ul><li>类似于平面度，平行度中存在基准（作为基准的平面、直线）</li><li>平行度指定“2条直线或2个平面相互平行的程度”</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_orientation-tolerance_002_1809531.png" alt="平行度的标注示例"></p><ul><li>标示线箭头所指的面，必须位于与基准平面A平行，且与标示线箭头方向仅间隔0.05 mm的2个平面之间</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_o_parallelism_001_1809454.png" alt="平行度的图纸示例"></p><details class="folding-tag" red><summary> 利用千分表测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_o_parallelism_002_1809455.png" alt="a: 目标物 b: 平板 c: Δh＝平行度 d: 高度图"></p><ul><li>将目标物固定到平板上，笔直移动目标物或高度尺规进行测量，最高测量值与最低测量值之差就是平行度</li><li>问题点：<ul><li>因为用线进行测量，必须测量多处</li><li>当目标物属于非刚性部件（柔软的树脂产品及橡胶等）时，探针的重量（测量压力）会导致测量面变形，可能无法进行正确测量</li><li>对于无法将目标物基准面顺利固定到平板上的形状，难以进行测量</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_o_parallelism_003_1809456.png" alt="a: 目标物 b: 平板"></p><ul><li>只需用探针轻触目标物的4点，就能进行测量</li><li>只需用探针进行轻触，即使目标物是非刚性部件，也不会变形，可实现正确测量</li><li>能够改变探针抵住目标物的角度及位置，对于无法顺利固定到平板上的目标物，也能轻松进行基准要素的设定及测量</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="垂直度"><a href="#垂直度" class="headerlink" title="垂直度"></a>垂直度</h3><details class="folding-tag" cyan open><summary> 垂直度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_008_1809473.png" alt="直角度"></p><ul><li>指定相对于基准（作为基准的平面、直线）的“直角正确程度”</li><li><strong>直角度指定的数值单位并非角度，而是mm</strong></li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_orientation-tolerance_004_1809533.png" alt="垂直度的标注示例"></p><ul><li>标示线箭头所指的平面，必须位于与基准平面A垂直的平行平面中，且两个平行平面的间距为0.03 mm</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_o_perpendicularity_001_1809460.png" alt="垂直度的图纸示例"></p><details class="folding-tag" red><summary> 利用直角规或测隙规测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_o_perpendicularity_002_1809461.png" alt="a: 用测隙规测量该间隙 b: 目标物 c: 直角规 d: 平板"></p><ul><li>在按住直角规的同时抵住目标物，用测隙规或销规测量直角规与目标物的间隙，该间隙就是直角度</li><li>问题点：<ul><li>属于使用简易测量器具的测量，精度低，若测量面与置于平板上的面不垂直，将无法进行测量</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_o_perpendicularity_003_1809462.png" alt="a: 目标物 b: 平板"></p><ul><li>用探针抵住基准面（平板）上的多点，设定基准，再用探针抵住测量面（目标物）进行测量</li><li>借助这一方式，即使放置在平板上的目标物测量面不垂直，也能进行正确测量</li><li>还能测量圆柱、孔、圆锥轴线的直角度</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="倾斜度"><a href="#倾斜度" class="headerlink" title="倾斜度"></a>倾斜度</h3><details class="folding-tag" cyan open><summary> 倾斜度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_009_1809474.png" alt="倾斜度"></p><ul><li>指定的直线及平面非90°时，指定“相对于基准（作为基准的平面、直线）是否呈现正确倾斜状态”</li><li><strong>倾斜度指定的数值单位并非角度，而是mm</strong></li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_orientation-tolerance_006_1809535.png" alt="倾斜度的标注示例"></p><ul><li>标示线箭头所指的面，必须与基准平面A准确呈现45°的理论倾斜，且位于与标示线箭头方向仅间隔0.3 mm的·2个平行平面之间</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_o_angularity_001_1809445.png" alt="倾斜度的图纸示例"></p><details class="folding-tag" red><summary> 利用千分表测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_o_angularity_002_1809446.png" alt="a: 按住 b: 目标物 c: 支架 d: 平板 e: 角板 f: 心轴"></p><ul><li>使用市售的角板或支架，以正确的角度将目标物固定到基准平面上</li><li>使用心轴或销规，能使测量变得更加方便</li><li>倾斜与图纸一致时，已装设的心轴（或销规）呈水平，在该状态下，用千分表测量心轴的平行度</li><li>千分表跳动的最大示数值与最小示数值之差，就是倾斜度</li><li>问题点：<ul><li>而当测量部位为面时，由于测量点较多，测量值会产生误差</li><li>对于无法顺利固定到角板上的目标物，难以进行测量</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_o_angularity_003_1809447.png" alt="a: 目标物 b: 三坐标测量仪平板"></p><ul><li>用探针抵住基准面上的多点，设定基准，再用探针抵住目标物的测量面进行测量</li><li>存在第2次基准、第3次基准等基准体系时，也可进行同样的设定及测量</li><li>能够缩短装设目标物所需的时间，并正确测量无法固定到平板上的目标物</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h2 id="位置公差"><a href="#位置公差" class="headerlink" title="位置公差"></a>位置公差</h2><h3 id="位置度"><a href="#位置度" class="headerlink" title="位置度"></a>位置度</h3><details class="folding-tag" cyan open><summary> 位置度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_010_1809476.png" alt="位置度"></p><ul><li>指定“相对于基准（作为基准的平面、直线）的位置正确程度”的精度</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_location-tolerance_002_1809517.png" alt="a: 直径0.1 mm范围内"></p><ul><li>标示线箭头所指的圆的中心点，必须位于直径0.1 mm的圆中</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_location-tolerance_002_1809517.png" alt="a: 直径0.1 mm范围内"></p><details class="folding-tag" red><summary> 利用量规测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_l_position_002_1809418.png" alt></p><ul><li>利用测量规及检测规进行合格判定</li><li>其优点是测量操作者的熟练度不会影响作业速度及检测品质，能够轻松测量，并支持自动化</li><li>问题点：<ul><li>必须根据目标物分别定制量规，特制量规还会产生初始成本，难以在试作阶段导入</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_l_position_003_1809419.png" alt="a: XY面 基准平面A b: ZX面 基准平面B c: YZ面 基准平面C d: 目标物 e: 平板"></p><ul><li>设定基准面，用探针抵住目标物的测量点进行测量。测量结果会立即显示在画面上</li><li>还能测量直交坐标，单次测量即可输出复合位置度</li><li>测量孔洞时，通过测量深度不同的多个点位，还能输出圆柱度、直角度、真直度等的验证结果</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="同轴度"><a href="#同轴度" class="headerlink" title="同轴度"></a>同轴度</h3><details class="folding-tag" cyan open><summary> 同轴度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_011_1809478.png" alt="同轴度"></p><ul><li>指定“2个圆柱的轴同轴 （<strong>中心轴</strong>无偏差）的程度”</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_location-tolerance_004_1809519.png" alt="同轴度的标注示例"></p><ul><li>标示线箭头所指的圆柱轴线，必须位于以基准轴直线A为轴线的、直径0.03 mm的圆柱中。</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_location-tolerance_004_1809519.png" alt="同轴度的图纸示例"></p><details class="folding-tag" red><summary> 利用千分表测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_l_coaxiality_002_1809403.png" alt="a: 测量位置不限"></p><ul><li>固定目标物，用千分表抵住附带公差标示的外周顶点</li><li>旋转目标物，测量千分表跳动的最大示数值与最小示数值</li><li>在指定的轴线上重复测量，将其中的最大差值作为同轴度</li><li>问题点：<ul><li>用千分表抵住目标物的角度及力度，会改变测量值，因此不同操作者测得的值可能会出现差异</li><li>还必须在指定的轴线上反复测量，不停地检查测量，确认结果</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_l_coaxiality_003_1809404.png" alt="a: 平板"></p><ul><li>用探针抵住基准要素（圆柱）的测量点进行测量，再用探针抵住目标要素（圆柱）的测量点，就能完成测量，测量结果将被记录在测量仪中</li><li>探针的接触方式，分为“点测量”（每次都要用探针抵住点，进行测量）和“自动触发（扫描）测量”（在抵住探针的状态下移动，测量连续的点）</li><li>借助上述方法，还能对探针难以探入的圆柱内侧进行螺旋移动测量</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="同心度"><a href="#同心度" class="headerlink" title="同心度"></a>同心度</h3><details class="folding-tag" cyan open><summary> 同心度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_011_1809478.png" alt="同心度符号与同轴度一致"></p><ul><li>指定“2个圆柱的轴同轴 （<strong>中心点</strong>无偏差）程度”的精度</li><li>与同轴度的区别在于，基准要素是中心点（平面）</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_location-tolerance_006_1809521.png" alt="a: 0.05mm圆的范围内"></p><ul><li>标示线箭头所指的圆柱轴线，必须位于以基准轴直线A为轴线的、直径0.05 mm的圆柱中</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_location-tolerance_004_1809519.png" alt="同心度的图纸示例"></p><details class="folding-tag" red><summary> 利用千分表测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_l_concentricity_002_1809409.png" alt="a: 指定的位置测量"></p><ul><li>固定目标物，用千分表抵住附带公差标示的轴的外周顶点</li><li>旋转测量物，测量千分表跳动的最大示数值与最小示数值</li><li>在指定的圆周上进行测量，将其中的最大差值作为同心度</li><li>问题点：<ul><li>用千分表抵住目标物的角度及力度，会改变测量值，因此不同操作者测得的值可能会出现差异</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_l_concentricity_003_1809410.png" alt="a: 平板"></p><ul><li>不同于同轴度，将平面圆作为测量对象</li><li>用探针抵住基准圆的测量点进行测量，再用探针抵住目标圆的测量点实施测量</li><li>只需用探针轻触即可，不会损伤目标物</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="对称度"><a href="#对称度" class="headerlink" title="对称度"></a>对称度</h3><details class="folding-tag" cyan open><summary> 对称度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button><button type="button" class="tab " data-href="test4-3">测量方法</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_012_1809479.png" alt="对称度"></p><ul><li>指定“相对于基准（作为基准的平面）保持对称”的精度</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_location-tolerance_008_1809523.png" alt="a: 距离理论中心面0.05mm以内 b: 理论中心面"></p><ul><li>标示线箭头所指的中心面，必须位于与基准中心平面A对称间隔0.05 mm的2个平行平面之间</li></ul></div><div class="tab-item-content" id="test4-3"><p>图纸示例：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_location-tolerance_008_1809523.png" alt="a: 距离理论中心面0.05mm以内 b: 理论中心面"></p><details class="folding-tag" red><summary> 利用游标卡尺、千分尺测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_l_symmetry_002_1809424.png" alt="游标卡尺测量"></p><ul><li>用模拟游标卡尺或千分尺测量目标物的各部位，确认对称性</li><li>能够轻松快速地确认结果，在对单一工件进行重复测量时更加方便</li><li>游标卡尺和千分尺的种类很多，需要根据测量的位置及形状区分使用</li><li>问题点：<ul><li>测量值精度及测量速度取决于操作者的熟练度，还会出现器具导致的测量误差</li><li>作为测量2点间长度的方法，能够测量尺寸，却难以测量几何公差（形状）</li></ul></li></ul>              </div>            </details><details class="folding-tag" green><summary> 利用三坐标测量仪测量 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_l_symmetry_003_1809425.png" alt="a: 载物台 b: 平板"></p><ul><li>设定基准要素（平面），测量与目标要素（平面）之间的偏差时，只需用探针抵住测量点即可，能快速进行正确测量</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h2 id="跳动公差"><a href="#跳动公差" class="headerlink" title="跳动公差"></a>跳动公差</h2><h3 id="圆跳动"><a href="#圆跳动" class="headerlink" title="圆跳动"></a>圆跳动</h3><details class="folding-tag" cyan open><summary> 圆跳动 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_run-out-tolerance_001_1809544.png" alt="圆跳动"></p><ul><li>指定部件“旋转时任意圆周部分的跳动”</li><li>圆跳动，即旋转部件时测量值的跳动，必须处于规定范围内</li></ul></div><div class="tab-item-content" id="test4-2"><p>!<img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_run-out-tolerance_002_1809545.png" alt="圆跳动的标注示例"></p><ul><li>围绕基准轴直线旋转1周时，在垂直于基准轴直线的任意测量平面上，标示线箭头所指圆柱面的半径方向跳动不得超过0.03 mm</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="全跳动"><a href="#全跳动" class="headerlink" title="全跳动"></a>全跳动</h3><details class="folding-tag" cyan open><summary> 全跳动 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注示例</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_run-out-tolerance_003_1809546.png" alt="全跳动"></p><ul><li>指定部件“旋转时整个表面的跳动”</li><li>全跳动，即圆柱面整体测量值的跳动，必须处于规定范围内</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_t_run-out-tolerance_004_1809548.png" alt="全跳动的标注示例"></p><ul><li>围绕基准轴直线旋转圆柱部分时，在圆柱表面上的任意点，标示线箭头所指圆柱面的半径方向全跳动不得超过0.03 mm</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h2 id="附加符号"><a href="#附加符号" class="headerlink" title="附加符号"></a>附加符号</h2><h3 id="包络条件"><a href="#包络条件" class="headerlink" title="包络条件"></a>包络条件</h3><details class="folding-tag" cyan open><summary> 包络条件 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">图示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_015_1809482.png" alt="包络条件"></p><ul><li>“E”是Envelope（信封）的缩写，标示尺寸公差、几何公差的相互依存性</li><li>管控理想形状的包络面全跳动，即圆柱面整体测量值的跳动，使用该符号进行标示时，需要将具备最大实体尺寸的理想形状包络面视为“信封”，尺寸公差在该范围内的部件合格，超出该范围的部件就会被判定为不合格</li><li>将包络条件适用于尺寸时，需要在尺寸公差之后标注</li></ul><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_envelope-requirement_008_1809237.png" alt="E的图解"></p></div><div class="tab-item-content" id="test4-2"><ul><li>指的是在图纸标示尺寸公差的最大实体状态下，未发生变形的区域，目标物必须存在于最大实体尺寸的区域内</li></ul><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_envelope-requirement_005_1809234.png" alt="图纸标示"></p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_envelope-requirement_006_1809235.png" alt="理想状态包络面 a: φ5.0（最大实体尺寸）"></p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_envelope-requirement_007_1809236.png" alt="不超出理想状态包络面的要素 a: φ5.0（最大实体尺寸）"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="非刚性部件的自由状态"><a href="#非刚性部件的自由状态" class="headerlink" title="非刚性部件的自由状态"></a>非刚性部件的自由状态</h3><details class="folding-tag" cyan open><summary> 非刚性部件的自由状态 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注</button><button type="button" class="tab " data-href="test4-3">图示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_016_1809483.png" alt="非刚性部件的自由状态"></p><ul><li>“F”是Free state的缩写，代表在自由状态下的变形会超出尺寸公差及几何公差的部件</li><li>橡胶、树脂等材质的部件，可能会因制造工序中产生的内部应力释放，发生超出图纸预期标示的变形，这类部件被称为“非刚性部件”</li><li>对于非刚性部件，需要标示仅承受重力状态（自由状态）下的几何公差。还必须标明相应部件属于非刚性部件，并明确标注满足公差的状态（重力方向等）</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_free-state_001_1809240.png" alt="非刚性部件的标注"></p><ul><li>通常情况下，几何公差的适用对象都是刚性部件</li><li>对于在自由状态下会发生超出尺寸公差或几何公差的变形的部件，必须在形体控制框的几何公差之后标注，表明该部件属于非刚性部件</li></ul></div><div class="tab-item-content" id="test4-3"><ul><li>下图中的标示，意为“基准B以何种姿态都不会超出真圆度5.0 mm，且左侧圆跳动在受限的状态下适用”</li></ul><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_free-state_002_1809241.png" alt="非刚性部件的指定示例"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="最小实体要求"><a href="#最小实体要求" class="headerlink" title="最小实体要求"></a>最小实体要求</h3><details class="folding-tag" cyan open><summary> 最小实体要求 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注</button><button type="button" class="tab " data-href="test4-3">图示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_017_1809484.png" alt="最小实体要求的适用"></p><ul><li>“L”是Least Material Requirement（LMR：最小实体要求）的缩写，是标示适用最小实体要求的符号</li><li>将最小实体要求适用于尺寸时，需要在形体控制框的尺寸公差之后标注。根据实际情况，有时会标注在基准符号之后</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_lmr_002_1809248.png" alt="最小实体要求的标注"></p></div><div class="tab-item-content" id="test4-3"><ul><li>下图是用位置度表示最小厚度时，用最小实体要求标示端面与孔洞的示例</li><li>在尺寸容许区间适用最小实体要求时，位置度Φ0.5仅适用于孔24为最小实体状态的Φ24.1。此时，孔洞越小，几何公差就越能得到缓和</li></ul><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_lmr_003_1809249.png" alt="最小实体要求的指定示例"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="最大实体要求"><a href="#最大实体要求" class="headerlink" title="最大实体要求"></a>最大实体要求</h3><details class="folding-tag" cyan open><summary> 最大实体要求 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">公差尺寸的处理</button><button type="button" class="tab " data-href="test4-3">公差动态图表现最大实体要求</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_018_1809485.png" alt="最大实体要求的适用"></p><ul><li>“M”是Maximum Material Requirement（MMR：最大实体要求）的缩写，是标示适用最大实体要求的符号</li><li>将最大实体要求适用于尺寸时，需要在形体控制框的尺寸公差之后标注</li></ul><!-- tab 标注--><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_mmr_001_1809252.png" alt="Φ20（0-0.2）的轴线必须位于与基准A平行相距0.3的2个平面之间"></p><ul><li>为了嵌合2个部件，在设计时采用了“最大实体要求”</li><li>例如，在设计能够嵌合孔洞的轴处于最大实体状态（MMC）时，使用这种标示方式，能够避免在实际嵌合时发生“无法嵌合”的情况，并避免为防止上述情况而设定过严尺寸公差的现象</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li>在最大实体要求中，必须遵守尺寸公差。但是，当尺寸公差偏离最大实体尺寸时，通过对几何公差追加差分，可设定为实效尺寸</li><li>实效尺寸：规定要素实效状态的尺寸。对外形轮廓而言，等于“最大容许尺寸＋姿态公差或位置公差”<br>对内部轮廓而言，等于“最小容许尺寸－姿态公差或位置公差”</li></ul><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_mmr_002_1809253.png" alt></p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_mmr_003_1809254.png" alt="a: 实效尺寸"></p></div><div class="tab-item-content" id="test4-3"><ul><li>所谓“公差动态图”，就是直观表现尺寸公差与几何公差的公差区域变化的工具</li><li>纵轴表示几何公差、横轴表示尺寸公差，能够同时显示尺寸公差与几何公差的波动</li><li><p>适用最大实体要求后，几何公差得到缓和时产生的公差补偿也能够被明确地表现出来</p></li><li><p>图纸标示：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_mmr_004_1809255.png" alt="a: 轴 b: 轴座"></p></li><li><p>公差动态图：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_mmr_005_1809256.png" alt="a: 真直度 b: 轴的尺寸公差 c: 孔的尺寸公差"></p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="投影公差带"><a href="#投影公差带" class="headerlink" title="投影公差带"></a>投影公差带</h3><details class="folding-tag" cyan open><summary> 投影公差带 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注</button><button type="button" class="tab " data-href="test4-3">图示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_019_1809486.png" alt="投影公差带的标示"></p><ul><li>适用于要素突出部的公差</li><li>大多数情况下，适用几何公差的区域都仅限图纸中标示要素的范围内，而投影公差带则能够对标示要素的对象部件的虚拟区域进行标示</li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_projected-tolerance-zone_001_1809259.png" alt="投影公差带的标明"></p><ul><li>适用于组合对象部件范围的投影公差带（Projected tolerance area），需要在形体控制框中写明表示突出长度的数值后标注</li></ul></div><div class="tab-item-content" id="test4-3"><ul><li>下图中的标注意为“在与基准A成直角，且与基准B相距40处的Φ28、突出长度30 mm的全高范围内，位于虚拟空间中的Φ28轴心必须位于Φ0.5的圆柱区域内”</li><li>突出部用较细的双点划线表示，借助该标示，只要未超出容许差，就能切实组装部件</li></ul><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_a_projected-tolerance-zone_002_1809260.png" alt="投影公差带的指定示例"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="不使用实体要求"><a href="#不使用实体要求" class="headerlink" title="不使用实体要求"></a>不使用实体要求</h3><details class="folding-tag" cyan open><summary> 不使用实体要求 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_020_1809487.png" alt="不使用实体要求"></p><ul><li>ANSI（美国国家标准化协会）规格中的符号</li><li>“Regardless of Feature Size（RFS）”的缩写。在2009年版ASME Y14.5中被删除</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="切面的标示"><a href="#切面的标示" class="headerlink" title="切面的标示"></a>切面的标示</h3><div class="note info flat"><p>仅限于ASME（美国机械工程协会）</p></div><details class="folding-tag" cyan open><summary> 切面的标示 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_021_1809488.png" alt="切面的标示（仅限ASME）"></p><ul><li>“T”是Tangent Plane的缩写，代表在标示的表面范围内，与对象表面相切的平面相对于基准平面的倾斜程度，用平行度表示这一程度。不同于平行度，仅要求表面的凸部，对凹部不作要求</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="轮廓度公差的非对称分布"><a href="#轮廓度公差的非对称分布" class="headerlink" title="轮廓度公差的非对称分布"></a>轮廓度公差的非对称分布</h3><div class="note info flat"><p>仅限于ASME（美国机械工程协会）</p></div><details class="folding-tag" cyan open><summary> 轮廓度公差的非对称分布 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_022_1809489.png" alt="轮廓度公差的非对称分布（仅限ASME）"></p><ul><li>“U”是Unequally Disposed Profile的缩写，对于面轮廓度，管控偏移量可超出公差带的范围（公差带的极限）。ISO中标注为“UZ”</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="带公差要素"><a href="#带公差要素" class="headerlink" title="带公差要素"></a>带公差要素</h3><details class="folding-tag" cyan open><summary> 带公差要素 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">形体控制框</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_023_1809490.png" alt="带公差要素"></p><ul><li>标示符号、公差、几何公差的种类、位置等</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>几何公差用“形体控制框”标示。形体控制框中应包含下列要素</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_b_tolerance-entry-frame_001_1809315.png" alt="形体控制框"></p><ul><li><p><strong>a：几何特性符号</strong></p><p>标注几何公差的种类</p></li><li><p><strong>b：直径符号（必要时）</strong></p><p>必须标注的几何特性如下所示：</p><p>二维平面中的圆中区域：位置度、同心度</p><p>三维空间中的圆柱中区域：真直度、平行度、直角度、倾斜度、位置度、同轴度</p><p>三维空间中的球体中区域：位置度</p></li><li><p><strong>c：几何公差值</strong></p><p>公差的值，单位为mm（毫米）</p></li><li><p><strong>d：实体公差、公共公差带等</strong></p><p>主要包括“最大实体要求”、“最小实体要求”、“CZ （公共公差带：Common Zone） ”等</p></li><li><p><strong>e：优先基准</strong></p><p>将设计者需要优先设定为基准的部分指定为基准</p><p>标注多项基准时，按照从左到右、优先度从高到低的顺序进行标注</p><p>通常情况下，设计者会按照优先度顺序，决定基准的字母，因此越靠前的字母优先度越高</p></li></ul></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="基准标示"><a href="#基准标示" class="headerlink" title="基准标示"></a>基准标示</h3><details class="folding-tag" cyan open><summary> 基准标示 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">基准的种类</button><button type="button" class="tab " data-href="test4-3">基准要素的图纸标注</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_024_1809491.png" alt="基准标示"></p><ul><li>基准的位置</li><li>所谓基准（datum），就是在进行加工及尺寸测量时作为基准的面、线、点</li></ul></div><div class="tab-item-content" id="test4-2"><p>基准分为“基准要素”与“模拟基准要素”。还有组合2个以上的基准，指定要素的“基准体系”</p><ul><li><p><strong>基准要素</strong></p><p>用于设定基准的目标物实际要素（部件的表面、孔洞等）</p></li><li><p><strong>模拟基准要素</strong></p><p>在设定基准时与基准要素相接，形状极其精密的实际表面（平板、轴承、心轴等）</p></li><li><p><strong>基准体系</strong></p><p>为了设定带公差要素的基准，组合使用2个以上不同基准的基准组</p><p>标示为基准的部件的面，并不具备理想的形状，必须将拥有更精密表面的平板、尺规、心轴等作为实用基准，进行接触</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_b_datum_001_1809278.png" alt="a: 对象部件 b: 基准（概念） c: 基准要素（部件的面或线） d: 模拟基准要素（平板及尺规的面或线） e: 平板、尺规、心轴等"></p></li></ul></div><div class="tab-item-content" id="test4-3"><details class="folding-tag" red><summary> 标示平面或圆弧面 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_b_datum_002_1809279.png" alt="基准要素的图纸标注"></p><ul><li>基准可通过下列符号（基准符号）进行标注。基准符号由镂空或涂黑的三角形标注</li><li>而代表基准的英文字母必须与图纸的方向一致</li><li>此外，作为对象的区域，会因图纸中基准符号的位置而异。为了严谨传达设计意图，请注意标示基准的位置</li></ul>              </div>            </details><details class="folding-tag" green><summary> 标示轴线或中心平面 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_b_datum_003_1809280.png" alt="标示轴线或中心平面"></p><ul><li>将尺寸线与基准合并在一处，标示基准要素</li><li>标示的基准要素中心，将成为基准轴或基准中心平面</li></ul>              </div>            </details><details class="folding-tag" yellow><summary> 标示母线 </summary>              <div class="content">              <p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_b_datum_004_1809281.png" alt="标示母线"></p><ul><li>标示时需错开基准要素的尺寸线与基准</li><li>标示的基准要素中心，将成为基准轴或基准中心平面</li></ul>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="基准目标"><a href="#基准目标" class="headerlink" title="基准目标"></a>基准目标</h3><details class="folding-tag" cyan open><summary> 基准目标 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">标注方式</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_025_1809492.png" alt="基准目标"></p><ul><li><p>用于设定基准的点、线、区域</p></li><li><p>所谓“基准目标”，就是在设定基准时，与加工/测量/检测用装置、器具等发生接触的目标物上的点、线或限定区域</p></li><li><p>基准目标的必要性：</p><p>当设定为基准的面呈现凸凹起伏等不当形状时，若将这整个表面标示为基准要素，在加工及检测时可能会产生较大的误差，若在这种状态下进行测量，可能会造成重复性及再现性恶化。此外，若将凹面底部设定为基准面，基准面可能无法直接接触平板。这种时候就可以标示基准目标，仅将必要最小限度的部分设定为基准</p></li></ul></div><div class="tab-item-content" id="test4-2"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_da_target_001_1809327.png" alt="a: 标注框格 b: 符号"></p><ul><li><p>标注基准目标时，需使用被横线一分为二的圆形框格（基准目标框格）</p></li><li><p>标注基准目标框格的下半段时，需填写标示基准的文字符号（与要素整体的基准一样）及代表基准目标的数字编号</p></li><li><p>标注点：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_da_target_002_1809328.png" alt="点时"></p></li><li><p>标注圆形区域：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_da_target_003_1809329.png" alt="圆形区域时"></p></li><li><p>标注长方形区域：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_da_target_004_1809330.png" alt="长方形区域"></p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="理论正确尺寸"><a href="#理论正确尺寸" class="headerlink" title="理论正确尺寸"></a>理论正确尺寸</h3><details class="folding-tag" cyan open><summary> 理论正确尺寸 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button><button type="button" class="tab " data-href="test4-2">位置的指定</button><button type="button" class="tab " data-href="test4-3">公差带的指定</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_026_1809493.png" alt="理论正确尺寸（TED）"></p><ul><li>用“理论正确尺寸（TED：Theoretically Exact Dimension）”标示几何公差（位置度、轮廓度、倾斜度）</li><li>TED会用方框（□）围起理论正确尺寸，将与该位置相关的公差填入形体控制框</li></ul></div><div class="tab-item-content" id="test4-2"><p>进行如下图所示的位置指定时，尺寸公差标示的基准尺寸和公差均会成为尺寸公差的总和（累积公差），无法指定正确位置。而利用TED进行标示时，因其不附带公差，不会引发累积公差的问题</p><ul><li><p>利用尺寸公差进行指定：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_b_drawing-symbol_017_1809300.png" alt="孔间距离最大为45.3"></p></li><li><p>利用TED进行指定：</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_b_drawing-symbol_018_1809301.png" alt="孔间距离最大为45.1"></p></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>在指定公差带时，真位置度理论会在公差值的中心，正确标示需要用TED管控的位置</p></li><li><p>要素为点时，公差带就是以该点为中心的圆形（a）或球形</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_b_drawing-symbol_019_1809302.png" alt="（a）"></p></li><li><p>要素为直线时，则公差带为以该直线个别正确离开公差值一半的平行二平面（b）</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_b_drawing-symbol_020_1809303.png" alt="（b）"></p></li><li><p>或以该直线为中心的圆柱公差带（c）</p><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_b_drawing-symbol_021_1809304.png" alt="（c）"></p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="公共公差带"><a href="#公共公差带" class="headerlink" title="公共公差带"></a>公共公差带</h3><details class="folding-tag" cyan open><summary> 公共公差带 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_027_1809494.png" alt="公共公差带"></p><ul><li>“CZ”是Common Zone的缩写。将位于不同位置的多个要素视为1个公差带的指定方法</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="轮廓度（整个外周）"><a href="#轮廓度（整个外周）" class="headerlink" title="轮廓度（整个外周）"></a>轮廓度（整个外周）</h3><details class="folding-tag" cyan open><summary> 轮廓度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_028_1809495.png" alt="轮廓度（整个外周）"></p><ul><li>将几何公差适用于箭头所指的要素的整个外周</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab --><h3 id="轮廓度（整体）"><a href="#轮廓度（整体）" class="headerlink" title="轮廓度（整体）"></a>轮廓度（整体）</h3><details class="folding-tag" cyan open><summary> 轮廓度 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">符号</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="https://www.keyence.com.cn/Images/ss_gd-and-t_s_index_029_1809496.png" alt="轮廓度（整体）"></p><ul><li>将几何公差适用于箭头所指的整个要素</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><!-- endtab -->]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机械制图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械基础 - 表面加工处理</title>
      <link href="/undefined/4ffb.html"/>
      <url>/undefined/4ffb.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>内容说明：资料等均收集于网络，版权归发布者所有，如有侵权，请联系进行删除</p></div><h2 id="烫金"><a href="#烫金" class="headerlink" title="烫金"></a>烫金</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>利用热压转移的原理，将电化铝中的铝层转印到承印物表面以形成特殊的金属效果</li><li>因烫金使用的主要材料是电化铝箔，因此烫金也叫电化铝烫印</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>图案清晰美观、色彩夺目、耐磨、耐候</li><li>具有较高的防伪性能装饰</li><li>属于不可逆工艺，返工成本较高</li></ol></li><li><p>应用场景：</p><p>图书封面烫金、礼品盒烫金、烟酒、服装的商标、贺卡、请柬等</p></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li>工艺流程图：</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/烫金工艺流程.png"></p><ul><li><p>视频：</p><p><a href="https://v.douyin.com/6g5sgBN/" target="单独页面">视频地址：点击跳转</a> </p></li><li><p>成品展示：</p></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202209261944092.png"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="丝网印刷"><a href="#丝网印刷" class="headerlink" title="丝网印刷"></a>丝网印刷</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>丝网印刷工艺，简称丝印工艺,属于四大印刷术之一</li><li>丝网通过菲林曝光腐蚀预制,这个过程称为晒网</li><li>每平方英寸拥有的网孔数称为目数，目数越高，对油墨品质的要求也相对越高</li><li>丝网印刷凭借着其广泛的应用范围,便携的操作过程和低廉的价格,几乎占据了批量生产产品的LOGO及其简单图案绝大部分的市场份额</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>丝印几乎可以用于任何材料、漆膜的表面施工</li><li>操作简单、设备简单、生产环境要求不高、重复性强、原材料来源广泛、类型丰富、采购成本低<br>质感略差、肌理感官档次较低</li><li>不适用于复杂曲面和过深的凹坑</li><li>3.丝印一次只能施工一个颜色，每超过一个颜色则需要加开一个网板，称之为分色；每个颜色的网板单独操作丝印过程，称之为套色。由于丝印工艺本身的精度限制，套色容易发生偏差，所以丝印一般不推荐施工多色或者渐变色之类的复杂色彩</li></ol></li><li><p>应用场景：</p><p>纸类印刷、塑料印刷、木制品印刷、金属制品印刷、玻璃陶瓷制品印刷、印染、皮革制品印刷等</p></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li>工艺流程图：</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202209292018861.png"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202210051921111.png"></p><ul><li><p>视频：</p><p><a href="https://v.douyin.com/M11mSTL/" target="单独页面">视频地址：点击跳转</a></p></li><li><p>成品展示：</p></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202210051931385.png"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="移印"><a href="#移印" class="headerlink" title="移印"></a>移印</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>是丝网印刷工艺的一种补充拓展手段，属于<strong>特种印刷方式</strong>之一</li><li>能在不规则异形对象表面上印刷文字、图形、图像</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>可以应用在凹槽、工件背面等丝印无法加工的部位</li><li>因为丝网印刷的目数限制，移印的图案精度相对较高一些</li><li>移印机是自动设备，可以进行套色印刷，操作便携，设备全自动操作成本低廉，除了设备比较贵，其他成本基本和丝印一致</li><li>效果普通，有面积限制，制作尺度有上限，无法制作面积过大的图案，</li><li>虽然可以套色操作，仍难以制作渐变色</li></ol><p><span class="p red">注意：在使用UⅣ油墨进行施工的情况下，需要使用暗房或者注意遮光，防止UV油墨固化损伤移印模头和钢版。</span></p></li><li><p>应用场景：</p><p>玻璃制品、塑料制品、金属制品、钟表以及电子、光学制品等</p></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li>工艺流程图：</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/移印工艺流程图.png"></p><ul><li><p>视频：</p><p><a href="https://v.douyin.com/6gHh9jF/" target="单独页面">视频地址：点击跳转</a></p></li><li><p>成品展示：</p></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202209271929582.png"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="涂布"><a href="#涂布" class="headerlink" title="涂布"></a>涂布</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>涂布是用胶棍或者其他方式将流质/半流质敷料均匀涂抹在片材或者膜材上的工艺</li><li>按照涂布方式、涂布工艺可以分为：<strong>精密网纹辊涂布</strong>、<strong>刮刀涂布</strong>、<strong>凹版涂布</strong>、<strong>狭缝涂布</strong>等几种方式</li><li>涂布工艺使用的材料：<ol><li>热固性树脂<ul><li>热固性树脂涂料需要高温烘烤固化，通常称为烤漆，一般用在耐高温材料上，主要是金属上。</li><li>目前汽车行业广泛应用的静电喷漆技术，就是在传统喷漆的基础上使用了静电吸附技术，使涂料颗粒结合的更加致密均匀，外观更美观、性能更加优良。</li></ul></li><li>PU涂料<ul><li>PU树脂属于自固/热固型涂料，膜厚较厚，覆盖力较强，对工件表面不良容忍度高，一般只需要单涂、单烤即可满足大部分外观需求，设备简单，成本低廉</li></ul></li><li>UV涂料<ul><li>UV涂料固化温度低，—般情况下60~80℃烤干即可，不依赖高温烘烤</li><li>UV体系的树脂不能跟其他体系的树脂混用，UV涂料一般需要至少2层喷涂，首先需要在工件上打底漆来增加附着力、遮盖素材缺陷以及着色等，某些特殊效果需要增加中涂,用以增加珠光、金属质感等，最后喷涂UV层加以保护</li></ul></li><li>水性涂料<ul><li>水性涂料一般指用水稀释加工，不需要挥发性稀释剂的涂料总称</li><li>传统水性涂料一般应用在家具、地面、婴幼儿用品、食品接触器具等领域</li></ul></li></ol></li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>常用于对卷材的施工,速度快、产能高</li><li>一般用于薄膜上离心剂、热熔胶、压敏胶、处理液等加工</li><li>小型化、精致化、适用于流水线作业</li></ol></li><li><p>应用场景：</p><p>涂布工艺已经广泛的应用于食品、医药、电子、建筑等行业</p></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li>工艺流程图：</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202209271935826.png"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202209271936972.png"></p><ul><li><p>视频：</p><p><a href="https://v.douyin.com/6s1dgJf/" target="单独页面">视频地址：点击跳转</a></p></li><li><p>成品展示：</p></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202209291956533.png"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202209292007627.png"></p><ul><li>飞机中运用到的<code>Flexible Printed Circuit</code>的简称是:<code>FPC</code>；又称软性线路板、柔性印刷电路板，挠性线路板，简称：软板，是用柔性的绝缘基材制成的印刷电路</li><li>具有配线密度高、重量轻、厚度薄的特点</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="喷砂"><a href="#喷砂" class="headerlink" title="喷砂"></a>喷砂</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>采用压缩空气为动力，以形成高速喷射束将喷料（铜矿砂、石英砂、金刚砂、铁砂、海砂）高速喷射到需处理工件表面，使工件表面的外表或形状发生变化</li><li>由于磨料对工件表面的冲击和切削作用，使工件的表面获得一定的清洁度和不同的粗糙度，使工件表面的机械性能得到改善，因此提高了工件的抗疲劳性，增加了它和涂层之间的附着力，延长了涂膜的耐久性，也有利于涂料的流平和装饰</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>可以在不同粗糙度之间任意选择，从而获得不同粗糙度的工件表面。</li><li>喷砂处理是最彻底、最通用、最迅速、效率的清理方法</li></ol></li><li><p>分类：</p><ol><li>压入式喷砂和吸入式喷砂</li><li>干式喷砂和液体喷砂</li><li>开放式喷砂和箱（房）式喷砂</li></ol></li><li><p>应用场景：</p><ol><li><strong>预处理</strong>：电镀、喷漆、喷涂等所有被覆盖加工前喷砂处理，表面绝对清洁，同时大大提高覆盖层附着力及防腐蚀能力</li><li><strong>清理</strong>：铸造件、冲压件、焊接件、热处理件等金属工件去氧化皮、残渣、污垢;非金属制品表面清理，陶瓷胚件表面黑斑清除及还原漆纹图案等</li><li><strong>旧件翻新</strong>：汽车、摩托车、机电设备等所有运动部件的翻新清洗。同时消除疲劳应力，延长使用寿命</li><li><strong>光饰</strong>：所有金属制品及非金属制品（塑胶、水晶、玻璃等）表面痕迹消除，亚光雾面处理，使产品表面提升档次</li><li><strong>模具处理</strong>：模具表面氩光雾面处理，图文制作，以及模具清理，不伤及模具表面，保证模具精度</li><li><strong>毛刺处理</strong>：机加工零件微小毛刺去除，注塑零件溢胶毛边消除</li><li><strong>不良品返工</strong>：产品不良覆盖层去除，表面不良着色及印字的去除</li><li><strong>强化</strong>：增加金属件表面硬度，消除应力，如飞机叶片、弹簧、机加工刀具及武器等表面处理</li><li><strong>刻蚀防滑加工</strong>：金属制品、非金属制品表面刻蚀图案、文字及防滑处理,如:大理石、手柄防滑、印章、石碑刻字等</li><li><strong>牛仔服处理</strong>：牛仔服磨砂、发白及猫须效果达成</li></ol></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>工艺流程图：</p><p><img src="https://pic1.zhimg.com/v2-5e04315885b0220ec723ae93cf9a2474_b.webp"></p></li></ul><ul><li><p>视频：</p><p><a href="https://v.douyin.com/M1dQ5MM/" target="单独页面">视频地址：点击跳转</a></p></li><li><p>成品展示：</p></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202210052008525.png"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="拉丝"><a href="#拉丝" class="headerlink" title="拉丝"></a>拉丝</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>在金属压力加工中。在外力作用下使金属强行通过模具，金属横截面积被压缩，并获得所要求的横截面积形状和尺寸的技术加工方法称为金属拉丝工艺。使其改变形状。尺寸的工具称为拉丝模</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>拉丝是采用拉丝的布条往复运动，在工件表面来回摩擦使工件表面光洁度提高的一种方法，表面的纹理呈直线状，可以提高表面质量，遮掩表面轻微划痕</li><li>可以很好的掩盖生产中的机械纹和合模缺陷</li></ol></li><li><p>应用场景：</p><p>不锈钢、陶瓷、塑胶材料</p></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>视频：</p><p><a href="https://v.douyin.com/M1YQNtt/" target="单独页面">视频地址：点击跳转</a></p></li><li><p>成品展示：</p></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202210052056338.png"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="抛光"><a href="#抛光" class="headerlink" title="抛光"></a>抛光</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>抛光是指利用机械、化学、电化学的作用，使工件表面粗糙度降低，以获得光亮、平整表面的加工方法</li><li><p>是利用抛光工具和磨料颗粒或者其他抛光介质对工件表面进行的修饰加工</p></li><li><p>分类</p><details class="folding-tag" blue><summary> 机械抛光 </summary>            <div class="content">            <ul><li>机械抛光是靠切削、材料表面塑性变形去掉被抛光后的凸部而得到平滑面的抛光方法，一般使用油石条、羊毛纶、砂纸等，以手工操作为主</li></ul>            </div>          </details><details class="folding-tag" yellow><summary> 流体抛光 </summary>            <div class="content">            <ul><li><p>流体抛光是依靠高速流动的液体以及携带的磨粒冲刷工件表面达到抛光的目的</p></li><li><p>常用的方法有：磨料喷射加工、液体喷射加工、流体动力研磨等</p></li></ul>            </div>          </details><details class="folding-tag" green><summary> 磁研磨抛光 </summary>            <div class="content">            <ul><li><p>磁研磨抛光是利用磁性磨料在磁场作用下形成磨料刷，对工件磨削加工</p></li><li><p>其优势在于加工效率高，质量好，加工条件容易控制，工作条件好</p></li><li><p>采用合适的磨料，表面粗糙度会比较光滑</p></li></ul>            </div>          </details></li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>抛光的作用是除去零件表面的毛刺、划痕、锈痕、氧化皮、砂眼、气泡、焊瘤、焊渣和各种宏观的缺陷，以提高表面平整度和降低表面粗糙度，以获得光亮、平整表面</li><li>抛光可提高工件抗疲劳和抗腐蚀的性能</li></ol></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>工艺流程：一般为：粗抛 ——中抛（半精抛）——精抛</p></li><li><p>视频：</p><details class="folding-tag" blue><summary> 机械抛光 </summary>            <div class="content">            <ul><li><a href="https://v.ixigua.com/MJv7Rgs/" target="单独页面">视频地址：点击跳转</a></li></ul>            </div>          </details><details class="folding-tag" yellow><summary> 流体抛光 </summary>            <div class="content">            <ul><li><a href="https://v.douyin.com/MJvfMnX/" target="单独页面">视频地址：点击跳转</a></li></ul>            </div>          </details><details class="folding-tag" green><summary> 磁研磨抛光 </summary>            <div class="content">            <ul><li><a href="https://v.douyin.com/MJ3adSQ/" target="单独页面">视频地址：点击跳转</a></li></ul>            </div>          </details></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="滚花"><a href="#滚花" class="headerlink" title="滚花"></a>滚花</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>使用滚花刀在柱状金属工件表面增加直纹或网纹状的浮雕花纹以增加摩擦力方便操作使用</li><li>分为直纹、斜纹、网纹</li><li>国家标准GB6403.3-2008《滚花》</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>主要起防滑作用</li></ol></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>视频： </p><p><a href="https://v.douyin.com/Md48HqG/" target="单独页面">视频地址：点击跳转</a></p></li><li><p>成品展示：</p></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202210071916100.png"></p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202210071917527.png"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="喷粉"><a href="#喷粉" class="headerlink" title="喷粉"></a>喷粉</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>喷粉是将微粒形态的固体高分子材料，通过压缩空气或者静电吸附覆集到工件表面，再通过高温烘烤将其熔融形成坚固涂层的工艺</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>无需稀释剂，相对比较环保</li><li>涂层质量好，附着力和机械强度高，电化学性能优异</li><li>工艺简单，材料回收使用效率高,成本较低</li><li>需要较高温度烘烤，只适合金属工件的涂装</li><li>涂层颗粒感比较强，视觉效果比较粗糙，不太适合加工高端消费类产品</li></ol></li><li><p>应用场景：</p><ul><li>喷粉产品多用于室内使用的箱体，漆膜呈现平光或者亚光的效果</li><li>相比喷漆表面处理工艺,喷粉工艺更先进、节能高效、安全可靠、色泽艳丽，常常被用在轻工、家用装修等领域</li></ul></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>工艺流程：</p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202210071923355.png"></p></li><li><p>视频：</p><p><a href="https://v.douyin.com/MdVx1kY/" target="单独页面">视频地址：点击跳转</a></p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="喷丸"><a href="#喷丸" class="headerlink" title="喷丸"></a>喷丸</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>是将大量弹丸（主要是钢丸）喷射到霎件表面上的过程，有如无数小锤对表面锤击，因此，金属零件表面产生极为强烈的塑性形变，使零件表面产生一定厚度的冷作硬化层，称为表面强化层，此强化层会显著地提高零件的疲劳强度</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>提高产品的疲劳强度</li></ol></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>视频：</p><p><a href="https://v.douyin.com/MF8vbfT/" target="单独页面">视频地址：点击跳转</a></p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="抛丸"><a href="#抛丸" class="headerlink" title="抛丸"></a>抛丸</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>抛丸是指通过机械的方法把丸料（钢丸）以很高的速度和一定的角度抛射到工作表面上，让丸粒高速冲击工作表面，在配套吸尘器真空负压和反弹力的共同作用下，丸料在设备内部自行循环，同时通过配套的吸尘器的气流清洗作用，将丸料和清洗下来的杂质分别回收，并且使丸料可以继续循环使用的技术</li><li>主要抛丸材料：丸、铝丸、陶瓷微粉、钢砂、核桃砂、玉米芯、玻璃珠、树脂砂、塑胶砂等</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>可提高材料/零件疲劳断裂抗力，防止疲劳失效，塑性变形与脆断，提高疲劳寿命</li></ol></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>视频：</p><p><a href="https://v.douyin.com/MF8ktPM/" target="单独页面">视频地址：点击跳转</a></p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="喷砂、喷丸、抛丸的区别"><a href="#喷砂、喷丸、抛丸的区别" class="headerlink" title="喷砂、喷丸、抛丸的区别"></a>喷砂、喷丸、抛丸的区别</h2><p><a herf="https://v.douyin.com/MF81nND/">视频地址：点击跳转</a></p><h2 id="热转印"><a href="#热转印" class="headerlink" title="热转印"></a>热转印</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>热转印是将花纹图案印到耐热性胶纸上，通过加热，加压，将油墨层的花纹印到成品材料上的一种技术</li><li>利用热转印膜印刷可以把多色图案一次成图，无需套色，简单的设备也可以印刷出逼真的图案</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>应用范围广，几乎可以在任何材质表面施工</li><li>因为图案是印刷品，可以制作复杂、丰富的大面积彩色图案</li><li>常规热转印可以允许工件有规则弧度甚至是柱面</li></ol></li><li><p>应用场景：</p><ul><li>能适用于ABS、PE、PP、EVA、皮革、不锈钢、玻璃、木材、有涂层金属</li></ul></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>工艺流程：</p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202210071950090.png"></p></li><li><p>视频：</p><p><a href="https://v.douyin.com/MdpuSFp/" target="单独页面">视频地址：点击跳转</a></p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="水贴纸"><a href="#水贴纸" class="headerlink" title="水贴纸"></a>水贴纸</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>即经过水浸泡处理后才能使用的贴纸</li><li>是用水作载体把图案与底纸分离再转移到承印物上，实现间接印刷的原理，是一种崭新的转印技术</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>承贴于任何弧度及曲面的物体表面，无论移印能否做到，其均可轻松胜任，可完全取代移印</li><li>水贴纸丝网印刷：产品色泽鲜艳、墨层厚实</li><li>图案画面主体感强</li><li>水贴纸胶版印刷：主要用于网点及渐变效果较复杂的图案</li><li>由于依靠人工，因此施工精度不能保证</li></ol></li><li><p>应用场景：</p><ul><li>汽车用品、 电子产品、居室用品、日用精品、室内建材等</li></ul></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>工艺流程：</p></li><li><p>视频：</p><ul><li><a href="https://v.douyin.com/MLQG3Bh/">视频地址：点击跳转</a></li></ul></li><li>成品展示：</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/水贴纸案例.png"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="电镀"><a href="#电镀" class="headerlink" title="电镀"></a>电镀</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li><p>电镀又叫水镀，其基本原理是将工件作为阴极，靶材（金属作为靶材）作为阳极浸入电解液中，金属离子向阴性扩散迁移后被还原成原子状态并附着到工件表面形成膜层的一种氧化还原反应</p></li><li><p>分类：</p><details class="folding-tag" blue><summary> 滚镀 </summary>            <div class="content">            <ul><li>它是将一定数量的小零件（指小型无着力点）置于专用滚筒内、在滚动状态下以间接导电的方式使零件表面沉积上各种金属或合金镀层、以达到表面防护装饰及各种功能性目的的一种电镀加工方式</li><li>根据滚筒的形状分：卧式滚镀、倾斜式滚镀；另一种为振动电镀（其滚筒形状为：圆筛或圆盘）</li></ul>            </div>          </details><details class="folding-tag" green><summary> 挂镀 </summary>            <div class="content">            <ul><li>挂镀是工件装夹在挂具上，适宜大零件，每一批能镀的产品数量少，镀层厚度10μm以上的工艺</li></ul>            </div>          </details><details class="folding-tag" red><summary> 滚镀和挂镀的区别 </summary>            <div class="content">            <ul><li>与挂镀相比，滚镀最大的优点是节省劳动力，提高生产率，设备维修费用少且占地面积小，镀件镀层的均匀性好</li><li>滚镀的使用范围受到限制，镀件不宜太大和太轻</li><li>单件电流密度小，电流效率低，槽电压高，槽液温升快，镀液带出量大</li></ul>            </div>          </details></li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>电镀件光泽度高，能媲美镜面反射，美观高档</li><li>表面硬度高，摩擦系数小,塑胶电镀后表面具有金属的硬度特征</li><li>耐磨耐划伤性能强</li><li>耐腐蚀性能好</li></ol></li><li><p>应用场景：</p><ul><li>镀金镀银是常见的工艺品的电镀工艺，而工业生产中镀镍常用于设备防腐蚀</li><li>镀铜镀铬则是我们常见的一些电镀产品，比如卫浴产品、汽车的内外饰装饰条等等<ul><li>电镀铬的工艺特点：<ol><li>具有很高的硬度，根据镀液的成分和工艺条件不同，其硬度在很大范围内变化</li><li>有较好的耐热性，在500℃以下加热，其光泽性、硬度均无明显变化，当温度大于500℃时，工件开始氧化变色，大于700℃时，硬度开始降低</li><li>摩擦系数很小，特别是干摩擦系数，在所有金属中是最低的，所以镀铬层具有很好的耐磨性</li><li>具有良好的化学稳定性，在碱、硫化物、硝酸和大多数有机酸中均不发生作用，但能溶于氢氧酸（如盐酸)和热的硫酸中</li><li>在可见光范围内，铬的反射能力约为65%，介于银88%和镍55%之间，而且因为铬不容易变色，使用时间长久而且反射能力优于银和镍</li></ol></li></ul></li><li>塑胶电镀需要电镀级别的ABS或者ABS合金，其他塑胶材料因为不具备导电性因此不适合电镀工艺</li></ul></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>工艺流程图：</p><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/电镀工艺流程图.png"></p></li><li><p>视频：</p><p><a href="https://v.douyin.com/MLqkrNP/" target="单独页面">视频地址：点击跳转</a></p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="电泳"><a href="#电泳" class="headerlink" title="电泳"></a>电泳</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li><p>电泳的基本原理和电镀非常相似，施工环境几乎一样</p></li><li><p>电泳和电镀的最大区别就是<strong>电镀需要金属靶材</strong>,工件表面最终形成<strong>金属膜层</strong></p></li><li><p>而电泳则是使用<strong>水溶性树脂</strong>，最终形成<strong>非金属膜层。</strong></p></li><li><p>从最终的膜层性质来看，电泳又类似于喷涂水性涂料工艺，不同的是电泳形成的膜层更接近电镀效果，分子排列比喷涂更加紧密，膜层表面光泽度高，可以形成镜面反射</p></li><li><p>分类：</p><details class="folding-tag" blue><summary> 阳极电泳 </summary>            <div class="content">            <ul><li>工件是阳极</li><li>特点：<ul><li>原料价格便宜（—般比阴极电泳便宜50%)</li><li>设备较简单，投资少(—般比阴极电泳便宜30%)</li><li>技术要求较低</li><li>涂层耐蚀性能较阴极电泳差（约为阴极电泳寿命的四分之一)</li></ul></li></ul>            </div>          </details><details class="folding-tag" green><summary> 阴极电泳 </summary>            <div class="content">            <ul><li>工件是阴极</li><li>特点：<ul><li>不发生阳极溶解，工件表面及磷化膜不破坏</li><li>电泳涂料（一般为含氮树脂)对金属有保护作用，且所用漆价高质优</li></ul></li></ul>            </div>          </details></li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>电泳使用的是非金属成膜材料,色彩变化要比电镀丰富表面光泽度高,美观高档成膜速度快，施工效率高<br>附着力好，无喷涂工艺的流痕问题</li><li>材料利用效率高，施工条件简单，污染小</li><li>电泳膜层机械性能偏弱，耐磨耐刮性能偏弱，不适合加工消费电子产品大规模生产需要大型渡槽，产能提升困难</li><li>水性涂料市场比较狭窄</li></ol></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li>工艺流程图：</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202210091955304.png"></p><ul><li><p>详解：</p><ol><li>除油。溶液一般为热碱性化学除油液．温度为60℃(蒸汽加热)﹐时间为20min左右</li><li>热水洗。温度60°℃(蒸汽加热）,时间2min</li><li>除锈。用H2SO4或HCI，例如用盐酸除锈液,HCI总酸度≥43点;游离酸度&gt;41点;加清洗剂1.5%;室温下洗10～20min</li><li>冷水洗。流动中冷水洗1min</li><li>磷化。用中温磷化(60°℃时磷化10min),磷化液可用市售成品。上述工序亦可用喷砂→水洗代替</li><li>钝化。用与磷化液配套的药品（由出售磷化液厂家提供)，室温下1 ~2min即可</li><li>阳极电泳。电解液成分：HO8-1黑色电泳漆，固体分质量分数9%～12%，蒸馏水质量分数88%～91%。电压：(70+10)V；时间: 2~2.5min；漆液温度: 15~35℃漆液PH值:8～8.5，电泳过程中电流随漆膜增厚会逐步下降</li><li>清水洗。流动冷水中洗</li><li>烘干。在烘箱中于（165+5)℃温度下烘40～60min即可</li></ol></li><li><p>视频：</p><p><a href="https://v.douyin.com/MLgAmRr/" target="单独页面">视频地址：点击跳转</a></p></li><li><p>成品展示：</p></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/202210092004277.png"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="钝化"><a href="#钝化" class="headerlink" title="钝化"></a>钝化</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>是指一些金属经阳极氧化或其它化学方法（如与强氧化剂反应）处理后，由活泼态转化为不活泼态的过程</li><li>一般使用亚硝酸盐、硝酸盐、铬酸盐、重铬酸盐溶液进行钝化处理</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>在金属表面形成保护膜（钝化膜），减缓腐蚀</li></ol></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>工艺流程：</p><ul><li>除油 → 漂洗 → 钝化 → 漂洗 → 封闭 → 干燥</li></ul></li><li><p>视频： </p><p><a href="https://v.douyin.com/MNENNHL/" target="单独页面">视频地址：点击跳转</a></p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="磷化"><a href="#磷化" class="headerlink" title="磷化"></a>磷化</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>磷化是一种化学与电化学反应形成磷酸盐化学转化膜的过程，所形成的磷酸盐转化膜称之为磷化膜</li><li>可以使产品变成黑色或接近金属本色的灰色</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>给基体金属提供保护，在一定程度上防止金属被腐蚀</li><li>用于涂漆前打底，提高漆膜层的附着力与防腐蚀能力</li><li>在金属冷加工工艺中起减摩润滑作用</li></ol></li><li><p>作用：</p><ol><li>涂装前磷化的作用<ul><li>增强涂装膜层（如涂料涂层）与工件间结合力</li><li>提高涂装后工件表面涂层的耐蚀性</li><li>提高装饰性</li></ul></li><li>非涂装磷化的作用<ul><li>提高工件的耐磨性</li><li>令工件在机加工过程中具有润滑性</li><li>提高工件的耐蚀性</li></ul></li></ol></li><li><p>用途</p><ul><li>钢铁磷化主要用于耐蚀防护和油漆用底膜</li><li>耐蚀防护用磷化膜<ul><li>防护用磷化膜 用于钢铁件耐蚀防护处理。</li><li>磷化膜类型可用锌系、锰系。</li><li>膜单位面积质量为10-40 g/m2。</li><li>磷化后涂防锈油、防锈脂、防锈蜡等</li></ul></li><li>油漆底层用磷化膜<ul><li>增加漆膜与钢铁工件附着力及防护性</li><li>磷化膜类型可用锌系或锌钙系。</li><li>磷化膜单位面积质量为0.2-1.0 g/m2（用于较大形变钢铁件油漆底层）</li><li>1-5 g/m2（用于一般钢铁件油漆底层）</li><li>5-10 g/m2（用于不发生形变钢铁件油漆底层）</li></ul></li><li>加工润滑用磷化膜<ul><li>钢丝、焊接钢管拉拔 单位面积上膜重1-10 g/m2</li><li>精密钢管拉拔 单位面积上膜重4-10 g/m2</li><li>钢铁件冷挤压成型 单位面积上膜重大于10 g/m2</li></ul></li><li>减摩用磷化膜<ul><li>磷化膜可起减摩作用</li><li>一般用锰系磷化，也可用锌系磷化</li><li>对于有较小动配合间隙工件，磷化膜质量为1-3 g/m2</li><li>对有较大动配合间隙工件（减速箱齿轮），磷化膜质量为5-20 g/m2</li><li>磷化涂层钢丝绳也是利用磷化膜的减摩、耐磨作用</li></ul></li><li>电绝缘用磷化膜<ul><li>一般用锌系磷化</li><li>用于电机及变电器中的硅片磷化处理</li></ul></li></ul></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>工艺流程：</p><ul><li>预脱脂→脱脂→除锈→水洗→（表调）→磷化→水洗→磷化后处理（如电泳或粉末涂装）</li></ul></li><li><p>视频： </p><p><a href="https://v.douyin.com/MNoutWw/" target="单独页面">视频地址：点击跳转</a></p></li><li><p>成品展示：</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Ffile.bzjw.com%2F200810%2F20081007142440.jpg&refer=http%3A%2F%2Ffile.bzjw.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1667989098&t=93e2dbb7c4f4f66c6239cbeeb4f0f514"></p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="发黑"><a href="#发黑" class="headerlink" title="发黑"></a>发黑</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>发黑是化学表面处理的一种常用手段，原理是使金属表面产生一层氧化膜，以隔绝空气，达到防锈目的</li><li>外观要求不高时可以采用发黑处理，钢制件的表面发黑处理，也被称之为发蓝</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li>对金属表面起防锈作用</li><li>增加金属表面的美观及光泽</li><li>发黑时的加热有助于减少工件中的应力</li></ol></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li><p>工艺流程：</p><ul><li>清洗 → 脱脂（工件必须完全浸入脱脂液中；脱脂液浓度ph值12-14，处理时间10-30min，每过3-5分钟上下抖动几次，药液浓度低于ph12时补充脱脂粉） → 水洗 → 酸洗（酸洗液浓度ph值2-4，处理时间5-10min） → 水洗 → 发黑（池液浓度ph值12.5-13.5，处理时间10-12min） → 水洗 → 吹干 → 上油</li></ul></li><li><p>视频： </p><p><a href="https://v.douyin.com/MF1bMwk/" target="单独页面">视频地址：点击跳转</a></p></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="特氟龙喷涂"><a href="#特氟龙喷涂" class="headerlink" title="特氟龙喷涂"></a>特氟龙喷涂</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">基本介绍</button><button type="button" class="tab " data-href="test4-2">工艺特点</button><button type="button" class="tab " data-href="test4-3">工艺流程</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ul><li>分散体涂层的加工方法是使涂层材料均匀的分布在溶剂中形成分散液（固态物质混在液体中）的一种湿<br>法加工</li><li>这种混合物被高压空气雾化并喷涂于工件表面</li></ul></div><div class="tab-item-content" id="test4-2"><ul><li><p>工艺特点：</p><ol><li><strong>不粘性：</strong>几乎所有物质都不与特氟龙涂膜粘合。很薄的膜也显示出很好的不粘附性能</li><li><strong>耐热性：</strong>特氟龙涂膜具有优良的耐热和耐低温特性。短时间可耐高温到300℃，一般在240℃~260℃<br>之间可连续使用，具有显著的热稳定性，它可以在冷冻温度下工作而不脆化，在高温下不融化</li><li><strong>滑动性：</strong>特氟龙涂膜有较低的摩擦系数。负载滑动时摩擦系数产生变化，但数值仅在0.05-0.15之间</li><li><strong>抗湿性：</strong>特氟龙涂膜表面不沾水和油质，生产操作时也不易沾溶液，如粘有少量污垢，简单擦拭即可<br>清除。停机时间短，节省工时并能提高工作效率</li><li><strong>耐磨损性：</strong>在高负载下，具有优良的耐磨性能。在一定的负载下，具备耐磨损和不粘附的双重优点</li></ol></li></ul></div><div class="tab-item-content" id="test4-3"><ul><li>工艺流程：<ul><li>工件的制备 → (湿法)分散体涂层喷涂 → 干燥 → 烧结</li></ul></li><li><p>详解：</p><ul><li>工件的制备：去除表面的全部油脂，采用喷砂处理的机械方式清洁工件并使其表面粗糙，同时也可以通过应用粘接助剂（底漆）的方式改善涂层同工件表层的结合能力</li><li>干燥：在烘炉中将湿的涂层加热，温度控制在100度以下，直至大部分的溶剂已蒸发</li><li>烧结：是将工件加热至一个较高的温度，直至一个不可逆的反应发生：涂层材料熔融，同粘接助剂形成网状结构</li></ul></li><li><p>视频： </p><p><a href="https://v.douyin.com/MFevEpJ/" target="单独页面">视频地址：点击跳转</a></p><p><a href="https://v.douyin.com/MFR8EPk/" target="单独页面">视频地址：点击跳转</a></p><ul><li>面漆：主要功能材料PTFE聚四氟乙烯</li><li>底漆：含聚酰胺亚胺或类似功能树脂，用于提供面漆与底材的附着力</li></ul></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="热镀锌"><a href="#热镀锌" class="headerlink" title="热镀锌"></a>热镀锌</h2><ul><li><p><strong>概念</strong>：也叫<strong>热浸锌和热浸镀锌</strong>：是一种有效的金属防腐方式，他是在高温下把锌锭融化，在放入一些辅助材料，然后把金属结构件浸入镀锌槽中，使金属构件上附着一层锌层,从而起到防腐的目的</p></li><li><p><strong>优点</strong>：镀锌层的附着力和硬度较好，故防腐能力强</p></li><li><p><strong>反应方式</strong>：是化学处理，属于电化学反应. 热镀锌管是使熔融金属与铁基体反应而产生合金层，从而使基体和镀层二者相结合</p></li><li><p><strong>工艺</strong>：是将工件除油、酸洗、浸药、烘干后立即浸入到预先将锌加热融熔了的镀槽中去一段时间，在工件表面形成一层锌镀层</p></li><li><p><strong>成品</strong>：外表没有冷镀锌细腻光亮，镀层均匀，但锌层厚度方面热镀锌是冷镀锌的几十倍。防腐蚀性能也是电镀锌的几十倍</p></li><li><p><strong>用途</strong>：适合于户外工作的钢铁制件，如高速公路围栏、电力铁塔、大尺寸紧固件等较为“粗糙”的工件的长期防锈</p></li><li><p><strong>价格</strong>：冷镀锌可以只镀一面，热镀锌要得全镀。以及热镀锌一般镀锌层比冷镀锌厚，因此热镀锌价格高于冷镀锌</p><div class="btns rounded grid5">            <a class="button no-text-decoration" href="https://v.douyin.com/D5qWMDS/" title="热镀锌工艺视频"><img src="/undefined/4ffb/fas fa-video">热镀锌工艺视频</a>          </div></li></ul><h2 id="冷镀锌"><a href="#冷镀锌" class="headerlink" title="冷镀锌"></a>冷镀锌</h2><ul><li><p><strong>概念</strong>：就是电镀锌，上锌量少，只有10－50g/m2，就是利用电解作用使金属或其它材料制件的表面附着一层金属膜的工艺。形成均匀、致密、结合力良好的金属层的过程可以起到防止腐蚀,提高耐磨性、导电性、反光性及增进美观等作用</p></li><li><p><strong>反应方式</strong>：冷镀锌是物理处理，只是在表面刷一层锌，所以锌层易脱落</p></li><li><p><strong>工艺</strong>：冷镀锌是利用电解设备将工件经过除油、酸洗后放入成分为锌盐的溶液中，并连接电解设备的负极；在工件的对面放置锌板连接在电解设备的正极 ，接通电源，利用电流从正极向负极的定向移动，就会在工件上沉积一层锌</p></li><li><p><strong>成品</strong>：工件表面光滑平整，但是因为镀层比较薄，电镀锌一般在5-30微米以内，所以防腐蚀的时间会比较短</p></li><li><p><strong>用途</strong>：用在室内使用制件的防锈，如机壳底、面板，小尺寸紧固件等</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机械设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工艺 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo文章和页面配置</title>
      <link href="/undefined/b129.html"/>
      <url>/undefined/b129.html</url>
      
        <content type="html"><![CDATA[<h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>Front-matter 是 markdown 文件最上方以—-分隔的区域，用于指定个别档案的变数。</p><ul><li>Page Front-matter 用于页面配置</li><li>Post Front-matter 用于文章页配置</li></ul><div class="note info flat"><p>如果标注可选的参数，可根据自己需要添加，不用全部都写在markdown里</p></div><h3 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">type:</span><br><span class="line">comments:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aside:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>写法</th><th>释义</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块（默认true，设置false不显示）</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax（当设置mathjax的per_page: false时，才需要配置，默认 false)）</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table></div><h3 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">toc<span class="emphasis">_style_</span>simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line"><span class="section">aside:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>写法</th><th>释义</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>type</td><td>【可选】文章更新日期</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块（默认为true）</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>vtoc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+butterfly主题标签外挂</title>
      <link href="/undefined/da9e.html"/>
      <url>/undefined/da9e.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p>基于hexo主题butterfly 3.7.1外挂标签汇总</p></div><h2 id="时间轴-timeline"><a href="#时间轴-timeline" class="headerlink" title="时间轴 timeline"></a>时间轴 timeline</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">样式预览</button><button type="button" class="tab " data-href="test4-3">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选） %&#125;</span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;</span><br><span class="line">正文内容</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;</span><br><span class="line">正文内容</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><div class="timeline color"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>title</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>title</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>title</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div></div><div class="tab-item-content" id="test4-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line"></span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">配置参数</button><button type="button" class="tab " data-href="test4-3">样式预览</button><button type="button" class="tab " data-href="test4-4">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><ol><li><strong>Unique name :</strong></li></ol><ul><li><strong>选项卡块标签的唯一名称，不带逗号。</strong></li><li><strong>将在 #id 中用作每个标签及其索引号的前缀。</strong></li><li><strong>如果名称中包含空格，则对于生成 #id，所有空格将由破折号代替。</strong></li><li><strong>仅当前帖子 / 页面的 URL 必须是唯一的！</strong></li></ul><ol><li><strong>[index]:</strong></li></ol><ul><li><strong>活动选项卡的索引号。</strong></li><li><strong>如果未指定，将选择第一个标签（1）。</strong></li><li><strong>- 如果 index 为 - 1，则不会选择任何选项卡。</strong></li><li><strong>可选参数。</strong></li></ul><ol><li><strong>[Tab caption]:</strong></li></ol><ul><li><strong>- 当前选项卡的标题。</strong></li><li><strong>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</strong></li><li><strong>如果未指定标题，但指定了图标，则标题将为空。</strong></li><li><strong>可选参数。</strong></li></ul><ol><li><strong>[@icon]:</strong></li></ol><ul><li><strong>FontAwesome 图标名称（全名，看起来像 “fas fa-font”）</strong></li><li><strong>可以指定带空格或不带空格；</strong></li><li><strong>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</strong></li><li><strong>可选参数。</strong></li></ul></div><div class="tab-item-content" id="test4-3"><details class="folding-tag" blue><summary> Demo 1 - 预设选择第一个【默认】 </summary>              <div class="content">              <div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><details class="folding-tag" red><summary> Demo 2 - 预设选择tabs </summary>              <div class="content">              <div class="tabs" id="test2"><ul class="nav-tabs"><button type="button" class="tab " data-href="test2-1">test2 1</button><button type="button" class="tab " data-href="test2-2">test2 2</button><button type="button" class="tab  active" data-href="test2-3">test2 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><details class="folding-tag" yello><summary> Demo 3 - 没有预设值 </summary>              <div class="content">              <div class="tabs" id="test3"><ul class="nav-tabs no-default"><button type="button" class="tab " data-href="test3-1">test3 1</button><button type="button" class="tab " data-href="test3-2">test3 2</button><button type="button" class="tab " data-href="test3-3">test3 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details><details class="folding-tag" green><summary> Demo 4 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名 </summary>              <div class="content">              <div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">第一个Tab</button><button type="button" class="tab " data-href="test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button><button type="button" class="tab " data-href="test4-3"><i class="fas fa-bomb"></i>炸弹</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>              </div>            </details></div><div class="tab-item-content" id="test4-4"><details class="folding-tag" blue><summary> Demo 1 - 预设选择第一个【默认】 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> Demo 2 - 预设选择tabs </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yello><summary> Demo 3 - 没有预设值 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> Demo 4 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">样式预览</button><button type="button" class="tab " data-href="test4-3">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol></div><div class="tab-item-content" id="test4-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">配置参数</button><button type="button" class="tab " data-href="test4-3">样式预览</button><button type="button" class="tab " data-href="test4-4">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><ol><li>字体：logo, code</li><li>颜色：<span class="p red">红色</span>、<span class="p yellow">黄色</span>、<span class="p green">绿色</span>、<span class="p cyan">青色</span>、<span class="p blue">蓝色</span>、<span class="p gray">灰色</span></li><li>大小：small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向：left, center, right</li></ol></div><div class="tab-item-content" id="test4-3"><ul><li><p>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class="p red">红色</span>、<span class="p yellow">黄色</span>、<span class="p green">绿色</span>、<span class="p cyan">青色</span>、<span class="p blue">蓝色</span>、<span class="p gray">灰色</span>。</p></li><li><p>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class="p center logo large">Volantis</span><br><span class="p center small">A Wonderful Theme for Hexo</span></p></li></ul></div><div class="tab-item-content" id="test4-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="引用note"><a href="#引用note" class="headerlink" title="引用note"></a>引用note</h2><div class="note info no-icon flat"><p>基于butterfly主题的引用</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">通用配置</button><button type="button" class="tab " data-href="test4-2">语法格式</button><button type="button" class="tab " data-href="test4-3">配置参数</button><button type="button" class="tab " data-href="test4-4">样式预览</button><button type="button" class="tab " data-href="test4-5">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0 </span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><details class="folding-tag" blue><summary> 方法一 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 方法二 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details></div><div class="tab-item-content" id="test4-3"><details class="folding-tag" blue><summary> 方法一 </summary>              <div class="content">              <div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th>用法</th></tr></thead><tbody><tr><td style="text-align:left">class</td><td>【可选】标识，不同的标识有不同的配色（ default / primary / success / info / warning / danger ）</td></tr><tr><td style="text-align:left">no-icon</td><td>【可选】不显示 icon</td></tr><tr><td style="text-align:left">style</td><td>【可选】可以覆盖配置中的 style（simple/modern/flat/disabled）</td></tr></tbody></table></div>              </div>            </details><details class="folding-tag" blue><summary> 方法二 </summary>              <div class="content">              <div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th>用法</th></tr></thead><tbody><tr><td style="text-align:left">class</td><td>【可选】标识，不同的标识有不同的配色（ default / primary / success / info / warning / danger ）</td></tr><tr><td style="text-align:left">no-icon</td><td>【可选】可配置自定义 icon (只支持 fontawesome 图标，也可以配置 no-icon)</td></tr><tr><td style="text-align:left">style</td><td>【可选】可以覆盖配置中的 style（simple/modern/flat/disabled）</td></tr></tbody></table></div>              </div>            </details></div><div class="tab-item-content" id="test4-4"><details class="folding-tag" blue><summary> 方法一 </summary>              <div class="content">              <details class="folding-tag" cyan><summary> 1. simple样式 </summary>              <div class="content">              <div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" red><summary> 2. modern样式 </summary>              <div class="content">              <div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" yellow><summary> 3. flat样式 </summary>              <div class="content">              <div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" green><summary> 4. disabled样式 </summary>              <div class="content">              <div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" green><summary> 5. no-icon样式 </summary>              <div class="content">              <div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details>              </div>            </details><details class="folding-tag" blue><summary> 方法二 </summary>              <div class="content">              <details class="folding-tag" cyan><summary> 1. simple样式 </summary>              <div class="content">              <div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div>              </div>            </details><details class="folding-tag" red><summary> 2. modern样式 </summary>              <div class="content">              <div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div>              </div>            </details><details class="folding-tag" yellow><summary> 3. flat样式 </summary>              <div class="content">              <div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div>              </div>            </details><details class="folding-tag" green><summary> 4. disabled样式 </summary>              <div class="content">              <div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div>              </div>            </details><details class="folding-tag" green><summary> 5. no-icon样式 </summary>              <div class="content">              <div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details>              </div>            </details></div><div class="tab-item-content" id="test4-5"><details class="folding-tag" blue><summary> 方法一 </summary>              <div class="content">              <details class="folding-tag" cyan><summary> 1. simple样式 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 2. modern样式 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 3. flat样式 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 4. disabled样式 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 5. no-icon样式 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><details class="folding-tag" blue><summary> 方法二 </summary>              <div class="content">              <details class="folding-tag" cyan><summary> 1. simple样式 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> 2. modern样式 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 3. flat样式 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 4. disabled样式 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 5. no-icon样式 </summary>              <div class="content">              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">配置参数</button><button type="button" class="tab " data-href="test4-3">样式预览</button><button type="button" class="tab " data-href="test4-4">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><ol><li>样式: <code>success</code>, <code>error</code>, <code>warning</code>, <code>bolt</code>, <code>ban</code>, <code>home</code>, <code>sync</code>, <code>cogs</code>, <code>key</code>, <code>bell</code></li><li>自定义图标：支持 <code>fontawesome</code></li></ol></div><div class="tab-item-content" id="test4-3"><div class="tip "><p>默认情况</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div></div><div class="tab-item-content" id="test4-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;默认情况&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="动态标签-animal"><a href="#动态标签-animal" class="headerlink" title="动态标签 animal"></a>动态标签 animal</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">配置参数</button><button type="button" class="tab " data-href="test4-3">样式预览</button><button type="button" class="tab " data-href="test4-4">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>更多详情请参看 <a href="https://l-lin.github.io/font-awesome-animation/">font-awesome-animation</a> 文档</p><ol><li>将所需的 CSS 类添加到图标（或 DOM 中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定 CSS 类，同时还要给目标元素的父级元素添加 CSS 类 <code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li></ol></div><ol><li>可以通过给目标元素添加 CSS 类 <code>faa-fast</code> 或 <code>faa-slow</code> 来控制动画快慢</li></ol></div><div class="tab-item-content" id="test4-3"><ol><li>On DOM load（当页面加载时显示动画）</li></ol><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div><ol><li>调整动画速度</li></ol><div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div><ol><li>On hover（当鼠标悬停时显示动画）</li></ol><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div></div><div class="tab-item-content" id="test4-4"><ol><li>On DOM load（当页面加载时显示动画）</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><ol><li>调整动画速度</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><ol><li>On hover（当鼠标悬停时显示动画）</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="复选列表-checkbox"><a href="#复选列表-checkbox" class="headerlink" title="复选列表 checkbox"></a>复选列表 checkbox</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">配置参数</button><button type="button" class="tab " data-href="test4-3">样式预览</button><button type="button" class="tab " data-href="test4-4">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><ol><li>颜色: <span class="p red">红色</span>、<span class="p yellow">黄色</span>、<span class="p green">绿色</span>、<span class="p cyan">青色</span>、<span class="p blue">蓝色</span>、<span class="p gray">灰色</span></li><li>选中状态: checked</li></ol></div><div class="tab-item-content" id="test4-3"><div class="checkbox"><input type="radio">            <p>纯文本测试</p>            </div><div class="checkbox checked"><input type="radio" checked="checked">            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class="checkbox red"><input type="radio">            <p>支持自定义颜色</p>            </div><div class="checkbox green"><input type="radio">            <p>绿色</p>            </div><div class="checkbox yellow"><input type="radio">            <p>黄色</p>            </div><div class="checkbox cyan"><input type="radio">            <p>青色</p>            </div><div class="checkbox blue"><input type="radio">            <p>蓝色</p>            </div></div><div class="tab-item-content" id="test4-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">样式预览</button><button type="button" class="tab " data-href="test4-3">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><div calss="anzhiyu-tag-link"><a class="tag-Link" target="_blank" href="https://pic.imgdb.cn/item/631c997216f2c2beb134ea06.jpg">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style>          <i class="anzhiyufont anzhiyu-icon-link" style></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">执笔のnote</div>            <div class="tag-link-sitename"> https://hzy050607.top/</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div></div><div class="tab-item-content" id="test4-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 执笔のnote, https://hzy050607.top/, https://pic.imgdb.cn/item/631c997216f2c2beb134ea06.jpg %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="按钮-btns"><a href="#按钮-btns" class="headerlink" title="按钮 btns"></a>按钮 btns</h2><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p><code>Volantis</code> 的按钮使用的是 <code>btn</code> 和 <code>btns</code> 标签。<code>btns</code> 和 <code>butterfly</code> 的 <code>button</code> 不冲突，但是 <code>btn</code> 会被强制渲染，导致部分参数失效，而且 <code>btn</code> 的效果还是 <code>butterfly</code> 的 <code>button</code> 更好看些。所以就只适配了 <code>btns</code>。</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">配置参数</button><button type="button" class="tab " data-href="test4-3">样式预览</button><button type="button" class="tab " data-href="test4-4">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;标题&lt;/b&gt;</code>和<code>&lt;p&gt;描述文字&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况</li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮间的间距是固定的</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最3两列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最4两列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最4两列，屏幕变窄会适当减少列数</td></tr></tbody></table></div></div><div class="tab-item-content" id="test4-3"><ul><li>如果需要显示类似「团队成员」之类的一组含有头像的链接</li></ul><div class="btns circle grid5">            <a class="button no-text-decoration" href="https://xaoxuu.com" title="xaoxuu"><img src="https://pic.imgdb.cn/item/631c997216f2c2beb134ea06.jpg">xaoxuu</a><a class="button no-text-decoration" href="https://xaoxuu.com" title="xaoxuu"><img src="https://pic.imgdb.cn/item/631c997216f2c2beb134ea06.jpg">xaoxuu</a><a class="button no-text-decoration" href="https://xaoxuu.com" title="xaoxuu"><img src="https://pic.imgdb.cn/item/631c997216f2c2beb134ea06.jpg">xaoxuu</a><a class="button no-text-decoration" href="https://xaoxuu.com" title="xaoxuu"><img src="https://pic.imgdb.cn/item/631c997216f2c2beb134ea06.jpg">xaoxuu</a><a class="button no-text-decoration" href="https://xaoxuu.com" title="xaoxuu"><img src="https://pic.imgdb.cn/item/631c997216f2c2beb134ea06.jpg">xaoxuu</a>          </div><ul><li>含有图标的按钮</li></ul><div class="btns rounded grid5">            <a class="button no-text-decoration" href="/" title="下载源码"><img src="/undefined/da9e/fas fa-download">下载源码</a><a class="button no-text-decoration" href="/" title="查看文档"><img src="/undefined/da9e/fas fa-book-open">查看文档</a>          </div><ul><li>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</li></ul><div class="btns circle center grid5">            <a href="https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1">  <i class="fab fa-apple"></i>  <b>心率管家</b>  <p class="p red">专业版</p>  <img src="https://bu.dusays.com/2022/05/19/6285336eb791e.png"></a><a href="https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1">  <i class="fab fa-apple"></i>  <b>心率管家</b>  <p class="p green">免费版</p>  <img src="https://bu.dusays.com/2022/05/19/62853399bd275.png"></a>          </div></div><div class="tab-item-content" id="test4-4"><ol><li><p>如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://pic.imgdb.cn/item/631c997216f2c2beb134ea06.jpg %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://pic.imgdb.cn/item/631c997216f2c2beb134ea06.jpg %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://pic.imgdb.cn/item/631c997216f2c2beb134ea06.jpg %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://pic.imgdb.cn/item/631c997216f2c2beb134ea06.jpg %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://pic.imgdb.cn/item/631c997216f2c2beb134ea06.jpg %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li><li><p>含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li><li><p>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://bu.dusays.com/2022/05/19/6285336eb791e.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://bu.dusays.com/2022/05/19/62853399bd275.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="网站卡片-sites"><a href="#网站卡片-sites" class="headerlink" title="网站卡片 sites"></a>网站卡片 sites</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">样式预览</button><button type="button" class="tab " data-href="test4-3">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com" data-title="简约风格"><div class="wrapper cover"><img class="cover fadeIn" src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"></div><div class="info"><img class="flink-avatar" src="https://bu.dusays.com/2022/05/02/626f92e193879.jpg"><span class="site-title">xaoxuu</span></div></a><a class="site-card" href="https://inkss.cn" data-title="这是一段关于这个网站的描述文字"><div class="wrapper cover"><img class="cover fadeIn" src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"></div><div class="info"><img class="flink-avatar" src="https://inkss.cn/img/avatar.jpg"><span class="site-title">inkss</span></div></a><a class="site-card" href="https://blog.mhuig.top" data-title="这是一段关于这个网站的描述文字"><div class="wrapper cover"><img class="cover fadeIn" src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"></div><div class="info"><img class="flink-avatar" src="https://static.mhuig.top/npm/mhg@0.0.0/avatar/avatar.png"><span class="site-title">MHuiG</span></div></a><a class="site-card" href="https://colsrch.top" data-title="这是一段关于这个网站的描述文字"><div class="wrapper cover"><img class="cover fadeIn" src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"></div><div class="info"><img class="flink-avatar" src="https://avatars.githubusercontent.com/u/58458181?v=4"><span class="site-title">Colsrch</span></div></a><a class="site-card" href="https://linhk1606.github.io" data-title="这是一段关于这个网站的描述文字"><div class="wrapper cover"><img class="cover fadeIn" src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"></div><div class="info"><img class="flink-avatar" src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"><span class="site-title">Linhk1606</span></div></a></div></div><div class="tab-item-content" id="test4-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://bu.dusays.com/2022/05/02/626f92e193879.jpg, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://inkss.cn/img/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://static.mhuig.top/npm/mhg@0.0.0/avatar/avatar.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://avatars.githubusercontent.com/u/58458181?v=4, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="行内图片-inlineimage"><a href="#行内图片-inlineimage" class="headerlink" title="行内图片 inlineimage"></a>行内图片 inlineimage</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">配置参数</button><button type="button" class="tab " data-href="test4-3">样式预览</button><button type="button" class="tab " data-href="test4-4">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><ol><li>高度：height=20px</li></ol></div><div class="tab-item-content" id="test4-3"><p>这是 <img no-lazy class="inline" src="https://bu.dusays.com/2022/05/19/628532706842d.gif" style="height:1.5em"> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://bu.dusays.com/2022/05/19/6285328a83ca7.gif" style="height:40px;"> 一段话。</p></div><div class="tab-item-content" id="test4-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://bu.dusays.com/2022/05/19/628532706842d.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://bu.dusays.com/2022/05/19/6285328a83ca7.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="单张图片-image"><a href="#单张图片-image" class="headerlink" title="单张图片 image"></a>单张图片 image</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">配置参数</button><button type="button" class="tab " data-href="test4-3">样式预览</button><button type="button" class="tab " data-href="test4-4">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol></div><div class="tab-item-content" id="test4-3"><ol><li><p>添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2022/05/19/6285306c996c4.jpg" alt=" 愿你成为自己的太阳，无需凭借谁的光芒。"></div><span class="image-caption"> 愿你成为自己的太阳，无需凭借谁的光芒。</span></div></li><li><p>指定宽度：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2022/05/19/6285306c996c4.jpg" style="width:400px;"></div></div></li><li><p>指定宽度并添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://bu.dusays.com/2022/05/19/6285306c996c4.jpg" alt="愿你成为自己的太阳，无需凭借谁的光芒。" style="width:400px;"></div><span class="image-caption">愿你成为自己的太阳，无需凭借谁的光芒。</span></div></li><li><p>设置占位背景色</p><div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://bu.dusays.com/2022/05/19/6285306c996c4.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"></div><span class="image-caption">优化不同宽度浏览的观感</span></div></li></ol></div><div class="tab-item-content" id="test4-4"><ol><li><p>添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://bu.dusays.com/2022/05/19/6285306c996c4.jpg, alt=愿你成为自己的太阳，无需凭借谁的光芒。 %&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定宽度：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://bu.dusays.com/2022/05/19/6285306c996c4.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://bu.dusays.com/2022/05/19/6285306c996c4.jpg, width=400px, alt=愿你成为自己的太阳，无需凭借谁的光芒。 %&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置占位背景色</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://bu.dusays.com/2022/05/19/6285306c996c4.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频 audio"></a>音频 audio</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">样式预览</button><button type="button" class="tab " data-href="test4-3">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><div class="audio"><audio controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3" type="audio/mp3">Your browser does not support the audio tag.</audio></div></div><div class="tab-item-content" id="test4-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">配置参数</button><button type="button" class="tab " data-href="test4-3">样式预览</button><button type="button" class="tab " data-href="test4-4">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><ol><li>对其方向：left, center, right</li><li>列数：逗号后面直接写列数，支持 1 ～ 4 列</li></ol></div><div class="tab-item-content" id="test4-3"><ol><li><p>100%宽度</p><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div></li><li><p>50%宽度</p><div class="videos" col="2"><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div></div></li><li><p>25%宽度</p><div class="videos" col="4"><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov" type="video/mp4">Your browser does not support the video tag.</video></div></div></li></ol></div><div class="tab-item-content" id="test4-4"><ol><li><p>100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></li><li><p>25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="相册-gallery"><a href="#相册-gallery" class="headerlink" title="相册 gallery"></a>相册 gallery</h2><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>自带<code>gallery相册</code>，而且会根据图片大小自动调整排版，效果比<code>Volantis</code>的gallery更好，故不再收录Volantis的gallery标签</p></div><div class="note green no-icon flat"><p>以下为<code>Butterfly</code>自带的<code>gallery</code>标签写法。相册图库和相册配合使用</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">配置参数</button><button type="button" class="tab " data-href="test4-3">样式预览</button><button type="button" class="tab " data-href="test4-4">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><ol><li><p>gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol></div><div class="tab-item-content" id="test4-2"><ul><li>gallerygroup 相册图库</li></ul><div class="table-container"><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应的相册</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table></div><ul><li>gallery 相册</li></ul><p>区别于旧版的<code>Gallery</code>相册，新的<code>Gallery</code>相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。建议在粘贴时故意使用长短、大小、横竖不一的图片，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></div><div class="tab-item-content" id="test4-3"><ol><li><p>gallerygroup 相册图库</p><div class="gallery-group-main"><figure class="gallery-group"><img class="gallery-group-img no-lightbox" src="/undefined/da9e" alt="Group Image Gallery"><figcaption><div class="gallery-group-name">DM1</div><p>/gallery/DM1/</p><a href="https://bu.dusays.com/2022/01/08/80f5b9302a257.jpg"></a></figcaption></figure></div></li></ol>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="/undefined/da9e" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">DM2</div>  <p>/gallery/DM2/</p>  <a href="https://bu.dusays.com/2022/03/03/2025544a69a3a.jpg"></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="/undefined/da9e" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Ethan</div>  <p>/gallery/Ethan/</p>  <a href="https://bu.dusays.com/2022/03/03/43851ed59eb66.jpg"></a>  </figcaption>  </figure><p>   &lt;/div&gt;</p><ol><li><p>gallery 相册</p><div class="gallery"><div class="fj-gallery page_img_lazyload  data" data-rowheight="220" data-limit="10"> <span class="gallery-data">[{"url":"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""}]</span></div><button class="gallery-load-more" style="opacity:0"><span>加载更多</span><i class="anzhiyufont anzhiyu-icon-arrow-down"></i></button></div></li></ol></div><div class="tab-item-content" id="test4-4"><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>使用相册图库的话，可以在导航栏加一个<code>gallery</code>的<code>page</code>(使用指令<code>hexo new page gallery</code>添加)，里面放相册图库作为封面。然后在<code>[Blogroot]/source/gallery/</code>下面建立相应的文件夹，例如若按照这里的示例，若欲使用<code>/gallery/DM1/</code>路径访问MC相册，则需要新建<code>[Blogroot]/source/gallery/MC/index.md</code>，并在里面填入<code>gallery</code>相册内容</p></div><ol><li><p>gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup DM1 &#x27;/gallery/DM1/&#x27; https://bu.dusays.com/2022/01/08/80f5b9302a257.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup DM2 &#x27;/gallery/DM2/&#x27; https://bu.dusays.com/2022/03/03/2025544a69a3a.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Ethan &#x27;/gallery/Ethan/&#x27; https://bu.dusays.com/2022/03/03/43851ed59eb66.jpg %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="折叠框-folding"><a href="#折叠框-folding" class="headerlink" title="折叠框 folding"></a>折叠框 folding</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">配置参数</button><button type="button" class="tab " data-href="test4-3">样式预览</button><button type="button" class="tab " data-href="test4-4">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><ol><li>颜色：<span class="p red">红色</span>、<span class="p yellow">黄色</span>、<span class="p green">绿色</span>、<span class="p cyan">青色</span>、<span class="p blue">蓝色</span>、<span class="p gray">灰色</span></li><li>状态：状态填写 open 代表默认打开</li></ol></div><div class="tab-item-content" id="test4-3"><details class="folding-tag"><summary> 查看图片测试 </summary>              <div class="content">              <p><img src="https://bu.dusays.com/2022/05/19/628533399e7a1.jpg" alt></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class="content">              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class="content">              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class="content">              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class="content">              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class="content">              <details class="folding-tag"><summary> 查看嵌套测试3 </summary>              <div class="content">              <p>hahaha <span><img src="https://bu.dusays.com/2022/05/19/62853244cef33.png" style="height:24px"></span></p>              </div>            </details>              </div>            </details>              </div>            </details></div><div class="tab-item-content" id="test4-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://bu.dusays.com/2022/05/19/628533399e7a1.jpg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://bu.dusays.com/2022/05/19/62853244cef33.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">标签语法</button><button type="button" class="tab " data-href="test4-2">样式预览</button><button type="button" class="tab " data-href="test4-3">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test4-2"><p><a href="#">Post not found: kickdown作用</a></p></div><div class="tab-item-content" id="test4-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link kickdown作用 %&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note info flat"><p><strong>本文摘自：</strong> <span class="p blue">唐志远の博客の外挂标签引入</span></p></div>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记 - Java8新特性</title>
      <link href="/undefined/6b46.html"/>
      <url>/undefined/6b46.html</url>
      
        <content type="html"><![CDATA[<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><ul><li>Lambda表达式是一个函数式接口的实例</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class="line">Lambda形参列表 -&gt; Lambda体<span class="comment">// -&gt; : Lambda操作符或者箭头操作符  </span></span><br></pre></td></tr></table></figure><h3 id="使用情形"><a href="#使用情形" class="headerlink" title="使用情形"></a>使用情形</h3><ul><li>-&gt;左边（形参列表）：<ul><li>Lambda形参列表只有一个参数时，可以省略()</li><li>Lambda形参列表没有或者两个以上参数，括号不可以省略</li></ul></li><li>-&gt;右边（Lambda体）：<ul><li>Lambda体应该使用一对{}包括</li><li>如果只有一条执行语句（可能是return语句）可以省略{}</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest1</span> &#123;</span><br><span class="line">    <span class="comment">//语法格式1：无参，无返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1, o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> comparator.compare(<span class="number">12</span>, <span class="number">34</span>);</span><br><span class="line">        System.out.println(compare);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda表达式</span></span><br><span class="line">        Comparator&lt;Integer&gt; comparator1 = (o1,  o2) -&gt; Integer.compare(o1, o2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">compare1</span> <span class="operator">=</span> comparator1.compare(<span class="number">38</span>, <span class="number">34</span>);</span><br><span class="line">        System.out.println(compare1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法表达式2：需要一个参数，但是没有返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; con = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        con.accept(<span class="string">&quot;谎言和誓言的区别是什么？&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda表达式</span></span><br><span class="line">        Consumer&lt;String&gt; con1 = (String s) -&gt; System.out.println(s);</span><br><span class="line">        con1.accept(<span class="string">&quot;一个是听的人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式3：数据类型可以省略，可由编译器推断的出，称为“类型推断”</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; con1 = (String s) -&gt; System.out.println(s);</span><br><span class="line">        con1.accept(<span class="string">&quot;一个是听的人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改进</span></span><br><span class="line">        Consumer&lt;String&gt; con2 = (s) -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line">        con2.accept(<span class="string">&quot;一个是听的人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//类型推断</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//类型推断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式4：Lambda若只有一个参数时，参数的小括号可以省略</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; con1 = (s) -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line">        con1.accept(<span class="string">&quot;一个是听的人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line">        <span class="comment">//改进</span></span><br><span class="line">        Consumer&lt;String&gt; con2 = s -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line">        con2.accept(<span class="string">&quot;一个是听的人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式5：Lambda需要两个或以上的参数，多条执行语句，并且可以有返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1, o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> comparator.compare(<span class="number">12</span>, <span class="number">34</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改进</span></span><br><span class="line">        Comparator&lt;Integer&gt; comparator1 = (o1,o2) -&gt; &#123;</span><br><span class="line">            System.out.println(o1);</span><br><span class="line">            System.out.println(o2);</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式6：当Lambda只有一条语句时，return 和 &#123;&#125;若有，都可以省略</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; comparator1 = (o1,o2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改进</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator1 = (o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ul><li><p>只包含一个抽象方法的接口，称为函数式接口</p></li><li><p>在一个接口上使用@FunctionalInterface注解，可以检查它是否是一个函数式接口</p></li></ul><h3 id="java内置四大核心函数式接口"><a href="#java内置四大核心函数式接口" class="headerlink" title="java内置四大核心函数式接口"></a>java内置四大核心函数式接口</h3><div class="table-container"><table><thead><tr><th style="text-align:left">函数式接口</th><th style="text-align:center">参数类型</th><th style="text-align:center">返回类型</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">Consumer<T>  消费型接口</T></td><td style="text-align:center">T</td><td style="text-align:center">void</td><td style="text-align:left">对类型为T的对象应用操作，包含方法：                        void accept(T t)</td></tr><tr><td style="text-align:left">Supplier<T>  供给型接口</T></td><td style="text-align:center">无</td><td style="text-align:center">T</td><td style="text-align:left">返回类型为T的对象，包含方法：T get()</td></tr><tr><td style="text-align:left">Function<T, r>  函数型接口</T,></td><td style="text-align:center">T</td><td style="text-align:center">R</td><td style="text-align:left">对象类型为T的对象应用操作，并返回结果，结果是R类型的对象，包含方法：R apply(T t)</td></tr><tr><td style="text-align:left">Predicate<T>  断定型接口</T></td><td style="text-align:center">T</td><td style="text-align:center">boolean</td><td style="text-align:left">确定类型为T的对象是否满足某约束，并返回布尔值，包含方法：boolean test(T t)</td></tr></tbody></table></div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest2</span> &#123;</span><br><span class="line">    <span class="comment">//消费型接口</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//普通写法</span></span><br><span class="line">        consumer(<span class="number">1000</span>, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Double&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Double aDouble)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您共消费：&quot;</span> + aDouble);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式写法</span></span><br><span class="line">        consumer(<span class="number">400</span>, money -&gt; System.out.println(<span class="string">&quot;您共消费：&quot;</span> + money))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumer</span><span class="params">(<span class="type">double</span> money, Consumer&lt;Double&gt; con)</span>&#123;</span><br><span class="line">        con.accept(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//断定型接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;String&gt; arr = Arrays.asList(<span class="string">&quot;天津&quot;</span>, <span class="string">&quot;南京&quot;</span>, <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;东京&quot;</span>, <span class="string">&quot;山海经&quot;</span>);</span><br><span class="line">        <span class="comment">//普通写法</span></span><br><span class="line">        List&lt;String&gt; list = findString(arr, <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> s.contains(<span class="string">&quot;京&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式写法</span></span><br><span class="line">        List&lt;String&gt; list1 = findString(arr, s -&gt; s.contains(<span class="string">&quot;京&quot;</span>));</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findString</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="comment">//pre.test(s) 为true</span></span><br><span class="line">            <span class="keyword">if</span> (pre.test(s)) &#123;</span><br><span class="line">                arrayList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他接口"><a href="#其他接口" class="headerlink" title="其他接口"></a>其他接口</h3><img src="/undefined/6b46/6b46/%E5%85%B6%E4%BB%96%E6%8E%A5%E5%8F%A3.png" class><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类(或对象) :: 方法名</span><br></pre></td></tr></table></figure><h3 id="使用要求"><a href="#使用要求" class="headerlink" title="使用要求"></a>使用要求</h3><ul><li>实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致</li></ul><h3 id="使用情形-1"><a href="#使用情形-1" class="headerlink" title="使用情形"></a>使用情形</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象 :: 实例方法名</span></span><br><span class="line"><span class="comment">//类 :: 静态方法名</span></span><br><span class="line"><span class="comment">//类 :: 实例方法名</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodReferences</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况1：对象 :: 实例方法</span></span><br><span class="line">    <span class="comment">//消费型接口</span></span><br><span class="line">    <span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line">    <span class="comment">//PrintStream中的println(T t)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//普通写法</span></span><br><span class="line">        Consumer&lt;String&gt; stringConsumer = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式写法</span></span><br><span class="line">        Consumer&lt;String&gt; con1 = s -&gt; System.out.println(s);</span><br><span class="line">        con1.accept(<span class="string">&quot;南京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">        Consumer&lt;String&gt; con2 = out :: println;</span><br><span class="line">        <span class="comment">//Consumer&lt;String&gt; con2 = System.out :: println;</span></span><br><span class="line">        con2.accept(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//供给型接口</span></span><br><span class="line">    <span class="comment">//Supplier中的T get()</span></span><br><span class="line">    <span class="comment">//Employee中的String getName()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通写法</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        Supplier&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> tom.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(s.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        Supplier&lt;String&gt; s1 = () -&gt; tom.getName();</span><br><span class="line">        System.out.println(s1.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        Supplier&lt;String&gt; s2 = tom :: getName;</span><br><span class="line">        System.out.println(s2.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况2：类 :: 静态方法</span></span><br><span class="line">    <span class="comment">//Comparator中的int compare(T t1, T t2)</span></span><br><span class="line">    <span class="comment">//Integer中的int compare(T t1, T t2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通写法</span></span><br><span class="line">        Comparator&lt;Integer&gt; com = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(com.compare(<span class="number">12</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        Comparator&lt;Integer&gt; com1 = (o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class="line">        System.out.println(com1.compare(<span class="number">3</span>,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line">        System.out.println(com2.compare(<span class="number">5</span>,<span class="number">9</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    <span class="comment">//Math中的Long round(Double d)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通写法</span></span><br><span class="line">        Function&lt;Double,Long&gt; fun = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Double, Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Double d)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Math.round(d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(fun.apply(<span class="number">15.63</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        Function&lt;Double,Long&gt; fun1 = d -&gt; Math.round(d);</span><br><span class="line">        System.out.println(fun1.apply(<span class="number">55.3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        Function&lt;Double,Long&gt; fun2 = Math::round;</span><br><span class="line">        System.out.println(fun2.apply(<span class="number">42.6</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况3： 类 :: 实例方法</span></span><br><span class="line">    <span class="comment">// Comparator中的int compare(T t1, T t2)</span></span><br><span class="line">    <span class="comment">// String中的int t1.compareTo(t2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        Comparator&lt;String&gt; com = (s1,s2) -&gt; s1.compareTo(s2);</span><br><span class="line">        System.out.println(com.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        Comparator&lt;String&gt; com1 = String :: compareTo;</span><br><span class="line">        System.out.println(com1.compare(<span class="string">&quot;adm&quot;</span>, <span class="string">&quot;abg&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BiPredicate中的boolean test(T t1, T t2)</span></span><br><span class="line">    <span class="comment">//String中boolean t1.equals(t2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//普通写法</span></span><br><span class="line">        BiPredicate&lt;String,String&gt; pre = <span class="keyword">new</span> <span class="title class_">BiPredicate</span>&lt;String, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> s1.equals(s2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(pre.test(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        BiPredicate&lt;String,String&gt; pre1 = (s1, s2) -&gt; s1.equals(s2);</span><br><span class="line">        System.out.println(pre1.test(<span class="string">&quot;dbd&quot;</span>, <span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        BiPredicate&lt;String,String&gt; pre2 = String :: equals;</span><br><span class="line">        System.out.println(pre2.test(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Function中的R apply(T t)</span></span><br><span class="line">    <span class="comment">// Employee中的String getName()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通写法</span></span><br><span class="line">        Function&lt;Employee,String&gt; fun = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Employee, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">apply</span><span class="params">(Employee e)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> e.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        Function&lt;Employee,String&gt; fun1 = e -&gt; e.getName();</span><br><span class="line">        System.out.println(fun1.apply(employee));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        Function&lt;Employee,String&gt; fun2 = Employee :: getName;</span><br><span class="line">        System.out.println(fun2.apply(employee));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><ul><li>函数式接口的抽象方法的形参列表和构造器的形参列表一致，抽象方法的返回值类型即为构造器的类的类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造器引用</span></span><br><span class="line"><span class="comment">//Supplier中的T get()</span></span><br><span class="line"><span class="comment">//Employee中的无参构造器 Employee()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通写法</span></span><br><span class="line">    Supplier&lt;Employee&gt; sup = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Employee&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;may&quot;</span>, <span class="number">17</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(sup.get());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Lambda表达式</span></span><br><span class="line">    Supplier&lt;Employee&gt; sup1 = () -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;hello&quot;</span>, <span class="number">23</span>);</span><br><span class="line">    System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器引用</span></span><br><span class="line">    Supplier&lt;Employee&gt; sup2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">    System.out.println(sup2.get());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//Lambda表达式</span></span><br><span class="line">    Function&lt;Integer, Employee&gt; fun = (age) -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>(age);</span><br><span class="line">    System.out.println(fun.apply(<span class="number">23</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器引用</span></span><br><span class="line">    Function&lt;Integer, Employee&gt; fun1 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">    System.out.println(fun1.apply(<span class="number">36</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiFunction中的R apply(T t, U u)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//Lambda表达式</span></span><br><span class="line">    BiFunction&lt;Integer,String,Employee&gt; bif = (age, name) -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>(name,age);</span><br><span class="line">    System.out.println(bif.apply(<span class="number">26</span>,<span class="string">&quot;smith&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器引用</span></span><br><span class="line">    BiFunction&lt;String,Integer,Employee&gt; bif1 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">    System.out.println(bif1.apply(<span class="string">&quot;Tom&quot;</span>, <span class="number">39</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h2><ul><li>可将数组看成一个特殊的类，和构造器引用一致</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组引用</span></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//普通写法</span></span><br><span class="line">    Function&lt;Integer,String[]&gt; fun = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, String[]&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String[] apply(Integer integer) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[integer];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    String[] arr = fun.apply(<span class="number">5</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Lambda表达式</span></span><br><span class="line">    Function&lt;Integer,String[]&gt; fun1 = length -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">    System.out.println(Arrays.toString(fun1.apply(<span class="number">5</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组引用</span></span><br><span class="line">    Function&lt;Integer,String[]&gt; fun2 = String[] ::<span class="keyword">new</span>;</span><br><span class="line">    System.out.println(Arrays.toString(fun2.apply(<span class="number">5</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream的API"><a href="#Stream的API" class="headerlink" title="Stream的API"></a>Stream的API</h2><h3 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h3><ul><li>一个数据源（数组、集合），获取一个流</li></ul><h4 id="通过集合创建"><a href="#通过集合创建" class="headerlink" title="通过集合创建"></a>通过集合创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title function_">stream</span><span class="params">()</span>;<span class="comment">//返回一个顺序流</span></span><br><span class="line"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title function_">parallelStream</span><span class="params">()</span>;<span class="comment">//返回一个并行流</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式一：通过集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;水浒传&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;西游记&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// default Stream&lt;E&gt; stream() : 返回一个顺序流</span></span><br><span class="line">    Stream&lt;String&gt; stream = list.stream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class="line">    Stream&lt;String&gt; stringStream = list.parallelStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过数组创建"><a href="#通过数组创建" class="headerlink" title="通过数组创建"></a>通过数组创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; Stream&lt;T&gt; <span class="title function_">stream</span><span class="params">(T[] array)</span>;<span class="comment">//返回一个流</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式二：通过数组</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//调用Arrays类的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array) : 返回一个流</span></span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过Stream的of-创建"><a href="#通过Stream的of-创建" class="headerlink" title="通过Stream的of()创建"></a>通过Stream的of()创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Stream方式三：通过stream的of()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建无限流"><a href="#创建无限流" class="headerlink" title="创建无限流"></a>创建无限流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">    <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed,final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">    Stream.iterate(<span class="number">0</span>,t -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">    Stream.generate(Math :: random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><ul><li>一个中间操作链，对数据源的数据进处理</li></ul><h4 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filter(Predicate p);<span class="comment">//接收Lambda，从流重排除某些元素</span></span><br><span class="line">distinct();<span class="comment">//筛选，通过流产生的元素的hashCode()和equals()去除重复的元素</span></span><br><span class="line">limit(<span class="type">long</span> maxSize);<span class="comment">//截断流，使其元素不超过给定的值</span></span><br><span class="line">skip(<span class="type">long</span> n);<span class="comment">//跳过元素，返回一个仍掉了前n个元素的流。若流中元素不足n个，则返回一个空流，与limit(n)互补</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 筛选与切片</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">2</span>);</span><br><span class="line">    list.add(<span class="number">3</span>);</span><br><span class="line">    list.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//filter(Predicate p) -- 接收Lambda 从流中排除某些元素</span></span><br><span class="line">    Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">    stream.filter(num -&gt; num &gt; <span class="number">2</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//limit(n) -- 截断流，使其元素不超过给定数量</span></span><br><span class="line">    list.stream().limit(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//skip -- 跳过元素，返回一个去掉了前n个元素的流，若流中元素不足n个 ，则返回一个空流</span></span><br><span class="line">    list.stream().skip(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//distinct -- 筛选去重，通过流所生成元素的hashCode() 和equals() 去除重复元素</span></span><br><span class="line">    list.add(<span class="number">4</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    list.stream().distinct().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map(Function f);<span class="comment">//接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</span></span><br><span class="line">map <span class="title function_">ToDouble</span><span class="params">(ToDoubleFunction f)</span>;<span class="comment">//接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream</span></span><br><span class="line">map <span class="title function_">Tolnt</span><span class="params">(TolntFunction f)</span>;<span class="comment">//接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream</span></span><br><span class="line">map <span class="title function_">ToLong</span><span class="params">(ToLongFunction f)</span>;<span class="comment">//接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream</span></span><br><span class="line">flatMap(Function f);<span class="comment">//接收一个函数作为参数，将流中的每个值都换成另一个流,然后把所有流连接成一个流</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//映射</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//map(Function f) -- 接收一个函数作为参数，将元素转换成其他形式或提取信息</span></span><br><span class="line">    <span class="comment">//                   该函数会被应用到每个元素上，并将其映射成一个新的元素</span></span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">    list.stream().map(str -&gt; str.toUpperCase()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Stream</span></span><br><span class="line">    Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream().map(str -&gt; StreamAPITest3.formStringToStream(str));</span><br><span class="line">    streamStream.forEach(s -&gt; &#123;</span><br><span class="line">        s.forEach(System.out::println);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//flatMap(Function f) -- 接收一个函数作为参数，将流中的每个值都换成另外一个流，然后把所有的流    重新组成一个新的流</span></span><br><span class="line"></span><br><span class="line">    Stream&lt;Character&gt; characterStream = list.stream().flatMap(str -&gt; StreamAPITest3.formStringToStream(str));</span><br><span class="line">    characterStream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串中的多个字符构成的集合转换为对应的Stream的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title function_">formStringToStream</span><span class="params">(String str)</span> &#123;<span class="comment">//aa</span></span><br><span class="line">    ArrayList&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Character c : str.toCharArray()) &#123;</span><br><span class="line">        <span class="comment">//将获取的字符加入到集合</span></span><br><span class="line">        list.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//sorted() -- 自然排序</span></span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, -<span class="number">9</span>, <span class="number">34</span>, <span class="number">3</span>);</span><br><span class="line">    list.stream().sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sorted() -- 定制排序</span></span><br><span class="line">    List&lt;Employee&gt; employeeData = EmployeeData.getEmployeeData();</span><br><span class="line">    employeeData.stream().sorted((e1, e2) -&gt; Integer.compare(e1.getAge(), e2.getAge()))</span><br><span class="line">        .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h3><ul><li>一旦执行终止操作，就执行中间操作链，并产生结果，之后不会再被使用</li></ul><h4 id="匹配与查找"><a href="#匹配与查找" class="headerlink" title="匹配与查找"></a>匹配与查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">allMatch(Predicate p);<span class="comment">//检查是否匹配所有元素</span></span><br><span class="line">anyMatch(Predicate p);<span class="comment">//检查是否至少匹配一个元素</span></span><br><span class="line">noneMatch(Predicate p);<span class="comment">//检查是否没有匹配所有元素</span></span><br><span class="line">findFirst();<span class="comment">//返回第一个元素</span></span><br><span class="line">findAny();<span class="comment">//返回当前流中的任意元素</span></span><br><span class="line">count();<span class="comment">//返回流中元素总数</span></span><br><span class="line">max(Comparator c);<span class="comment">//返回流中最大值</span></span><br><span class="line">min(Comparator c);<span class="comment">//返回流中最小值</span></span><br><span class="line">forEach(Consumer c);<span class="comment">//内部迭代(使用 Collection接口需要用户去做迭代，称为外部迭代。相反，Stream API使用内部迭代——它帮你把迭代做了)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employeeData = EmployeeData.getEmployeeData();</span><br><span class="line">    <span class="comment">//        aLlMatch(Predicate p)—检查是否匹配所有元素。</span></span><br><span class="line">    <span class="comment">//        练习:是否所有的员工的年龄都大于18</span></span><br><span class="line">    Stream&lt;Integer&gt; integerStream = employeeData.stream().map(Employee::getAge);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">allMatch</span> <span class="operator">=</span> integerStream.allMatch(age -&gt; age &gt; <span class="number">18</span>);</span><br><span class="line">    System.out.println(allMatch);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        anyMatch(Predicate p)—检查是否至少匹配一个元素。</span></span><br><span class="line">    <span class="comment">//        练习:是否存在员工的年龄小于18</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">anyMatch</span> <span class="operator">=</span> employeeData.stream().map(Employee::getAge).anyMatch(age -&gt; age &lt; <span class="number">18</span>);</span><br><span class="line">    System.out.println(anyMatch);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        noneMatch(Predicate p)─检查是否没有匹配的元素。</span></span><br><span class="line">    <span class="comment">//startsWith(&quot;雷&quot;) 匹配第一个字符串</span></span><br><span class="line">    <span class="comment">//        练习:是否存在员工姓&quot;雷&quot;</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">noneMatch</span> <span class="operator">=</span> employeeData.stream().noneMatch(e -&gt; e.getName().startsWith(<span class="string">&quot;雷&quot;</span>));</span><br><span class="line">    System.out.println(noneMatch);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        findFirst——返回第一个元素</span></span><br><span class="line">    Optional&lt;Employee&gt; first = employeeData.stream().findFirst();</span><br><span class="line">    System.out.println(first);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        findAny—返回当前流中的任意元素</span></span><br><span class="line">    Optional&lt;Employee&gt; any = employeeData.parallelStream().findAny();</span><br><span class="line">    System.out.println(any);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        count—返回流中元素的总个数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> employeeData.stream().count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        max(Comparator c)—返回流中最大值</span></span><br><span class="line">    <span class="comment">//        练习: 返回最大的年龄:</span></span><br><span class="line">    Optional&lt;Integer&gt; max = employeeData.stream().map(Employee::getAge).max(Integer::compareTo);</span><br><span class="line">    System.out.println(max);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        min(Comparator c) - 返回流中最小值</span></span><br><span class="line">    <span class="comment">//        练习:返回最小年龄的员工</span></span><br><span class="line">    Optional&lt;Employee&gt; min = employeeData.stream().min((e1, e2) -&gt; Integer.compare(e1.getAge(), e2.getAge()));</span><br><span class="line">    System.out.println(min);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        forEach(Consumer c)—内部迭代</span></span><br><span class="line">    employeeData.stream().forEach(System.out::println);</span><br><span class="line">    <span class="comment">//使用的是集合的遍历操作</span></span><br><span class="line">    employeeData.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reduce(T iden, BinaryOperator b);<span class="comment">//可以将流中元素反复结合起来，得到一个值。返回T</span></span><br><span class="line">reduce(BinaryOperator b);<span class="comment">//可以将流中元素反复结合起来，得到一个值。返回Optional&lt;T&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 归约</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//reduce(T identify, BinaryOperator b)</span></span><br><span class="line">    <span class="comment">//将流中的元素反复结合起来，得到一个值，返回T</span></span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">//identify:0 初始值为0</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">reduce</span> <span class="operator">=</span> list.stream().reduce(<span class="number">0</span>, (d1, d2) -&gt; d1 + d2);</span><br><span class="line">    System.out.println(reduce);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//reduce(BinaryOperator b)</span></span><br><span class="line">    <span class="comment">//将流中的元素反复结合起来，得到一个值，返回Optional&lt;T&gt;</span></span><br><span class="line">    Optional&lt;Integer&gt; reduce1 = list.stream().reduce((d1, d2) -&gt; d1 + d2);</span><br><span class="line">    System.out.println(reduce1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collect(Collector c);<span class="comment">//将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法</span></span><br></pre></td></tr></table></figure><h5 id="Collectors接口"><a href="#Collectors接口" class="headerlink" title="Collectors接口"></a>Collectors接口</h5><h6 id="toList方法"><a href="#toList方法" class="headerlink" title="toList方法"></a>toList方法</h6><ul><li>返回类型：List<T></T></li><li>作用：将流中的元素收集到List</li></ul><h6 id="toSet方法"><a href="#toSet方法" class="headerlink" title="toSet方法"></a>toSet方法</h6><ul><li>返回类型：Set<T> </T></li><li>作用：把流中的元素收集到Set</li></ul><h6 id="toCollection方法"><a href="#toCollection方法" class="headerlink" title="toCollection方法"></a>toCollection方法</h6><ul><li>返回类型：Collection<T></T></li><li>作用：将流中的元素收集到创建的集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. 收集</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//collect(Collect c) 将流转换为其他形式</span></span><br><span class="line">    <span class="comment">//list 有序</span></span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">    List&lt;Integer&gt; integerList = list.stream().filter(num -&gt; num &gt; <span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(integerList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set 无序</span></span><br><span class="line">    Set&lt;Integer&gt; integerSet = list.stream().filter(num -&gt; num &gt; <span class="number">2</span>).collect(Collectors.toSet());</span><br><span class="line">    System.out.println(integerSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h2><ul><li>是一个容器类（java.util.Optional），可以保存类型T值，代表这个值存在，或者仅仅保存bull，表示这个值不存在</li></ul><h3 id="创建Optional类对象方法"><a href="#创建Optional类对象方法" class="headerlink" title="创建Optional类对象方法"></a>创建Optional类对象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Optional.of(T t);<span class="comment">//创建一个Optional实例，t必须为非空</span></span><br><span class="line">Optional.empty();<span class="comment">//创建一个空的Optional实例</span></span><br><span class="line">Optional.ofNullable(T t);<span class="comment">//t可以为null</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>();</span><br><span class="line">    <span class="comment">//girl = null;//报错空指针异常</span></span><br><span class="line">    <span class="comment">//Optional.of(T t) 创建一个Optional实例，t必须非空</span></span><br><span class="line">    Optional&lt;Girl&gt; optionalGirl = Optional.of(girl);</span><br><span class="line">    System.out.println(optionalGirl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Optional.empty() 创建一个空的Optional实例</span></span><br><span class="line">    <span class="comment">//Optional.ofNullable(T t) 创建一个Optional实例，t可以为null</span></span><br><span class="line">    Optional&lt;Girl&gt; optionalGirl1 = Optional.ofNullable(girl);</span><br><span class="line">    <span class="comment">//当 girl 为null时 输出Optional.empty</span></span><br><span class="line">    System.out.println(optionalGirl1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>();</span><br><span class="line">    boy = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">girlName</span> <span class="operator">=</span> getGirlName(boy);</span><br><span class="line">    System.out.println(girlName);</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//使用optional类的getGirlName()</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getGirlName</span><span class="params">(Boy boy)</span>&#123;</span><br><span class="line"></span><br><span class="line">    Optional&lt;Boy&gt; boyOptional = Optional.ofNullable(boy);</span><br><span class="line">    <span class="comment">//boy1一定不为null  当boy为null时 输出1号</span></span><br><span class="line">    <span class="type">Boy</span> <span class="variable">boy1</span> <span class="operator">=</span> boyOptional.orElse(<span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;1号&quot;</span>)));</span><br><span class="line">    <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> boy1.getGirl();</span><br><span class="line">    Optional&lt;Girl&gt; girlOptional = Optional.ofNullable(girl);</span><br><span class="line">    <span class="comment">//girl1一定不为null 当girl为null输出2号</span></span><br><span class="line">    <span class="type">Girl</span> <span class="variable">girl1</span> <span class="operator">=</span> girlOptional.orElse(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;2号&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> girl1.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断Optional容器中是否包含对象"><a href="#判断Optional容器中是否包含对象" class="headerlink" title="判断Optional容器中是否包含对象"></a>判断Optional容器中是否包含对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">isPresent</span><span class="params">()</span>;<span class="comment">//判断是否包含对象</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">ifPresent</span><span class="params">(Consumer&lt;?<span class="built_in">super</span> T&gt; consumer)</span>;<span class="comment">//如果有值，就执行Consumer接口的实现代码，并且该值会作为参数传给它</span></span><br></pre></td></tr></table></figure><h3 id="获取Optional容器的对象"><a href="#获取Optional容器的对象" class="headerlink" title="获取Optional容器的对象"></a>获取Optional容器的对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T <span class="title function_">get</span><span class="params">()</span>;<span class="comment">//如果调用对象包含值，返回该值，否则抛异常</span></span><br><span class="line">T <span class="title function_">orElse</span><span class="params">(T other)</span>;<span class="comment">//如果有值则将其返回，否则返回指定的other对象。</span></span><br><span class="line">T <span class="title function_">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt;other)</span>;<span class="comment">//如果有值则将其返回，否则返回由Supplier接口实现提供的对象</span></span><br><span class="line">T orElse <span class="title function_">Throw</span><span class="params">(Supplier&lt;? extends X&gt;exceptionSupplier)</span>;<span class="comment">//如果有值则将其返回，否则抛出由Supplier接口实现提供的异常</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（一） - java执行流程</title>
      <link href="/undefined/f8ae.html"/>
      <url>/undefined/f8ae.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、JDK"><a href="#一、JDK" class="headerlink" title="一、JDK"></a>一、JDK</h2><ul><li>全称Java Development Kit</li><li>包含JRE + Java开发工具（Java、javac、Javadoc、javap等）</li></ul><h2 id="二、JRE"><a href="#二、JRE" class="headerlink" title="二、JRE"></a>二、JRE</h2><ul><li>Java Runtime Environment   java的运行环境</li><li>JRE = JVM + Java的核心类库</li></ul><h2 id="三、java执行流程"><a href="#三、java执行流程" class="headerlink" title="三、java执行流程"></a>三、java执行流程</h2><img src="/undefined/f8ae/f8ae/java%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" class title="java执行流程"><h3 id="四、java开发注意事项"><a href="#四、java开发注意事项" class="headerlink" title="四、java开发注意事项"></a>四、java开发注意事项</h3><ul><li><p>Java源文件以.java为扩展名。源文件的基本组成部分是类(class)</p></li><li><p>Java应用程序的执行入口是main()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Java语言严格区分大小写</strong></p></li><li>Java方法由一条条语句构成，每个语句以“;”结束</li><li>大括号都是成对出现的，缺一不可</li><li><strong>一个源文件中最多只能有一个public类。其它类的个数不限</strong></li><li><strong>如果源文件包含一个public类，则文件名必须按该类名命名</strong></li><li>一个源文件中最多只能有一个public类。其它类的个数不限，也可以将main方法写在非public类中，然后指定运行非public类，这样入口方法就是非public的main方法</li></ul><h2 id="五、文档注释"><a href="#五、文档注释" class="headerlink" title="五、文档注释"></a>五、文档注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="六、java代码规范"><a href="#六、java代码规范" class="headerlink" title="六、java代码规范"></a>六、java代码规范</h2><ul><li>类、方法的注释，要以javadoc的方式来写</li><li>非javadoc的注释是给代码维护者看的</li><li>选中代码段，使用Tab键右移，shift+tab键左移</li><li>运算符和 = 两边加一个空格</li><li>源文件使用utf-8编码</li><li>行宽度不要超过80字符</li><li>代码编写次行风格和尾行风格</li></ul><h2 id="七、相对路径和绝对路径"><a href="#七、相对路径和绝对路径" class="headerlink" title="七、相对路径和绝对路径"></a>七、相对路径和绝对路径</h2><h3 id="1-相对路径"><a href="#1-相对路径" class="headerlink" title="1. 相对路径"></a>1. 相对路径</h3><ul><li>从当前目录开始定位</li></ul><h3 id="2-绝对路径"><a href="#2-绝对路径" class="headerlink" title="2. 绝对路径"></a>2. 绝对路径</h3><ul><li>从根目录开始定位</li></ul><h3 id="3-Dos命令"><a href="#3-Dos命令" class="headerlink" title="3. Dos命令"></a>3. Dos命令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1)查看当前目录内容</span></span><br><span class="line">dir;<span class="comment">//dir d:\abc\test</span></span><br><span class="line"><span class="comment">//(2)切换到其他盘</span></span><br><span class="line">cd;<span class="comment">// cd /D c:</span></span><br><span class="line"><span class="comment">//(3)切换到上一级目录</span></span><br><span class="line">cd..;</span><br><span class="line"><span class="comment">//(4)切换到根目录</span></span><br><span class="line">cd\;</span><br><span class="line"><span class="comment">//(5)查看目录</span></span><br><span class="line">tree;</span><br><span class="line"><span class="comment">//(6)清屏</span></span><br><span class="line">cls;</span><br><span class="line"><span class="comment">//(7)输入内容到文件</span></span><br><span class="line">echo;   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（二） - 数据类型</title>
      <link href="/undefined/a173.html"/>
      <url>/undefined/a173.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><img src="/undefined/a173/a173/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" class title="数据类型"><h3 id="1-整型"><a href="#1-整型" class="headerlink" title="1. 整型"></a>1. 整型</h3><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td style="text-align:center">byte[字节]</td><td>1字节</td><td>-128~127</td></tr><tr><td style="text-align:center">short[短整型]</td><td>2字节</td><td>-32768~32767</td></tr><tr><td style="text-align:center">int[整型]</td><td>4字节</td><td>-2^31~2^31-1</td></tr><tr><td style="text-align:center">long[长整型]</td><td>8字节</td><td>-2^63~2^63-1</td></tr></tbody></table></div><ul><li>Java的整型常量(具体值)默认为int型，声明long型常量须后加 l 或 L</li><li>bit：计算机中的最小存储单位</li><li>byte：计算机中基本存储单元1byte = 8 bit</li><li>byte范围使用原码和反码：[-127,127]，使用补码表示：[-128,127]       </li></ul><h3 id="2-浮点数"><a href="#2-浮点数" class="headerlink" title="2. 浮点数"></a>2. 浮点数</h3><div class="table-container"><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>单精度float</td><td>4字节</td><td>-3.403E38~3.403E38</td></tr><tr><td>双精度double</td><td>8字节</td><td>-1.798E308~1.798E308</td></tr></tbody></table></div><ul><li>浮点数在机器中存放形式：浮点数=符号位+指数位+尾数位</li><li><p>尾数部分可能丢失，造成精度损失(小数都是近似值)</p></li><li><p>Java 的浮点型常量(具体值)默认为double型，声明float型常量，须后加 f 或 F</p></li><li>浮点型常量表示方法：<ul><li>十进制数形式：5.12  512.0f  .521</li><li>科学计数法形式：5.12e2  5.12E-2</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FloatDetail</span> &#123;</span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line"><span class="comment">//定义常量a = 0.345</span></span><br><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">.345</span>;</span><br><span class="line"><span class="comment">//科学计数法计算</span></span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3.14E2</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3.14e-2</span>;</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数使用陷阱：2.7 和 8.1 / 3</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">8.1</span> / <span class="number">3</span>;</span><br><span class="line">System.out.println(num1);<span class="comment">//2.7</span></span><br><span class="line">System.out.println(num2);<span class="comment">//接近2.7 为2.6999999</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重要使用点：当我们对运算结果是小数的进行相等判断需注意</span></span><br><span class="line"><span class="comment">//应该是两个数的差值的绝对值，在某个精度范围类判断</span></span><br><span class="line"><span class="comment">// if( num1 == num2 ) &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;相等&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">if</span>(Math.abs(num1 - num2) &lt; <span class="number">0.00000001</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;差值非常小，到我们的规定精度，认为相等...&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以通过java API查看</span></span><br><span class="line">System.out.println(Math.abs(num1 - num2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-字符类型"><a href="#3-字符类型" class="headerlink" title="3. 字符类型"></a>3. 字符类型</h3><ul><li><p>char可以表示单个字符，占两个字节</p></li><li><p>字符常量是用单引号(‘’)括起来的单个字符</p></li><li>char的本质是一个整数，在输出时是unicode码对应的字符<br><a href="http://tool.chinaz.com/Tools/Unicode.aspx">http://tool.chinaz.com/Tools/Unicode.aspx</a></li><li>可以直接给char赋一个整数，然后输出时，会按照对应的unicode字符输出</li><li>char类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码</li></ul><h3 id="4-布尔类型"><a href="#4-布尔类型" class="headerlink" title="4. 布尔类型"></a>4. 布尔类型</h3><ul><li>布尔类型也叫boolean类型，booolean类型数据只允许取值true和false，无null</li><li>boolean类型占1个字节</li></ul><h2 id="二、基本数据类型转换"><a href="#二、基本数据类型转换" class="headerlink" title="二、基本数据类型转换"></a>二、基本数据类型转换</h2><h3 id="1-自动转换类型"><a href="#1-自动转换类型" class="headerlink" title="1. 自动转换类型"></a>1. 自动转换类型</h3><ul><li>当java程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型</li></ul><img src="/undefined/a173/a173/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%8C%89%E7%B2%BE%E5%BA%A6%E5%A4%A7%E5%B0%8F%E6%8E%92%E5%BA%8F.png" class title="数据类型按精度大小排序"><h4 id="1-1-细节"><a href="#1-1-细节" class="headerlink" title="1.1 细节"></a>1.1 细节</h4><ul><li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算</li><li>byte、short、char之间不会相互自动转换</li><li>byte、short、char他们三者可以计算，在计算时首先转换为int类型</li><li>boolean不参与转换</li><li>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型</li></ul><h3 id="2-强制转换类型"><a href="#2-强制转换类型" class="headerlink" title="2. 强制转换类型"></a>2. 强制转换类型</h3><ul><li>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符（)，但可能造成精度降低或溢出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> m;</span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> (<span class="type">char</span>)m;</span><br><span class="line">System.out.println(c2);</span><br></pre></td></tr></table></figure><h2 id="三、基本数据类型和String的转换"><a href="#三、基本数据类型和String的转换" class="headerlink" title="三、基本数据类型和String的转换"></a>三、基本数据类型和String的转换</h2><h3 id="1-基本类型的值-“”"><a href="#1-基本类型的值-“”" class="headerlink" title="1. 基本类型的值 + “”"></a>1. 基本类型的值 + “”</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">fLoat</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">1.1f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">3.4</span>;</span><br><span class="line"><span class="type">booLean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> n1 +<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> n2 +<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> n3 +<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-调用parseXX方法"><a href="#2-调用parseXX方法" class="headerlink" title="2. 调用parseXX方法"></a>2. 调用parseXX方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">Double.parseDouble(<span class="string">&quot;123.1&quot;</span>);</span><br><span class="line">FLoat.parseFloat(<span class="string">&quot;123.45&quot;</span>);</span><br><span class="line">Short.parseShort(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">Long.parseLong(<span class="string">&quot;12345&quot;</span>);</span><br><span class="line">BooLean.parseBoolean(<span class="string">&quot;true&quot;</span> );</span><br><span class="line">Byte.parseByte(<span class="string">&quot;12&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（三） - 运算符</title>
      <link href="/undefined/fea.html"/>
      <url>/undefined/fea.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、算术运算符"><a href="#一、算术运算符" class="headerlink" title="一、算术运算符"></a>一、算术运算符</h2><img src="/undefined/fea/fea/%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6.png" class title="算术运算符"><ul><li>有小数运算时，得到的结果为近似值</li></ul><h2 id="二、逻辑运算符"><a href="#二、逻辑运算符" class="headerlink" title="二、逻辑运算符"></a>二、逻辑运算符</h2><img src="/undefined/fea/fea/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.png" class title="逻辑运算符"><ul><li>&amp;&amp;短路与：如果第一个条件为false，则第二个条件不会判断，最终结果为false</li><li><p>&amp;逻辑与：不管第一个条件是否为false，第二个条件都要判断</p></li><li><p>符合运算会进行类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">b += <span class="number">2</span>;<span class="comment">//b = (byte)(b + 2);</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三、三元运算符"><a href="#三、三元运算符" class="headerlink" title="三、三元运算符"></a>三、三元运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">条件表达式? 表达式<span class="number">1</span>:表达式<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">System.out.println(a &gt; b?a:b);</span><br></pre></td></tr></table></figure><ul><li>如果条件表达式为true，运算后的结果是表达式1</li><li>如果条件表达式为false，运算后的结果是表达式2</li></ul><h2 id="四、运算符的优先级"><a href="#四、运算符的优先级" class="headerlink" title="四、运算符的优先级"></a>四、运算符的优先级</h2><img src="/undefined/fea/fea/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png" class title="运算符优先级"><ul><li><p>从上至下优先级降低</p></li><li><p>2行：单目运算；3行：算术运算符；4行：位移运算符；5行：比较运算符；6行：逻辑运算符；7行：三元运算符；8、9、10：赋值运算符</p></li><li><p>只有单目运算符、赋值运算符是从右向左运算的</p></li></ul><h2 id="五、标识符"><a href="#五、标识符" class="headerlink" title="五、标识符"></a>五、标识符</h2><ul><li>对各种变量、方法和类名等命名使用的字符序列为标识符</li></ul><h3 id="1-命名规则"><a href="#1-命名规则" class="headerlink" title="1. 命名规则"></a>1. 命名规则</h3><ul><li>由26个英文字母大小写，0-9，_或$组成</li><li>数字不可以开头</li><li>不可以使用关键字和保留字，但能包含关键字和保留字</li><li>Java中严格区分大小写，长度无限制</li><li>标识符不能包含空格</li></ul><h3 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2. 命名规范"></a>2. 命名规范</h3><ul><li><strong>包名</strong>：多单词组成时所有字母都小写：aaa.bbb.ccc，比如com.study.crm</li><li><strong>类名、接口名</strong>：多单词组成时，所有单词的首字母大写： XxxYyyZzz，比如:TankShotGame</li><li><strong>变量名、方法名</strong>：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz，比如：tankShotGame</li><li><strong>常量名</strong>:所有字母都大写，多单词时每个单词用下划线连接：XXX<em>YYY</em> Zzz，比如︰TAX_RATE</li></ul><h2 id="六、关键字"><a href="#六、关键字" class="headerlink" title="六、关键字"></a>六、关键字</h2><ul><li>用作专门用途的字符串</li><li><strong>关键字中所有的字母都为小写</strong></li></ul><img src="/undefined/fea/fea/%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%881%EF%BC%89.png" class title="关键字（1）"><img src="/undefined/fea/fea/%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%882%EF%BC%89.png" class title="关键字（2）"><h2 id="七、保留字"><a href="#七、保留字" class="headerlink" title="七、保留字"></a>七、保留字</h2><ul><li>现有Java版本尚未使用，但以后版本可能会作为关键字使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byValue、cast、future、generic、inner、operator、outer、rest、<span class="keyword">var</span> .goto、 const</span><br></pre></td></tr></table></figure><h2 id="八、键盘输入语句"><a href="#八、键盘输入语句" class="headerlink" title="八、键盘输入语句"></a>八、键盘输入语句</h2><ul><li>用于接收用户输入的数据</li><li>java.util包下的Scanner</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤2:创建Scanner类的对象</span></span><br><span class="line"><span class="type">scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//步骤3:调用里面的功能</span></span><br><span class="line">System.out.print1n(<span class="string">&quot;请输入姓名:&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> input.next();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄:&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入成绩:&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line">System.out.println( <span class="string">&quot;name : &quot;</span>+name);</span><br><span class="line">System.out.println( <span class="string">&quot;age: &quot;</span>+age);</span><br><span class="line">System.out.println( <span class="string">&quot;score: &quot;</span>+score);</span><br></pre></td></tr></table></figure><h2 id="九、进制"><a href="#九、进制" class="headerlink" title="九、进制"></a>九、进制</h2><h3 id="1-二进制"><a href="#1-二进制" class="headerlink" title="1. 二进制"></a>1. 二进制</h3><ul><li>0,1 满2进1，以0b或0B开头</li></ul><h3 id="2-十进制"><a href="#2-十进制" class="headerlink" title="2. 十进制"></a>2. 十进制</h3><ul><li>0~9，满10进1</li></ul><h3 id="3-八进制"><a href="#3-八进制" class="headerlink" title="3. 八进制"></a>3. 八进制</h3><ul><li>0~7,，满8进1，以数字0开头表示</li></ul><h3 id="4-十六进制"><a href="#4-十六进制" class="headerlink" title="4. 十六进制"></a>4. 十六进制</h3><ul><li>0~9及A（10）~F（15），满16进1，以0x或0X开头表示</li></ul><img src="/undefined/fea/fea/%E8%BF%9B%E5%88%B6%EF%BC%881%EF%BC%89.png" class title="进制（1）"><img src="/undefined/fea/fea/%E8%BF%9B%E5%88%B6%EF%BC%882%EF%BC%89.png" class title="进制（2）"><h2 id="十、位运算"><a href="#十、位运算" class="headerlink" title="十、位运算"></a>十、位运算</h2><h3 id="1-按位与-amp"><a href="#1-按位与-amp" class="headerlink" title="1. 按位与&amp;"></a>1. 按位与&amp;</h3><ul><li>两位全为1，结果为1，否则为0</li></ul><h3 id="2-按位或"><a href="#2-按位或" class="headerlink" title="2. 按位或|"></a>2. 按位或|</h3><ul><li>两个有一个为1，结果为1，否则为0</li></ul><h3 id="3-按位异或"><a href="#3-按位异或" class="headerlink" title="3. 按位异或^"></a>3. 按位异或^</h3><ul><li>两位一个为0一个为1，结果为1，否则为0</li></ul><h3 id="4-按位取反"><a href="#4-按位取反" class="headerlink" title="4. 按位取反~"></a>4. 按位取反~</h3><ul><li>0 —&gt; 1,1 — &gt; 0</li></ul><h3 id="5-算术右移-gt-gt"><a href="#5-算术右移-gt-gt" class="headerlink" title="5. 算术右移&gt;&gt;"></a>5. 算术右移&gt;&gt;</h3><ul><li>低位溢出，符号位不变，并用符号位补溢出的高位</li><li>相当于除2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>&gt;&gt;<span class="number">2</span>;<span class="comment">//1 =&gt; 00000001 =&gt; 00000000 本质 1 / 2 / 2 = 0</span></span><br></pre></td></tr></table></figure><h3 id="6-算术左移-lt-lt"><a href="#6-算术左移-lt-lt" class="headerlink" title="6. 算术左移&lt;&lt;"></a>6. 算术左移&lt;&lt;</h3><ul><li>符号位不变，低位补0</li><li>相当于乘2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>&lt;&lt;<span class="number">2</span>;<span class="comment">//1 =&gt; 00000001 =&gt; 00000100 本质 1 * 2 * 2 = 4</span></span><br></pre></td></tr></table></figure><h3 id="7-逻辑右移-gt-gt-gt"><a href="#7-逻辑右移-gt-gt-gt" class="headerlink" title="7. 逻辑右移&gt;&gt;&gt;"></a>7. 逻辑右移&gt;&gt;&gt;</h3><ul><li>也叫无符号右移</li><li>低位溢出，高位补0</li></ul><h2 id="十一、补码、原码、反码"><a href="#十一、补码、原码、反码" class="headerlink" title="十一、补码、原码、反码"></a>十一、补码、原码、反码</h2><ul><li>二进制的最高位是符号位：0表示正数，1表示负数</li><li>正数的原码，反码，补码都一样(三码合一)</li><li>负数的反码 = 它的原码符号位不变，其它位取反(0-&gt;1,1-&gt;0)</li><li>负数的补码 = 它的反码 + 1，负数的反码 = 负数的补码 - 1</li><li>0的反码，补码都是0</li><li>java没有无符号数,换言之, java中的数都是有符号的</li><li>在计算机运算的时候，都是以补码的方式来运算的</li><li>当我们看运算结果的时候，要看他的原码</li></ul>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（五） - 控制结构</title>
      <link href="/undefined/14fc.html"/>
      <url>/undefined/14fc.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、顺序控制"><a href="#一、顺序控制" class="headerlink" title="一、顺序控制"></a>一、顺序控制</h2><ul><li>程序从上到下逐行的执行，中间没有任何判断和跳转</li></ul><img src="/undefined/14fc/14fc/%E9%A1%BA%E5%BA%8F%E6%8E%A7%E5%88%B6.png" class title="顺序控制"><h3 id="1-分支控制"><a href="#1-分支控制" class="headerlink" title="1. 分支控制"></a>1. 分支控制</h3><ul><li>让程序有选择的执行</li></ul><h4 id="1-1-单分支"><a href="#1-1-单分支" class="headerlink" title="1.1 单分支"></a>1.1 单分支</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    <span class="comment">//执行代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当条件表达式为true，执行代码块中的内容，为false不执行</li><li>当{}代码块中只有一条语句，{}可以省略</li></ul><h4 id="1-2-双分支"><a href="#1-2-双分支" class="headerlink" title="1.2 双分支"></a>1.2 双分支</h4><h4 id="1-3-多分支"><a href="#1-3-多分支" class="headerlink" title="1.3 多分支"></a>1.3 多分支</h4><img src="/undefined/14fc/14fc/%E5%A4%9A%E5%88%86%E6%94%AF.png" class title="多分支"><ul><li>可以没有else语句</li></ul><h4 id="1-4-嵌套分支"><a href="#1-4-嵌套分支" class="headerlink" title="1.4 嵌套分支"></a>1.4 嵌套分支</h4><ul><li>一个分支中完整的嵌套了另外一个完整的分支结构，里面的为内层分支，外面的为外层分支</li><li><strong>嵌套分支最好不要超过3层</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>()&#123;       </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Switch"><a href="#2-Switch" class="headerlink" title="2. Switch"></a>2. Switch</h3><h4 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2.1 语法"></a>2.1 语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">        <span class="comment">//语句块;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">        <span class="comment">//语句块;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">default</span>:   </span><br><span class="line">        <span class="comment">//语句块;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch关键字，表示switch分支</li><li>表达式对应一个值</li><li>case常量1：当表达式的值等于常量1，就执行语句块1</li><li>break ：表示退出switch语句</li><li>如果和case常量1匹配，就执行语句块1，如果没有匹配，就继续匹配case常量2</li><li>如果一个都没有匹配上，执行default</li></ul><h4 id="2-2-注意事项"><a href="#2-2-注意事项" class="headerlink" title="2.2 注意事项"></a>2.2 注意事项</h4><ul><li>表达式数据类型，应和case后的常量类型一致,或者是可以自动转成可以相互比较的类型</li><li><strong>switch(表达式)中表达式的返回值必须是：(byte,short,int,char,enum,String)</strong></li><li>case子句中的值必须是常量，而不能是变量</li><li>default子句是可选的，当没有匹配的case时，执行default</li><li><strong>break语句用来在执行完一个case分支后使程序跳出switch语句块；如果没有写</strong><br><strong>break，程序会顺序执行到switch结尾（即穿透现象）</strong></li></ul><h4 id="2-3-switch和if的比较"><a href="#2-3-switch和if的比较" class="headerlink" title="2.3 switch和if的比较"></a>2.3 switch和if的比较</h4><ul><li>如果判断的具体数值不多，而且符合byte、 short、int、char、enum[枚举]、String这6种类型建议使用swtich语句</li><li>其他情况：对区间判断，对结果为boolean类型判断，使用if，if作使用范围更广</li></ul><h2 id="二、循环控制"><a href="#二、循环控制" class="headerlink" title="二、循环控制"></a>二、循环控制</h2><h3 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1. for循环"></a>1. for循环</h3><h4 id="1-1-语法"><a href="#1-1-语法" class="headerlink" title="1.1 语法"></a>1.1 语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(循环变量初始化;循环条件;循环变量迭代)&#123;</span><br><span class="line">    <span class="comment">//循环操作(语句);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i= &quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-注意事项"><a href="#1-2-注意事项" class="headerlink" title="1.2 注意事项"></a>1.2 注意事项</h4><ul><li>循环条件是返回一个布尔值的表达式</li><li>for(循环判断条件;）中的初始化和变量迭代可以写到其它地方，但是两边的分号不能省略</li><li>循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开,循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开</li></ul><h3 id="2-while循环"><a href="#2-while循环" class="headerlink" title="2. while循环"></a>2. while循环</h3><h4 id="2-1-语法-1"><a href="#2-1-语法-1" class="headerlink" title="2.1 语法"></a>2.1 语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">循环变量初始化;</span><br><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">    循环体(语句);</span><br><span class="line">    循环变量迭代;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(i &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i= &quot;</span> + i);</span><br><span class="line">    i--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-注意事项-1"><a href="#2-2-注意事项-1" class="headerlink" title="2.2 注意事项"></a>2.2 注意事项</h4><ul><li>循环条件是返回一个布尔值的表达式</li><li>while循环是先判断再执行语句</li></ul><h3 id="3-do-while循环"><a href="#3-do-while循环" class="headerlink" title="3. do while循环"></a>3. do while循环</h3><h4 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">循环变量初始化;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体(语句);</span><br><span class="line">    循环变量迭代;    </span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i= &quot;</span> + i);</span><br><span class="line">    i--;</span><br><span class="line">&#125;<span class="keyword">while</span>(i &gt;= <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="3-2-注意事项"><a href="#3-2-注意事项" class="headerlink" title="3.2 注意事项"></a>3.2 注意事项</h4><ul><li>循环条件是返回一个布尔值的表达式</li><li>do..while循环是先执行，再判断，因此它至少执行一次</li></ul><h3 id="4-多重循环控制"><a href="#4-多重循环控制" class="headerlink" title="4. 多重循环控制"></a>4. 多重循环控制</h3><ul><li>将一个循环放在另一个循环体内，就形成了嵌套循环</li><li>实质上，嵌套循环就是把内层循环当成外层循环的循环体，当只有内层循环的循环条件为<br>false时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的循环</li><li>设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m**n次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt;= <span class="number">2</span>; j++)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i= &quot;</span> + i + <span class="string">&quot;j= &quot;</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、跳转控制语句"><a href="#三、跳转控制语句" class="headerlink" title="三、跳转控制语句"></a>三、跳转控制语句</h2><h3 id="1-break"><a href="#1-break" class="headerlink" title="1. break"></a>1. break</h3><ul><li>break语句出现在多重嵌套语句块中，可通过标签指明要终止的是那一层语句块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">lable1:&#123;</span><br><span class="line">    lable2:&#123;</span><br><span class="line">        lable3:&#123;</span><br><span class="line">            <span class="keyword">break</span> lable2;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line">lable1:</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;<span class="number">4</span>; j++)&#123;</span><br><span class="line">lable2:</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">break</span> lable1;</span><br><span class="line">&#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;i= &quot;</span> +i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>break语句可以指定退出哪层</li><li>label1是标签，由程序员指定</li><li>break后指定到哪个label就退出到哪里</li><li>在实际的开发中，尽量不要使用标签</li><li>如果没有指定break，默认退出最近的循环体</li></ul><h3 id="2-continue"><a href="#2-continue" class="headerlink" title="2. continue"></a>2. continue</h3><ul><li>continue语句用于结束本次循环，继续执行下一次循环</li><li>continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line">lable1:</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;<span class="number">4</span>; j++)&#123;</span><br><span class="line">lable2:</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span> lable1;</span><br><span class="line">&#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;i= &quot;</span> +i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-return"><a href="#3-return" class="headerlink" title="3. return"></a>3. return</h3><ul><li>用在方法，表示退出方法</li><li>如果用在main方法，表示退出程序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（六） - 数组</title>
      <link href="/undefined/7ffe.html"/>
      <url>/undefined/7ffe.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、数组的使用"><a href="#一、数组的使用" class="headerlink" title="一、数组的使用"></a>一、数组的使用</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line">数据类型 数组名[] = <span class="keyword">new</span> 数据类型[大小];</span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[大小];</span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="type">int</span> nums[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h3 id="2-初始化数组"><a href="#2-初始化数组" class="headerlink" title="2. 初始化数组"></a>2. 初始化数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[] = &#123;元素值, 元素值...&#125;;<span class="comment">//元素值要为同一数据类型</span></span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="type">int</span> nums[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h3><ul><li><p>数组是多个相同类型数据的组合，实现对这些数据的统一管理</p></li><li><p>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用，数组创建后，如果没有赋值,有默认值（int0, short 0, byte 0, long 0, float 0.0,double 0.0,char \u0000,boolean false, String null）</p></li><li><p>使用数组的步骤：</p><ul><li><p>声明数组并开辟空间</p></li><li><p>给数组各个元素赋值</p></li><li><p>使用数组</p></li></ul></li><li><p>数组的下标是从0开始的</p></li><li><p>数组下标必须在指定范围内使用，否则报：下标越界异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> [arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];<span class="comment">//则有效下标为0-4</span></span><br></pre></td></tr></table></figure></li><li><p>数组属引用类型，数组型数据是对象(object)</p></li></ul><h2 id="二、数组的赋值机制"><a href="#二、数组的赋值机制" class="headerlink" title="二、数组的赋值机制"></a>二、数组的赋值机制</h2><ul><li>基本数据类型赋值，这个值就是具体的数据</li><li>数组在默认情况下是引用传递，赋的值是地址</li></ul><h3 id="1-值传递"><a href="#1-值传递" class="headerlink" title="1. 值传递"></a>1. 值传递</h3><img src="/undefined/7ffe/7ffe/%E5%80%BC%E4%BC%A0%E9%80%92.png" class title="值传递"><h3 id="2-值拷贝"><a href="#2-值拷贝" class="headerlink" title="2. 值拷贝"></a>2. 值拷贝</h3><img src="/undefined/7ffe/7ffe/%E5%80%BC%E6%8B%B7%E8%B4%9D.png" class title="值拷贝"><h2 id="三、排序"><a href="#三、排序" class="headerlink" title="三、排序"></a>三、排序</h2><ul><li>将一群数据，以指定的顺序进行排列的过程</li></ul><h3 id="1-内部排序法"><a href="#1-内部排序法" class="headerlink" title="1. 内部排序法"></a>1. 内部排序法</h3><ul><li>指将需要处理的所有数据都加载到内部存储器中进行排序（交换式排序法、选择式排序法和插入式排序法）</li></ul><h3 id="2-外部排序法"><a href="#2-外部排序法" class="headerlink" title="2. 外部排序法"></a>2. 外部排序法</h3><ul><li>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序（合并排序法和直接合并排序法）</li></ul><h3 id="3-冒泡排序（Bubble-Sorting）"><a href="#3-冒泡排序（Bubble-Sorting）" class="headerlink" title="3. 冒泡排序（Bubble Sorting）"></a>3. 冒泡排序（Bubble Sorting）</h3><ul><li>通过对待排序序列从后向前（从下标较大的元素开始)，依次比较相邻元素的值，若发现逆序则交换，使值较<br>大的元素逐渐从前移向后部</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将5个无序的数：24,69,80,57,13；使用冒泡排序法将其排成从小到大的有序数列</span></span><br><span class="line"><span class="type">int</span> <span class="variable">tem</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//定义一个中间值</span></span><br><span class="line"><span class="comment">//定义一个静态数组</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">24</span>,<span class="number">69</span>,<span class="number">80</span>,<span class="number">57</span>,<span class="number">13</span>,<span class="number">54</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="comment">//进行外层循环 次数为arr.length - 1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length - <span class="number">1</span>;i++) &#123;</span><br><span class="line"><span class="comment">//进行判断大小循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr.length - i;j++) &#123;</span><br><span class="line"><span class="comment">//比大小 并进行交换位置</span></span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">tem = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tem;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">System.out.println(<span class="string">&quot;======arr中的元素=======&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr.length;j++) &#123;</span><br><span class="line">System.out.println(arr[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、查找"><a href="#四、查找" class="headerlink" title="四、查找"></a>四、查找</h2><h3 id="1-顺序查找"><a href="#1-顺序查找" class="headerlink" title="1. 顺序查找"></a>1. 顺序查找</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SequenceSearch</span> &#123;</span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有一个数列：白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王猜数游戏：</span></span><br><span class="line"><span class="comment">从键盘输入任意一个名称，判断数列中是否包含此名称[顺序查找]</span></span><br><span class="line"><span class="comment">要求：如果查找到，就提示找到，并给出下标</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路分析：</span></span><br><span class="line"><span class="comment">1、定义一个字符串数组</span></span><br><span class="line"><span class="comment">2、接收用户输入、遍历数组，逐一比较，如果有则提示信息，并退出。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//定义一个字符串数组</span></span><br><span class="line">String[] names = &#123;<span class="string">&quot;白眉鹰王&quot;</span>,<span class="string">&quot;金毛狮王&quot;</span>,<span class="string">&quot;紫衫龙王&quot;</span>,<span class="string">&quot;青翼蝠王&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span> (System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个名字：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">findName</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组，逐一比较，如果有则提示信息，并退出</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; names.length;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串比较 equals</span></span><br><span class="line"><span class="keyword">if</span>(findName.equals(names[i])) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;恭喜你猜对了！&quot;</span> + <span class="string">&quot;是第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//退出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line"><span class="keyword">if</span>(index == -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;很遗憾查找失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;猜数游戏程序退出！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h3><h2 id="五、多维数组-二维数组"><a href="#五、多维数组-二维数组" class="headerlink" title="五、多维数组 - 二维数组"></a>五、多维数组 - 二维数组</h2><h3 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1. 定义"></a>1. 定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型[][] 数组名 = <span class="keyword">new</span> 数据类型[大小][大小];</span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="type">int</span>[][] nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][<span class="number">8</span>];</span><br></pre></td></tr></table></figure><img src="/undefined/7ffe/7ffe/%E6%95%B0%E7%BB%84%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%9C%A8%E5%BD%A2%E5%BC%8F.png" class title="数组在内存中的存在形式"><h3 id="2-动态初始化"><a href="#2-动态初始化" class="headerlink" title="2. 动态初始化"></a>2. 动态初始化</h3><ul><li>先声明：数据类型 数组名 [] []</li><li>在定义：数组名 = new 数据类型[大小] [大小]</li><li>赋值，存在默认值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] nums;</span><br><span class="line">nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][<span class="number">8</span>];</span><br></pre></td></tr></table></figure><h3 id="3-静态初始化"><a href="#3-静态初始化" class="headerlink" title="3. 静态初始化"></a>3. 静态初始化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据类型 数组名[][] = &#123;&#123;值1, 值2...&#125;,&#123;值1, 值2...&#125;&#125;</span><br><span class="line">//案例</span><br><span class="line">int arr[][] = &#123;&#123;4,6&#125;,&#123;1,4,9,5&#125;,&#123;-2&#125;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YangHui</span> &#123;</span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用二维数组打印一个10 行杨辉三角</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 2 1</span></span><br><span class="line"><span class="comment">1 3 3 1</span></span><br><span class="line"><span class="comment">1 4 6 4 1</span></span><br><span class="line"><span class="comment">1 5 10 10 5 1</span></span><br><span class="line"><span class="comment">.....</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">思路分析：</span></span><br><span class="line"><span class="comment">1.创建一个二位数组 包含10和一维数组  int arr[][] = new int[10][]  </span></span><br><span class="line"><span class="comment">2.后一个以为数组里里面的元素比上一个数组多一 </span></span><br><span class="line"><span class="comment">3.数组第一和最后一个元素均为1，arr[i][0]  arr[i][j.length]</span></span><br><span class="line"><span class="comment">中间元素等于上一个数组对应元素下标和前一个元素的和 arr[i][j] = arr[i -1][j-1] + arr[i - 1][j] </span></span><br><span class="line"><span class="comment">4.打印</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span> (System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入杨辉三角的的行数：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个二位数组</span></span><br><span class="line"><span class="type">int</span> arr[][] = <span class="keyword">new</span> <span class="title class_">int</span>[h][];</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历二位数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一维数组 如果没有给一维数组new  那么arr[i] 就是null</span></span><br><span class="line">arr[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历一维数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr[i].length;j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当一维数组的第一个或者最后以一个时赋值为1，否则中间元素等于上一个数组对应元素下标和前一个元素的和</span></span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">0</span> || j == arr[i].length - <span class="number">1</span>) &#123;</span><br><span class="line">arr[i][j] = <span class="number">1</span>;<span class="comment">//赋值</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">arr[i][j] = arr[i -<span class="number">1</span>][j-<span class="number">1</span>] + arr[i - <span class="number">1</span>][j];<span class="comment">//赋值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">System.out.println(<span class="string">&quot;======arr中的元素=======&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt;= i;j++) &#123;</span><br><span class="line">System.out.print(arr[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();<span class="comment">//换行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h3><ul><li>二维数组实际上是由多个一维数组组成的，它的各个一维数组的长度可以相同，也可以不相同</li></ul>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（七） - 面向对象基础</title>
      <link href="/undefined/84c4.html"/>
      <url>/undefined/84c4.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、类与对象"><a href="#一、类与对象" class="headerlink" title="一、类与对象"></a>一、类与对象</h2><ul><li>类是抽象的,概念的,代表一类事物，比如人类，猫类.…，即它是数据类型</li><li>对象是具体的，实际的，代表一个具体事物，即是实例</li><li>类是对象的模板，对象是类的一个个体，对应一个实例</li></ul><h3 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1. 创建对象"></a>1. 创建对象</h3><ul><li><p>先声明再创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cat cat;<span class="comment">//声明对象</span></span><br><span class="line">cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//创建</span></span><br></pre></td></tr></table></figure></li><li><p>直接创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-类和对象的内存分配机制"><a href="#2-类和对象的内存分配机制" class="headerlink" title="2. 类和对象的内存分配机制"></a>2. 类和对象的内存分配机制</h3><img src="/undefined/84c4/84c4/%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E7%9A%84%E5%BD%A2%E5%BC%8F.png" class title="对象在内存的形式"><h4 id="2-1-java内存的结构分析"><a href="#2-1-java内存的结构分析" class="headerlink" title="2.1 java内存的结构分析"></a>2.1 java内存的结构分析</h4><ul><li>栈：一般存放基本数据类型(局部变量)</li><li>堆：存放对象(Cat cat，数组等)</li><li>方法区：常量池(常量,比如字符串)，类加载信息</li></ul><h4 id="2-2-java创建对象的流程"><a href="#2-2-java创建对象的流程" class="headerlink" title="2.2 java创建对象的流程"></a>2.2 java创建对象的流程</h4><ul><li><p>先加载Person类信息(属性和方法信息，只会加载一次）</p></li><li><p>在堆中分配空间，进行默认初始化(看规则)</p></li><li><p>把地址赋给p，p就指向对象</p></li><li><p>进行指定初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p.name =<span class="string">&quot; jack&quot;</span>;</span><br><span class="line">p.age = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-属性-成员变量"><a href="#3-属性-成员变量" class="headerlink" title="3. 属性/成员变量"></a>3. 属性/成员变量</h3><h4 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h4><ul><li><p>成员变量也可以称为属性或者字段（filed）</p></li><li><p>属性是类的一个组成部分，一般是基本数据类型，也可能为引用类型（对象，数组）</p></li></ul><h4 id="3-2-注意事项"><a href="#3-2-注意事项" class="headerlink" title="3.2 注意事项"></a>3.2 注意事项</h4><ul><li><p>属性的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 属性类型 属性名;</span><br></pre></td></tr></table></figure></li><li><p>属性如果不赋值，有默认值</p></li></ul><h3 id="4-成员方法"><a href="#4-成员方法" class="headerlink" title="4. 成员方法"></a>4. 成员方法</h3><h4 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1. 定义"></a>4.1. 定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> 返回数据类型 方法名(参数列表)&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    <span class="comment">//逻辑代码</span></span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class Person &#123;</span><br><span class="line">String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;hello...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数列表：表示成员方法输入</li><li>数据类型（返回类型）：表示成员方法输出，void表示没有返回值</li><li>方法主体：表示为了实现某一功能代码</li><li>return不是必须的</li></ul><img src="/undefined/84c4/84c4/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6.png" class title="方法调用机制"><h4 id="4-2-注意事项"><a href="#4-2-注意事项" class="headerlink" title="4.2 注意事项"></a>4.2 注意事项</h4><h5 id="4-2-1-访问修饰符"><a href="#4-2-1-访问修饰符" class="headerlink" title="4.2.1 访问修饰符"></a>4.2.1 访问修饰符</h5><ul><li>不写为默认，共四种public 、protected、默认、private</li></ul><h5 id="4-2-2-返回数据类型"><a href="#4-2-2-返回数据类型" class="headerlink" title="4.2.2 返回数据类型"></a>4.2.2 返回数据类型</h5><ul><li>一个方法最多有一个返回值，返回多个结果采用数组</li><li>返回类型可以为任意类型，包含基本类型或引用数据类型（数组、对象）</li><li>如果方法要求有返回数据类型，则方法体中最后的执行语句必须为return值；而且要求返回值类型必须和return的值类型一致或兼容</li><li>如果方法是void，则方法体中可以，没有return语句，或者只写return </li></ul><h5 id="4-2-3-方法名"><a href="#4-2-3-方法名" class="headerlink" title="4.2.3 方法名"></a>4.2.3 方法名</h5><ul><li>遵循驼峰命名法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line"><span class="comment">//1，一个方法最多有一个返回值，如何返回多个结果：返回数组</span></span><br><span class="line">    <span class="comment">//2．返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getSumAndSub(<span class="type">int</span> n1, <span class="type">int</span> n2) &#123;</span><br><span class="line"><span class="type">int</span>[] resArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];<span class="comment">//创建一个数组</span></span><br><span class="line">        resArr[O] = n1 + n2;</span><br><span class="line">resArr[<span class="number">1</span>] = n1 - n2;</span><br><span class="line">        <span class="keyword">return</span> resArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3．如果方法要求有返回数据类型，则方法体中最后的执行语句必须为return值;</span></span><br><span class="line">    <span class="comment">//而且要求返回值类型必须和return的值类型一致或兼容</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">1.1</span> *<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-4-形参列表"><a href="#4-2-4-形参列表" class="headerlink" title="4.2.4 形参列表"></a>4.2.4 形参列表</h5><ul><li>一个方法可以有0个参数，也可以有多个参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>参数类型可以为任意类型，包含基本类型或引用类型</li><li>调用带参数的方法时，一定对应着参数列表传入相同类型或兼容类型的参数</li><li>方法定义时的参数称为形式参数，简称形参；方法调用时的参数称为实际参数简称实参，实参和形参的类型要一致或兼容、个数、顺序必须一致</li></ul><h5 id="4-2-5-方法体"><a href="#4-2-5-方法体" class="headerlink" title="4.2.5 方法体"></a>4.2.5 方法体</h5><ul><li>里面写完成功能的具体的语句，可以为输入、输出、变量、运算、分支、循环方法调用</li><li><strong>方法不能嵌套定义</strong></li></ul><h3 id="5-方法调用注意事项"><a href="#5-方法调用注意事项" class="headerlink" title="5. 方法调用注意事项"></a>5. 方法调用注意事项</h3><ul><li>同一个类中的方法调用：直接调用即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class Test &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        hi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跨类中的方法A类调用B类方法：需要通过对象名调用，且跨类的方法调用和方法的访问修饰符相关</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class Test &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">Class Test1 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test.hi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-方法的传参机制"><a href="#6-方法的传参机制" class="headerlink" title="6. 方法的传参机制"></a>6. 方法的传参机制</h3><ul><li>引用类型传递的是地址，可以通过形参影响实参</li></ul><h2 id="二、递归"><a href="#二、递归" class="headerlink" title="二、递归"></a>二、递归</h2><ul><li>方法自己调用自己，每次调用传入不同的变量</li></ul><img src="/undefined/84c4/84c4/%E9%80%92%E5%BD%92.png" class title="递归"><img src="/undefined/84c4/84c4/%E9%80%92%E5%BD%92%E6%A1%88%E4%BE%8B.png" class title="递归案例"><h3 id="1-使用规则"><a href="#1-使用规则" class="headerlink" title="1. 使用规则"></a>1. 使用规则</h3><ul><li>执行一个方法时，就创建一个新的受保护的独立空间(栈空间)</li><li><strong>方法的局部变量是独立的，不会相互影响</strong></li><li>如果方法中使用的是<strong>引用类型变量(比如数组)</strong>，就会<strong>共享该引用类型的数据</strong></li><li>递归必须向退出递归的条件逼近，否则就是无限递归，出现StackOverflowError</li><li>当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕</li></ul><h3 id="2-案例"><a href="#2-案例" class="headerlink" title="2. 案例"></a>2. 案例</h3><img src="/undefined/84c4/84c4/%E9%80%92%E5%BD%92%E8%BF%B7%E5%AE%AB%E6%A1%88%E4%BE%8B.png" class title="递归迷宫案例"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiGong</span> &#123;</span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//迷宫地图</span></span><br><span class="line"><span class="comment">//新建一个二维数组 行8 列7</span></span><br><span class="line"><span class="type">int</span>[][] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一行最后一行为1 表示障碍物</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">map[<span class="number">7</span>][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一列和最后一列为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//障碍物坐标</span></span><br><span class="line">map[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个游戏对象</span></span><br><span class="line"><span class="type">Game</span> <span class="variable">game</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line">game.findWay(map, <span class="number">1</span>, <span class="number">1</span>);<span class="comment">//调用方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印地图</span></span><br><span class="line">System.out.println(<span class="string">&quot;======迷宫地图======&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line"><span class="comment">//1.返回值类型为boolean类型</span></span><br><span class="line"><span class="comment">//2.如果找到就返回true 没有就返回false</span></span><br><span class="line"><span class="comment">//3.map就是二维数组，即表示迷宫地图</span></span><br><span class="line"><span class="comment">//4.i j 为老鼠的位置 初始化位置(1,1)</span></span><br><span class="line"><span class="comment">//5.因为我们是递归的找路，定义map数组的各个值得含义</span></span><br><span class="line"><span class="comment">//0 表示可以走 1 表示障碍物 2 表示可以走 3 表示走过 但走不通是死路</span></span><br><span class="line"><span class="comment">//6.当map[6][5] = 2时 就说明找到通路，就可以结束，否则就继续找</span></span><br><span class="line"><span class="comment">//7.确定老鼠找路策略 右--&gt; 下--&gt; 左--&gt; 上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findWay</span><span class="params">(<span class="type">int</span>[][] map, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123;<span class="comment">//说明找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(map[i][j] == <span class="number">0</span>) &#123;<span class="comment">//当前位置0，表示可以走通</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//假定可以走通</span></span><br><span class="line">map[i][j] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用策略判断是否可以走通</span></span><br><span class="line"><span class="comment">//右--&gt; 下--&gt; 左--&gt; 上</span></span><br><span class="line"><span class="keyword">if</span>(findWay(map, i, j + <span class="number">1</span>)) &#123;<span class="comment">//往右走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(findWay(map, i + <span class="number">1</span>, j)) &#123;<span class="comment">//往下走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(findWay(map, i, j - <span class="number">1</span>)) &#123;<span class="comment">//往左走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(findWay(map, i - <span class="number">1</span>, j)) &#123;<span class="comment">//往上走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">map[i][j] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//map[i][j] = 1,2,3</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、方法重载（OverLoad）"><a href="#三、方法重载（OverLoad）" class="headerlink" title="三、方法重载（OverLoad）"></a>三、方法重载（OverLoad）</h2><ul><li>同一个类中方法名相同但参数列表不同（参数类型或者个数或顺序之一不同），对于参数名，返回类型无要求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverLoadExercise01</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">编写程序,类Methods中定义三个重载方法并调用。方法名为m。</span></span><br><span class="line"><span class="comment">三个方法分别接收一个int参数、两个int参数、一个字符串参数。分别执行平方运算并输出结果，</span></span><br><span class="line"><span class="comment">相乘并输出结果,输出字符串信息。在主类的main ()方法中分别用参数区别调用三个方法。OverLoadExercise.java</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Methods</span> <span class="variable">methods</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Methods</span>();<span class="comment">//创建一个对象</span></span><br><span class="line">methods.m(<span class="number">8</span>);</span><br><span class="line">methods.m(<span class="number">8</span>, <span class="number">4</span>);</span><br><span class="line">methods.m(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(methods.max(<span class="number">4</span>, <span class="number">7</span>));</span><br><span class="line">System.out.println(methods.max(<span class="number">4.0</span>, <span class="number">7.7</span>));</span><br><span class="line">System.out.println(methods.max(<span class="number">4.0</span>, <span class="number">7.7</span>, <span class="number">5.7</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Methods</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法的返回值类型 void </span></span><br><span class="line"><span class="comment">//方法的名字 m</span></span><br><span class="line"><span class="comment">//方法的形参(int n)</span></span><br><span class="line"><span class="comment">//方法体 执行平方运算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">System.out.println(n + <span class="string">&quot;的平方=&quot;</span> + n * n);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法的返回值类型 void </span></span><br><span class="line"><span class="comment">//方法的名字 m</span></span><br><span class="line"><span class="comment">//方法的形参(int n1, int n2)</span></span><br><span class="line"><span class="comment">//方法体 进行进行相乘 并输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;相乘=&quot;</span> + n1 * n2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法的返回值类型 void </span></span><br><span class="line"><span class="comment">//方法的名字 m</span></span><br><span class="line"><span class="comment">//方法的形参(int n1, int n2)</span></span><br><span class="line"><span class="comment">//方法体 进行进行相乘 并输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String n)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;字符串信息=&quot;</span> + n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法的返回值类型 int </span></span><br><span class="line"><span class="comment">//方法的名字 max</span></span><br><span class="line"><span class="comment">//方法的形参(int n1, int n2)</span></span><br><span class="line"><span class="comment">//方法体 返回两个int中的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> n1, <span class="type">int</span> n2)</span> &#123;</span><br><span class="line"><span class="comment">//return n1 &gt; n2 ? n1 : n2;</span></span><br><span class="line"><span class="keyword">if</span>(n1 &gt; n2) &#123;</span><br><span class="line"><span class="keyword">return</span> n1;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法的返回值类型 double </span></span><br><span class="line"><span class="comment">//方法的名字 max</span></span><br><span class="line"><span class="comment">//方法的形参(double n1, double n2)</span></span><br><span class="line"><span class="comment">//方法体 返回两个double中的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> n1, <span class="type">double</span> n2)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return n1 &gt; n2 ? n1 : n2;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n1 &gt; n2) &#123;</span><br><span class="line"><span class="keyword">return</span> n1;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法的返回值类型 double </span></span><br><span class="line"><span class="comment">//方法的名字 max</span></span><br><span class="line"><span class="comment">//方法的形参(double n1, double n2, double n3)</span></span><br><span class="line"><span class="comment">//方法体 返回两3个double中的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> n1, <span class="type">double</span> n2, <span class="type">double</span> n3)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//double max = n1 &gt; n2 ? n1 : n2;</span></span><br><span class="line"><span class="comment">//return max &gt; n3 ? max : n3; </span></span><br><span class="line"><span class="keyword">if</span>(n1 &gt; n2) &#123;</span><br><span class="line"><span class="keyword">if</span>(n1 &gt; n3) &#123;</span><br><span class="line"><span class="keyword">return</span> n1;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(n2 &gt; n3) &#123;</span><br><span class="line"><span class="keyword">return</span> n2;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n3;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-可变参数"><a href="#1-可变参数" class="headerlink" title="1. 可变参数"></a>1. 可变参数</h3><ul><li>一个类中多个同名同功能但参数个数不同的方法，封装成一个方法</li></ul><h4 id="1-1-语法"><a href="#1-1-语法" class="headerlink" title="1.1 语法"></a>1.1 语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 返回类型 方法名(数据类型... 形参名)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="comment">//使用可变参数，可以当做数组来使用，即nums可以当做数组</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span> &#123;</span><br><span class="line"><span class="comment">//System.out.println(&quot;接收的参数个数=” + nums.length);</span></span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历nums求和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">res += nums[i];</span><br><span class="line">    &#125;<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-注意事项"><a href="#1-2-注意事项" class="headerlink" title="1.2 注意事项"></a>1.2 注意事项</h4><ul><li><p>可变参数的实参可以为0个或任意多个</p></li><li><p>可变参数的实参可以为数组</p></li><li><p>可变参数的本质就是数组</p></li><li><p>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String s, <span class="type">int</span>... nums)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个形参列表中只能出现一个可变参数</p></li></ul><h4 id="1-3-案例"><a href="#1-3-案例" class="headerlink" title="1.3 案例"></a>1.3 案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarParameterExercise</span> &#123;</span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有三个方法，分别实现返回姓名和两门课成绩(总分)，返回姓名和三门课程成绩(总分)，</span></span><br><span class="line"><span class="comment">//返回姓名和五门成绩(总分)。封装成一个可变参数的方法</span></span><br><span class="line"></span><br><span class="line"><span class="type">HspMethod</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HspMethod</span>();</span><br><span class="line"><span class="comment">//int score = &#123;67,78,90&#125;;</span></span><br><span class="line">System.out.println(student.showScore(<span class="string">&quot;小明&quot;</span>, <span class="number">67</span>,<span class="number">78</span>,<span class="number">90</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HspMethod</span> &#123;</span><br><span class="line"><span class="comment">//返回值类型 void</span></span><br><span class="line"><span class="comment">//方法名 showScore </span></span><br><span class="line"><span class="comment">//方法的形参(String , double... score)</span></span><br><span class="line"><span class="comment">//方法体  返回成绩总分  和姓名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">showScore</span><span class="params">(String name, <span class="type">double</span>... scores)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">totalScores</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">totalScores+= scores[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> name + scores.length + <span class="string">&quot;门课的成绩总分=&quot;</span> + totalScores;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、作用域"><a href="#四、作用域" class="headerlink" title="四、作用域"></a>四、作用域</h2><h3 id="1-全局变量"><a href="#1-全局变量" class="headerlink" title="1 全局变量"></a>1 全局变量</h3><ul><li>即属性，作用域为整个类体</li><li>可以不赋值直接使用，存在默认值</li></ul><h3 id="2-局部变量"><a href="#2-局部变量" class="headerlink" title="2 局部变量"></a>2 局部变量</h3><ul><li><p>除属性外的其他变量，作用域为定义它的代码块中</p></li><li><p>局部变量必须赋值，没有默认值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//1. 局部变量一般是指在成员方法中定义的变量</span></span><br><span class="line">    <span class="comment">//2. n和name就是局部变量</span></span><br><span class="line"><span class="comment">//3. n和name的作用域在cry方法中</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">string</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;在cry中使用属性age=&quot;</span> + age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;在eat中使用属性age=&quot;</span>+ age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h3><ul><li>属性和局部变量可以重名，访问时遵循就近原则</li><li>在同一个作用域中，比如在同一个成员方法中，两个局部变量，不能重名</li><li>属性生命周期较长，伴随着对象的创建而创建，伴随着对象的死亡而死亡</li><li>局部变量,生命周期较短，伴随着它的代码块的执行而创建，伴随着代码块的结束而死亡，即在一次方法调用过程中</li><li>作用域范围不同：<ul><li>全局变量/属性:可以被本类便用，或其他类使用（通过对象调用)</li><li>局部变量:只能在本类中对应的方法中使用</li></ul></li><li>修饰符不同：<ul><li>全局变量/属性可以加修饰符</li><li>局部变量不可以加修饰符</li></ul></li></ul><h2 id="五、构造器（constructor）"><a href="#五、构造器（constructor）" class="headerlink" title="五、构造器（constructor）"></a>五、构造器（constructor）</h2><ul><li>构造方法又叫构造器，是类的一种特殊的方法，它的主要作用是完成对新对象的初始化</li></ul><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 方法名(形参列表)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line">Class Test&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//有参构造器</span></span><br><span class="line">    publci <span class="title function_">Test</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造器的修饰符可以默认</li><li>构造器没有返回值</li><li>方法名和类名字必须一样</li><li>参数列表和成员方法一样的规则</li><li>构造器的调用系统完成</li></ul><h3 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2. 注意事项"></a>2. 注意事项</h3><ul><li>一个类可以定义多个不同的构造器，即构造器重载</li><li>构造器名和类名要相同</li><li>构造器没有返回值</li><li>构造器是完成对象的初始化，并不是创建对象</li><li>在创建对象时，系统自动的调用该类的构造方法</li><li>如果没有定义构造器，系统会自动给类生成一个默认无参构造器(也叫默认构造器)</li><li>一旦定义了自己的构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下</li></ul><h3 id="3-Javap反编译"><a href="#3-Javap反编译" class="headerlink" title="3. Javap反编译"></a>3. Javap反编译</h3><ul><li>对class文件提供的字节代码进行反编译</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">javap -c -v 类名</span><br></pre></td></tr></table></figure><h2 id="六、对象创建流程"><a href="#六、对象创建流程" class="headerlink" title="六、对象创建流程"></a>六、对象创建流程</h2><img src="/undefined/84c4/84c4/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B.png" class title="对象创建流程"><ul><li>加载Person类信息(Person.class)，只会加载一次</li><li>在堆中分配空间(地址)</li><li>完成对象初始化<ul><li>默认初始化age=0 name=null </li><li>显式初始化age=90 name=null</li><li>构造器的初始化 age =20 name=小倩</li></ul></li><li>在对象在堆中的地址，返回给p(p是对象名，是对象的引用)</li></ul><h2 id="七、this关键字"><a href="#七、this关键字" class="headerlink" title="七、this关键字"></a>七、this关键字</h2><ul><li>表示当前对象</li></ul><img src="/undefined/84c4/84c4/this%E5%85%B3%E9%94%AE%E5%AD%97.png" class title="this关键字"><h3 id="1-注意事项"><a href="#1-注意事项" class="headerlink" title="1. 注意事项"></a>1. 注意事项</h3><ul><li>this关键字可以用来访问本类的属性、方法、构造器</li><li>this用于区分当前类的属性和局部变量</li><li>访问成员方法的语法：this.方法名(参数列表)</li><li>访问构造器语法：this(参数列表)，<strong>注意只能在构造器中使用(即只能在构造器中访问另外一个构造器,必须放在第一条语句)</strong></li></ul><ol><li>this不能在类定义的外部使用，只能在类定义的方法中使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line"><span class="comment">//细节:访问成员方法的语法:this.方法名(参数列表);</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println( <span class="string">&quot;f1()方法..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.print1n( <span class="string">&quot;f2()方法..&quot;</span>);</span><br><span class="line">        <span class="comment">//调用本类的 f1</span></span><br><span class="line"><span class="comment">//第一种方式</span></span><br><span class="line">        f1();</span><br><span class="line"><span class="comment">//第二种方式</span></span><br><span class="line">        <span class="built_in">this</span>.f1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">细节:访问构造器语法:this(参数列表);</span></span><br><span class="line"><span class="comment">        注意只能在构造器中使用(即只能在构造器中访问另外一个构造器）</span></span><br><span class="line"><span class="comment">        注意:访问构造器语法:this(参数列表);必须放置第一条语句</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">T</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//这里去访问T(String name,int age）构造器this( &quot;jack&quot;, 100);</span></span><br><span class="line">System.out.print1n(<span class="string">&quot;T()构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">T</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;T(String name，int age）构造器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//this关键字可以用来访问本类的属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//传统方式</span></span><br><span class="line">System.out.println( <span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot; num=&quot;</span> + num);</span><br><span class="line">    <span class="comment">//也可以使用this访问属性</span></span><br><span class="line">System.out.println( <span class="string">&quot;name=&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot; num=&quot;</span> + <span class="built_in">this</span>.num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（八）- 面向对象中级</title>
      <link href="/undefined/dba1.html"/>
      <url>/undefined/dba1.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、包"><a href="#一、包" class="headerlink" title="一、包"></a>一、包</h2><ul><li>包实际上就是创建不同的文件夹/目录来保存类文件</li></ul><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study;</span><br><span class="line"><span class="comment">//1. package 关键字，表示打包</span></span><br><span class="line"><span class="comment">//2. com.study表示包名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入包</span></span><br><span class="line"><span class="keyword">import</span> 包;</span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;<span class="comment">//将java.util包下的所有类都引入</span></span><br></pre></td></tr></table></figure><h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h3><ul><li>区分相同名字的类</li><li>管理类</li><li>控制访问范围</li></ul><h3 id="3-命名规则"><a href="#3-命名规则" class="headerlink" title="3. 命名规则"></a>3. 命名规则</h3><ul><li>只能包含数字、字母、下划线、小圆点，但是不能以数字开头，不能是关键字和保留字</li><li>一般是小写字母+小圆点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.公司名.项目名.业务模块名</span><br><span class="line">    </span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line">com.sina.crm.user<span class="comment">//用户模块</span></span><br></pre></td></tr></table></figure><h3 id="4-常用的包"><a href="#4-常用的包" class="headerlink" title="4. 常用的包"></a>4. 常用的包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.*<span class="comment">//lang包是基本包，默认引入</span></span><br><span class="line">java.util.*<span class="comment">//util包是系统提供的工具包，工具类，如Scanner</span></span><br><span class="line">java.net.*<span class="comment">//网络包，网络开发</span></span><br><span class="line">java.awt.*<span class="comment">//java的界面开发，GUI</span></span><br></pre></td></tr></table></figure><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h3><ul><li>package的作用是声明当前类所在的包，需要放在class的最上面，一个类中最多只有一句package</li><li>import指令位置放在package的下面，在类定义前面，可以有多句且没有顺序要求</li></ul><h2 id="二、访问修饰符"><a href="#二、访问修饰符" class="headerlink" title="二、访问修饰符"></a>二、访问修饰符</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><ul><li>用于控制方法和属性（成员变量）的访问权限（范围），共4种：<ul><li>公开级别：用public修饰,对外公开</li><li>受保护级别：用protected修饰，对子类和同一个包中的类公开</li><li>默认级别：没有修饰符号，向同一个包的类公开</li><li>私有级别：用private修饰，只有类本身可以访问，不对外公开</li></ul></li></ul><h3 id="2-访问范围"><a href="#2-访问范围" class="headerlink" title="2. 访问范围"></a>2. 访问范围</h3><div class="table-container"><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">访问级别</th><th style="text-align:center">访问控制修饰符</th><th style="text-align:center">同类</th><th style="text-align:center">同包</th><th style="text-align:center">子类</th><th style="text-align:center">不同包</th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">公开</td><td style="text-align:center">public</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">受保护</td><td style="text-align:center">protected</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">默认</td><td style="text-align:center">没有修饰符</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">私有</td><td style="text-align:center">private</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table></div><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h3><ul><li>修饰符可以用来修饰类中的属性，成员方法以及类</li><li>只有默认的和public才能修饰类，并且遵循上述访问权限的特点</li><li>成员方法的访问规则和属性完全一样</li></ul><h2 id="三、面向对象编程三大特征"><a href="#三、面向对象编程三大特征" class="headerlink" title="三、面向对象编程三大特征"></a>三、面向对象编程三大特征</h2><h3 id="1-封装"><a href="#1-封装" class="headerlink" title="1. 封装"></a>1. 封装</h3><ul><li>封装(encapsulation)就是把抽象出的数据[属性]和对数据的操作[方法]封装在一起，数据被保护在内部，程序的其它部分只有通过被授权的操作[方法]，才能对数据进行操作</li><li>封装可以隐藏细节：方法（连接数据库）&lt;—调用（传入参数）</li><li>封装可以对数据进行验证，保证安全合理</li></ul><h4 id="1-1-封装实现步骤"><a href="#1-1-封装实现步骤" class="headerlink" title="1.1 封装实现步骤"></a>1.1 封装实现步骤</h4><ul><li>将属性进行私有化private</li><li>提供一个公共（public）的set方法，get方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setXxx</span><span class="params">(类型 参数名)</span>&#123;</span><br><span class="line">    <span class="comment">//逻辑代码</span></span><br><span class="line">    属性 = 参数名;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> 数据类型 getXxx()&#123;</span><br><span class="line">    <span class="keyword">return</span> xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h3><ul><li>继承可以解决代码复用，当多个类存在相同的属性(变量)和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过extends来声明继承父类即可</li></ul><h4 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2.1 语法"></a>2.1 语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class 子类 extends 父类&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>子类就会自动拥有父类定义的属性和方法</li><li>父类又叫超类，基类</li><li>子类又叫派生类</li></ul><img src="/undefined/dba1/dba1/%E7%BB%A7%E6%89%BF%E7%A4%BA%E6%84%8F%E5%9B%BE.png" class title="继承示意图"><h4 id="2-2-注意事项"><a href="#2-2-注意事项" class="headerlink" title="2.2 注意事项"></a>2.2 注意事项</h4><ul><li><p>子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问，但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问</p></li><li><p>子类必须调用父类的构造器，完成父类的初始化</p></li><li><p>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用super去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过</p></li><li><p>如果希望指定去调用父类的某个构造器，则显式的调用一下</p><ul><li>```java<br>super(参数列表)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- super在使用时，必须放在构造器第一行(super只能在构造器中使用)</span><br><span class="line"></span><br><span class="line">- super()和this()都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</span><br><span class="line"></span><br><span class="line">- java所有的类都是Object的子类，Object类是所有类的基类</span><br><span class="line"></span><br><span class="line">- 父类的构造器的调用不限于直接父类，将一直追溯到Object类</span><br><span class="line"></span><br><span class="line">- 子类最多只能继承一个父类（直接继承），**java为单继承机制**</span><br><span class="line"></span><br><span class="line">#### 2.3 内存布局</span><br><span class="line"></span><br><span class="line">&#123;% asset_img 继承的内存布局.png 继承的内存布局 %&#125;</span><br><span class="line"></span><br><span class="line">#### 2.4 super关键字</span><br><span class="line"></span><br><span class="line">- 代表父类的引用，用于访问父类的属性、方法、构造器</span><br><span class="line"></span><br><span class="line">##### 2.4.1 语法</span><br><span class="line"></span><br><span class="line">- 访问父类的属性，但是不能访问private属性</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  super.属性名;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>访问父类的方法，但是不能访问private方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>.方法名(参数列表);</span><br></pre></td></tr></table></figure></li><li><p>访问父类的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>(参数列表);<span class="comment">//只能放在第一句，只能出现一句</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Text</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类的属性 但不能访问父类的private属性 [super.属性名]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.n1 + <span class="built_in">super</span>.n2 + <span class="built_in">super</span>.n3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类的方法 但不能访问父类的private方法 [super.方法名(形参列表)]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.text20();</span><br><span class="line">        <span class="built_in">super</span>.test100();</span><br><span class="line">        <span class="built_in">super</span>.text300();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//访问父类的构造器 [super.参数列表]</span></span><br><span class="line">    <span class="comment">//只能在构造器中使用 且必须放在第一条语句</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Text</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super();访问父类的无参构造器</span></span><br><span class="line">        <span class="comment">//super(&quot;jack&quot;);访问父类的形参列表为String类型的有参构造器</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;jack&quot;</span> , <span class="number">10</span>);<span class="comment">//访问父类的形参列表为String类型 和 int类型的有参构造器</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-2-注意事项"><a href="#2-4-2-注意事项" class="headerlink" title="2.4.2 注意事项"></a>2.4.2 注意事项</h5><ul><li>分工明确，父类属性由父类初始化，子类属性由子类初始化</li><li>当子类中有和父类的成员（属性和方法）重名时，访问父类的成员，需要通过super</li><li>super的访问不限于直接父类，其访问遵守就近原则</li></ul><h5 id="2-4-3-super和this的比较"><a href="#2-4-3-super和this的比较" class="headerlink" title="2.4.3 super和this的比较"></a>2.4.3 super和this的比较</h5><div class="table-container"><table><thead><tr><th style="text-align:center">No</th><th style="text-align:center">区别</th><th style="text-align:center">this</th><th style="text-align:center">super</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">访问属性</td><td style="text-align:center">访问本类中的属性，如果本类没有该属性就从父类中查找</td><td style="text-align:center">从父类开始查找属性</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">调用方法</td><td style="text-align:center">访问本类中的方法，如果本类没有就从父类查找</td><td style="text-align:center">从父类开始查找方法</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">调用构造器</td><td style="text-align:center">调用本类构造器，必须放在构造器首行</td><td style="text-align:center">调用父类的构造器，必须放在子类构造器首行</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">特殊</td><td style="text-align:center">表示当前对象</td><td style="text-align:center">子类访问父类对象</td></tr></tbody></table></div><h4 id="2-5-方法重写"><a href="#2-5-方法重写" class="headerlink" title="2.5 方法重写"></a>2.5 方法重写</h4><ul><li>子类有一个方法和父类的某个方法的名称、返回类型、参数一致</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> cryO&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;动物叫唤。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> cryo&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;小狗汪汪叫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-1-注意事项"><a href="#2-5-1-注意事项" class="headerlink" title="2.5.1 注意事项"></a>2.5.1 注意事项</h5><ul><li>子类的方法的形参列表方法名称，要和父类方法的形参列表，方法名称完全一样</li><li>子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类，比如父类返回类型是 Object ,子类方法返回类型是String</li><li>子类方法不能缩小父类方法的访问权限，但是可以扩大public &gt; protected &gt; 默认 &gt; private</li></ul><h5 id="2-5-2-重载和重写的比较"><a href="#2-5-2-重载和重写的比较" class="headerlink" title="2.5.2 重载和重写的比较"></a>2.5.2 重载和重写的比较</h5><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">发生范围</th><th style="text-align:center">方法名</th><th style="text-align:center">形参列表</th><th style="text-align:center">返回类型</th><th style="text-align:center">修饰符</th></tr></thead><tbody><tr><td style="text-align:center">重载（overload）</td><td style="text-align:center">本类</td><td style="text-align:center">必须一样</td><td style="text-align:center">类型，个数或者顺序至少有一个不同</td><td style="text-align:center">无要求</td><td style="text-align:center">无要求</td></tr><tr><td style="text-align:center">重写（override）</td><td style="text-align:center">父子类</td><td style="text-align:center">必须一样</td><td style="text-align:center">相同</td><td style="text-align:center">子类重写的方法，返回类型和父类的返回类型一致，或为其子类</td><td style="text-align:center">子类方法不能缩小父类方法的访问范围</td></tr></tbody></table></div><h3 id="3-多态"><a href="#3-多态" class="headerlink" title="3. 多态"></a>3. 多态</h3><ul><li><p><strong>多态的前提是两个对象（类）存在继承关系</strong></p></li><li><p>一个对象的编译类型和运行类型可以不一致</p></li><li>编译类型在定义对象的时候就确定了，不能改变</li><li>运行类型可以变化</li><li><strong>编译类型看 = 号的左边，运行类型看 = 号的右边</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">//animal编译类型是Animal,运行类型Dog</span></span><br><span class="line">animal = <span class="keyword">new</span> <span class="title class_">Cat</span>(); <span class="comment">//animal的运行类型变成了Cat,编译类型仍然是 Animal</span></span><br></pre></td></tr></table></figure><h4 id="3-1-向上转型"><a href="#3-1-向上转型" class="headerlink" title="3.1 向上转型"></a>3.1 向上转型</h4><ul><li>父类的引用指向子类的对象</li></ul><h5 id="3-1-1-语法"><a href="#3-1-1-语法" class="headerlink" title="3.1.1 语法"></a>3.1.1 语法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类类型 引用名 = <span class="keyword">new</span> 子类类型();</span><br></pre></td></tr></table></figure><ul><li>可以盗用父类的所有成员（需遵守访问权限）</li><li>不能调用子类中特有成员</li></ul><h4 id="3-2-向下转型"><a href="#3-2-向下转型" class="headerlink" title="3.2 向下转型"></a>3.2 向下转型</h4><h5 id="3-2-1-语法"><a href="#3-2-1-语法" class="headerlink" title="3.2.1 语法"></a>3.2.1 语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子类类型 引用名 = (子类类型)父类引用;</span><br></pre></td></tr></table></figure><ul><li>只能强转父类的引用，不能强转父类的对象</li><li>父类的引用必须指向的是当前目标类型的对象</li><li>向下转型后可以调用子类类型中的所有成员</li></ul><h5 id="3-2-2-注意事项"><a href="#3-2-2-注意事项" class="headerlink" title="3.2.2 注意事项"></a>3.2.2 注意事项</h5><ul><li>属性没有重写，属性值看编译类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instanceOf<span class="comment">//比较操作符</span></span><br></pre></td></tr></table></figure><ul><li>用于判断对象的运行类是否为xx类型或xx子类型</li></ul><h5 id="3-2-3-java的动态绑定机制"><a href="#3-2-3-java的动态绑定机制" class="headerlink" title="3.2.3 java的动态绑定机制"></a>3.2.3 java的动态绑定机制</h5><ul><li>当调用对象方法时，该方法会和对象的内存地址/运行类型进行绑定</li><li>当调用对象属性时，没有动态绑定机制，哪里声明哪里使用</li></ul><h5 id="3-2-4-多态参数"><a href="#3-2-4-多态参数" class="headerlink" title="3.2.4 多态参数"></a>3.2.4 多态参数</h5><ul><li>方法定义的形参列表为父类类型，实参类型允许为子类类型</li></ul><h2 id="四、Object类"><a href="#四、Object类" class="headerlink" title="四、Object类"></a>四、Object类</h2><h3 id="1-equals方法"><a href="#1-equals方法" class="headerlink" title="1. equals方法"></a>1. equals方法</h3><h4 id="1-1-和equals的对比"><a href="#1-1-和equals的对比" class="headerlink" title="1.1 == 和equals的对比"></a>1.1 == 和equals的对比</h4><ul><li><p>==：既可以判断基本类型，又可以判断引用类型</p><ul><li><p>如果判断基本类型，判断的是值是否相等</p></li><li><p>如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象</p></li></ul></li><li><p>equals：只能判断引用类型</p></li><li>默认判断的是地址是否相等，子类中往往重写该方法，用于判断内容是否相等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1000</span>);</span><br><span class="line">System.out.println(integer1 ==integer2);<span class="comment">//false</span></span><br><span class="line">System.out.println(integer1.equals(integer2));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hspedlu &quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hspedu &quot;</span>);</span><br><span class="line">System.out.println(str1 ==str2);<span class="comment">//false</span></span><br><span class="line">System.out.println(str1.equals(str2));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="2-hashCode方法"><a href="#2-hashCode方法" class="headerlink" title="2. hashCode方法"></a>2. hashCode方法</h3><ul><li>提高具有哈希结构的容器的效率</li><li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的</li><li>两个引用，如果指向的是不同对象，则哈希值是不一样的</li><li>哈希值主要根据地址号来的，不能完全将哈希值等价于地址</li></ul><h3 id="3-toString方法"><a href="#3-toString方法" class="headerlink" title="3. toString方法"></a>3. toString方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">全类名 + @ + 哈希值的十六进制<span class="comment">//一般情况下会重写toString方法，用于返回对象的属性信息</span></span><br></pre></td></tr></table></figure><h3 id="4-finalize方法"><a href="#4-finalize方法" class="headerlink" title="4. finalize方法"></a>4. finalize方法</h3><ul><li>当对象被回收时，系统自动调用该对象的finalize方法。子类可以重写该方法,做一些释放资源的操作</li><li>什么时候被回收：当某个对象没有任何引用时，则jvm就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用finalize方法</li><li>垃圾回收机制的调用，是由系统来决定(即有自己的GC算法)，也可以通过System.gc()主动触发垃圾回收机制</li></ul><h2 id="五、断点调试"><a href="#五、断点调试" class="headerlink" title="五、断点调试"></a>五、断点调试</h2><ul><li>在断点调试过程中，是运行状态，以对象的运行类型来执行的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（十） - 变量和类方法</title>
      <link href="/undefined/bae3.html"/>
      <url>/undefined/bae3.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、类变量"><a href="#一、类变量" class="headerlink" title="一、类变量"></a>一、类变量</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><ul><li>类变量也叫静态变量/静态属性，是该类的所有对象共享的变量,任何一个该类的对象去访问它时,取到的都是相同的值,同样任何一个该类的对象去修改它时，修改的也是同一个变量</li></ul><h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 定义类变量</span></span><br><span class="line"><span class="comment">//静态变量的访问修饰符的访问权限和范围和普通属性是一样的</span></span><br><span class="line"><span class="comment">//方式1</span></span><br><span class="line">访问修饰符 <span class="keyword">static</span> 数据类型 变量名;</span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="keyword">static</span> 访问修饰符 数据类型 变量名;</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;执笔&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 访问类变量</span></span><br><span class="line">类名.对象名;</span><br><span class="line">对象名.类变量名;</span><br></pre></td></tr></table></figure><h3 id="3-细节"><a href="#3-细节" class="headerlink" title="3. 细节"></a>3. 细节</h3><ul><li>使用场景：当需要某个类的所有对象都共享一个变量时</li><li>和普通实例变量（普通属性）的区别：类变量是该类所有对象共享的，而实例变量是每个对象独享的</li><li><p>实例变量不能通过类名.类变量名方式访问</p></li><li><p>static类变量在类加载的时候就生成了</p></li><li>类变量的生命周期随类的加载开始，随类的消亡而销毁</li></ul><h2 id="二、类方法"><a href="#二、类方法" class="headerlink" title="二、类方法"></a>二、类方法</h2><ul><li>类方法也称为<strong>静态方法</strong></li></ul><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//形式</span></span><br><span class="line">访问修饰符 <span class="keyword">static</span> 数据返回类型 方法名() &#123;&#125;</span><br><span class="line"><span class="keyword">static</span> 访问修饰符 数据返回类型 方法名() &#123;&#125;</span><br><span class="line"><span class="comment">//调用方式</span></span><br><span class="line">类名.方法名</span><br><span class="line">对象名.方法名</span><br></pre></td></tr></table></figure><h3 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h3><ul><li>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率</li><li>将一些通用的方法设计为静态方法</li></ul><h3 id="3-细节-1"><a href="#3-细节-1" class="headerlink" title="3. 细节"></a>3. 细节</h3><ul><li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区</li><li>类方法中无this的参数，普通方法中隐含着this的参数</li><li>类方法可以通过类名调用，也可以通过对象名调用</li><li>普通方法和对象有关，需要通过对象名调用，比如对象名.方法名(参数)，不能通过类名调用</li><li>类方法中不允许使用和对象有关的关键字，比如this和super。普通方法(成员方法)可以</li><li><strong>类方法(静态方法)中只能访问静态变量或静态方法</strong></li><li><strong>普通成员方法，既可以访问普通变量(方法)，也可以访问静态变量(方法)</strong></li></ul><h2 id="三、main方法"><a href="#三、main方法" class="headerlink" title="三、main方法"></a>三、main方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>main方法时虚拟机调用</li><li>java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public</li><li>java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static</li><li>该方法接收String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数</li><li><p>java 执行的程序参数1参数2参数3</p><ul><li><img src="/undefined/bae3/bae3/java%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%8F%82%E6%95%B0.png" class title="java执行程序参数"></li></ul></li><li><p>在main()方法中，我们可以直接调用main方法所在类的静态方法或静态属性</p></li><li>但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员</li></ul><h2 id="四、代码块"><a href="#四、代码块" class="headerlink" title="四、代码块"></a>四、代码块</h2><ul><li><p>又称初始化块，属于类中的成员，类似于方法，将逻辑语句封装在方法体中{}</p></li><li><p>没有方法名、没有返回值、没有参数，只有方法体，不通过对象或类显示调用，<strong>而是加载类时，或创建对象时隐式调用</strong></p></li></ul><h3 id="1-语法-1"><a href="#1-语法-1" class="headerlink" title="1. 语法"></a>1. 语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符]&#123;</span><br><span class="line">    <span class="comment">//逻辑代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>修饰符可选,要写的话，也只能写static</li><li>代码块分为两类，使用static修饰的叫静态代码块，没有static修饰的，叫普通代码块</li><li>逻辑语句可以为任何逻辑语句(输入、输出、方法调用、循环、判断等)</li><li>;号可以写上，也可以省略</li></ul><h3 id="2-细节"><a href="#2-细节" class="headerlink" title="2. 细节"></a>2. 细节</h3><ul><li><p>代码块调用顺序优先于构造器</p></li><li><p>static代码块也叫静态代码块，作用就是对类进行初始化，而且它随着类的加载而执行，并且只会执行一次</p></li><li><strong>类被加载情况：</strong><ul><li><strong>创建对象实例时new</strong></li><li><strong>创建子类对象实例，父类也会被加载</strong></li><li><strong>使用类的静态成员时（静态属性、静态方法）</strong></li></ul></li><li><p>普通的代码块，在创建对象实例时，会被隐式的调用。被创建一次，就会调用一次，如果只是使用类的静态成员时，普通代码块并不会执行</p></li><li><p><strong>创建一个对象时，在一个类调用顺序：</strong></p><ul><li><p><strong>① 调用静态代码块和静态属性初始化（注意：静态代码块和静态属性初始化调用的优先级一样，如果有多个静态代码块和多个静态变量初始化，则按他们定义的顺序调用）</strong></p></li><li><p><strong>② 调用普通代码块和普通属性的初始化（注意：普通代码块和普通属性初始化调用的优先级一样，如果有多个普通代码块和多个普通属性初始化，则按定义顺序调用）</strong></p></li><li><p><strong>③ 调用构造方法</strong></p></li><li><p>```java<br>public class CodeBlockExercise02 {</p><pre><code>public static void main(String str[]) &#123;    Test a = new Test();//无参构造器&#125;</code></pre><p>}</p><p>class Sample {</p><pre><code>Sample(String s) &#123;//有参构造器    System.out.println(s);&#125;Sample()&#123;    System.out.println( &quot;Sample默认构造函数被调用&quot;);&#125;</code></pre><p>}</p><p>class Test {</p><pre><code>Sample sam1 = new Sample(&quot;sam1成员初始化&quot;);//(3)static Sample sam = new Sample(&quot;静态成员sam初始化&quot;);//(1)//静态代码块static &#123;    System.out.println(&quot;static块执行&quot;);//(2)    if (sam == null) System.out.println(&quot;sam is null&quot;);&#125;//无参构造器Test()&#123;    System.out.println(&quot;Test默认构造函数被调用&quot;);//(4)    &#125;&#125;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 构造器的最前面其实隐含了super()和调用晋通代码块，静态相关的代码块，属性初始化，在类加载时，就执行完毕，因此是优先于构造器和普通代码块执行的</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">class A &#123;</span><br><span class="line">public A()&#123;//构造器</span><br><span class="line">//这里有隐藏的执行要求</span><br><span class="line">    //(1) super):</span><br><span class="line">    //(2)调用普通代码块的</span><br><span class="line">System.out.println(&quot;ok&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建一个子类时(继承关系)，静态代码块，静态属性初始化，普通代码块，普通属性初始化，构造方法的调用顺序：</p><ul><li>① 父类的静态代码块和静态属性（优先级一样，按定义顺序执行）</li><li>② 子类的静态代码块和静态属性（优先级一样,按定义顺序执行）</li><li>③ 父类的普通代码块和普通属性初始化（优先级一样，按定义顺序执行）</li><li>④ 父类的构造方法</li><li>⑤ 子类的普通代码块和普通属性初始化（优先级一样，按定义顺序执行）</li><li>⑥ 子类的构造方法</li></ul></li><li><p>静态代码块只能直接调用静态成员(静态属性和静态方法),普通代码块可以调用任意成员</p></li></ul><h2 id="五、单例设计模式"><a href="#五、单例设计模式" class="headerlink" title="五、单例设计模式"></a>五、单例设计模式</h2><ul><li>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法</li></ul><h3 id="1-创建步骤"><a href="#1-创建步骤" class="headerlink" title="1. 创建步骤"></a>1. 创建步骤</h3><ul><li>构造器私有化</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法</li><li>代码实现</li></ul><h3 id="2-饿汉式"><a href="#2-饿汉式" class="headerlink" title="2. 饿汉式"></a>2. 饿汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleTon</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String str[])</span> &#123;</span><br><span class="line"><span class="comment">//通过方法可以获取对象</span></span><br><span class="line"><span class="type">GirlFriend</span> <span class="variable">instance</span> <span class="operator">=</span> GirlFriend.getInstance();</span><br><span class="line">System.out.println(instance);</span><br><span class="line">        </span><br><span class="line"><span class="type">GirlFriend</span> <span class="variable">instance2</span> <span class="operator">=</span> tirlFriend.getInstance();</span><br><span class="line">        System.out.println(instance2p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//为了能够在静态方法中，返回gf对象，需要将其修饰为static</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> GirlFriend gf= <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;小红红&quot;</span>);<span class="comment">//如何保障我们只能创建一个 GirlFriend 对象</span></span><br><span class="line"><span class="comment">//步骤</span></span><br><span class="line"><span class="comment">//1. 将构造器私有化</span></span><br><span class="line">    <span class="comment">//2．在类的内部直接创建</span></span><br><span class="line"><span class="comment">//3．提供一个公共的static方法，返回 gf对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> gf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-懒汉式"><a href="#3-懒汉式" class="headerlink" title="3. 懒汉式"></a>3. 懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只能创建一个Cat封象</span></span><br><span class="line"><span class="comment">//使用单例模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cet</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Cat cat ;</span><br><span class="line">    <span class="comment">//步骤</span></span><br><span class="line"><span class="comment">//1. 构造器私有化</span></span><br><span class="line"><span class="comment">//2. 定义一个static静态属性对象</span></span><br><span class="line"><span class="comment">//3. 提供一个public的static方法，可以返回一个Cat对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Cat <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(cat == <span class="literal">null</span>) &#123;<span class="comment">//如果遭没有斛建cat封象</span></span><br><span class="line">cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小可爱&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-饿汉式与懒汉式对比"><a href="#4-饿汉式与懒汉式对比" class="headerlink" title="4. 饿汉式与懒汉式对比"></a>4. 饿汉式与懒汉式对比</h3><ul><li>二者最主要的区别在于创建对象的时机不同：饿汉式是在类加载就创建了对象实例，而懒汉式是在使用时才创建</li><li>饿汉式不存在线程安全问题，懒汉式存在线程安全问题</li><li>饿汉式存在浪费资源的可能。因为如果程序员一个对象实例都没有使用，那么饿汉式创建的对象就浪费了，懒汉式是使用时才创建，就不存在这个问题</li><li>在我们javaSE标准类中，java.lang.Runtime就是经典的单例模式</li></ul><h2 id="六、Final关键字"><a href="#六、Final关键字" class="headerlink" title="六、Final关键字"></a>六、Final关键字</h2><ul><li>final可以修饰类、属性、方法和局部变量</li></ul><h3 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1. 使用场景"></a>1. 使用场景</h3><ul><li><p>当不希望类被继承时，可以用final修饰</p></li><li><p>当不希望父类的某个方法被子类覆盖/重写(override)时,可以用final关键字<br>修饰</p><ul><li>```java<br>访问修饰符 final 返回类型 方法名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 当不希望类的的某个属性的值被修改,可以用final修饰</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public final double TAX RATE=0.08</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-细节-1"><a href="#2-细节-1" class="headerlink" title="2.  细节"></a>2.  细节</h3><ul><li><p>final修饰的属性又叫常量，一般用XX_XX_XX来命名</p></li><li><p>final修饰的属性在定义时，必须赋初始值，并且以后不能修改，赋值可以在以下位置之一：</p><ul><li><p>① 定义时：</p><ul><li>```java<br>public final double TAX_RATE=0.08;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ② 在构造器中</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public A()&#123;</span><br><span class="line">        TAX_RATE = 1.1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>③ 在代码块中</p><ul><li>```java<br>{<pre><code>TAX_RATE1 = 2.2;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如果final修饰的属性是静态的，则初始化的位置只能是：</span><br><span class="line"></span><br><span class="line">  - ① 定义时</span><br><span class="line">  - ②在静态代码块不能在构造器中赋值</span><br><span class="line"></span><br><span class="line">- final类不能继承，但是可以实例化对象</span><br><span class="line"></span><br><span class="line">- 如果类不是final类，但是含有final方法，则该方法虽然不能重写，但是可以被继承</span><br><span class="line"></span><br><span class="line">- 一般来说，如果一个类已经是final类了，就没有必要再将方法修饰成final方法</span><br><span class="line">- final不能修饰构造方法（即构造器）</span><br><span class="line">- final和static往往搭配使用，效率更高，不会导致类加载，底层编译器做了优化处理</span><br><span class="line"></span><br><span class="line">- 包装类（Integer,Double,Float, Boolean等都是final），String也是final</span><br><span class="line"></span><br><span class="line">### 3. 案例</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class FinalExercise01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Circle(4).calArea();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Circle &#123;</span><br><span class="line">    private double radius;</span><br><span class="line">    //1、在属性直接赋值</span><br><span class="line">    //private final  double PI = 3.14;</span><br><span class="line">    private final  double PI;</span><br><span class="line">    private final  double PI2;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        //2、在代码块中定义</span><br><span class="line">        PI = 3.14;</span><br><span class="line">    &#125;</span><br><span class="line">    public Circle(double radius) &#123;</span><br><span class="line">        this.radius = radius;</span><br><span class="line">        //3、在构造器中定义</span><br><span class="line">       PI2 = 3.14;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public  void calArea() &#123;</span><br><span class="line">        System.out.println(PI * (radius * radius));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="七、抽象类（Abstract）"><a href="#七、抽象类（Abstract）" class="headerlink" title="七、抽象类（Abstract）"></a>七、抽象类（Abstract）</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><ul><li>当父类的某些方法,需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Abstract01</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里eat 实现了，但没有什么意义</span></span><br><span class="line">    <span class="comment">//即：父类方法不确定性</span></span><br><span class="line">    <span class="comment">//1、将该方法设计为抽象(abstract)方法</span></span><br><span class="line">    <span class="comment">//2、所谓抽象方法就是没有实现的方法</span></span><br><span class="line">    <span class="comment">//3、没有实现就是指，没有方法体</span></span><br><span class="line">    <span class="comment">//4、当一个类中存在抽象方法时，需要将该类声明为abstract类</span></span><br><span class="line">    <span class="comment">//5、抽象类会被继承，由其子类来实现相关功能</span></span><br><span class="line"><span class="comment">//    public void eat() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;这是一个动物，但是不知道吃什么&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>抽象类</strong>：用abstract关键字来修饰一个类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 <span class="keyword">abstract</span> 类名&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>抽象方法：用abstract关键字来修饰一个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 <span class="keyword">abstract</span> 返回类型 方法名(参数列表);<span class="comment">//没有方法体</span></span><br></pre></td></tr></table></figure><h3 id="2-细节-2"><a href="#2-细节-2" class="headerlink" title="2. 细节"></a>2. 细节</h3><ul><li><strong>抽象类不能被实例化</strong></li><li>抽象类不一定包含abstract方法</li><li>一个类包含了abstract方法，则这个类必须声明为abstract</li><li><p>abstract只能修饰类和方法，不能修饰属性和其他的</p></li><li><p>抽象类可以有任意的成员，如：非抽象方法、构造器、静态属性等</p></li><li><p>抽象方法没有方法体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p>如果一个类继承了抽象类，则它必须实现抽象类的所有方法，除非该类声明为abstract类 </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为abstract类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">F</span> <span class="keyword">extends</span> <span class="title class_">E</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">G</span> <span class="keyword">extends</span> <span class="title class_">E</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;<span class="comment">//这里相等于G子类实现了父类E的抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>抽象方法不能用private、final、static来修饰，这些关键字都是和重写相违背</li></ul><h2 id="八、接口"><a href="#八、接口" class="headerlink" title="八、接口"></a>八、接口</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><ul><li><p>接口就是给出一些没有实现的方法，封装到一起,到某个类要使用的时候，在根据具体情况把这些方法写出来</p></li><li><p>接口中默认抽象方法和常量</p></li></ul><h3 id="2-语法-1"><a href="#2-语法-1" class="headerlink" title="2. 语法"></a>2. 语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个类实现接口</span></span><br><span class="line">class 类名 implements 接口名&#123;</span><br><span class="line">    <span class="comment">//该类属性</span></span><br><span class="line">    <span class="comment">//该类方法</span></span><br><span class="line">    <span class="comment">//必须实现的接口的抽象类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Jdk7.0前接口里的所有方法都没有方法体</li><li>Jdk8.0后接口类可以有静态方法，默认方法，也就是说接口中可以有方法的具体实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AInterface</span> &#123;</span><br><span class="line"><span class="comment">//写属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//写方法</span></span><br><span class="line"><span class="comment">//在接口中，抽象方法，可以省略abstract关键字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//在jdk8后，可以有默认实现方法，需要使用default关键字修饰</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">system.out.println(<span class="string">&quot;ok ...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//在jdk8后，可以有静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cry ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-细节-2"><a href="#3-细节-2" class="headerlink" title="3. 细节"></a>3. 细节</h3><ul><li><p><strong>接口不能被实例化</strong></p></li><li><p>接口中所有的方法都是public方法，接口中抽象方法可以不用abstract修饰</p><ul><li>```java<br>void test();//等价于abstract void test();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 一个普通类实现接口，则必须实现该接口的所有方法</span><br><span class="line"></span><br><span class="line">- 抽象类实现接口，可以不用实现接口的方法</span><br><span class="line"></span><br><span class="line">- 一个类同时可以实现多个接口</span><br><span class="line"></span><br><span class="line">- 接口中的属性只能是final</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public static final 修饰符</span><br><span class="line">    int a = 1;//实际上是public static final int a = 1;必须初始化</span><br></pre></td></tr></table></figure></li></ul></li><li><p>接口中的访问形式</p><ul><li>```java<br>接口名.属性名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 一个接口不能继承其他的类，但是可以继承多个别的接口</span><br><span class="line"></span><br><span class="line">- 接口的修饰符只能是public 和 默认，和类的修饰符一致</span><br><span class="line"></span><br><span class="line">### 4. 接口的多态特性</span><br><span class="line"></span><br><span class="line">- **多态参数**：接口可以指向实现了接口类的对象</span><br><span class="line">- **多态数组**</span><br><span class="line">- **多态传递**</span><br><span class="line"></span><br><span class="line">## 九、内部类</span><br><span class="line"></span><br><span class="line">### 1. 介绍</span><br><span class="line"></span><br><span class="line">- 一个类的内部又完整的嵌套了另一个类结构。被嵌套的类称为内部类(inner class),嵌套其他类的类称为外部类(outer class)</span><br><span class="line"></span><br><span class="line">- **类的五大成员：属性、方法、构造器、代码块、内部类**</span><br><span class="line"></span><br><span class="line">### 2. 语法</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">class Outer&#123;//外部类</span><br><span class="line">    class Inner&#123;//内部类</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Other&#123;//外部其他类</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3-分类"><a href="#3-分类" class="headerlink" title="3. 分类"></a>3. 分类</h3><h4 id="3-1-定义在外部类的局部位置"><a href="#3-1-定义在外部类的局部位置" class="headerlink" title="3.1 定义在外部类的局部位置"></a>3.1 定义在外部类的局部位置</h4><h5 id="3-1-1-局部内部类"><a href="#3-1-1-局部内部类" class="headerlink" title="3.1.1 局部内部类"></a>3.1.1 局部内部类</h5><ul><li><p><strong>有类名</strong></p></li><li><p>可以直接访问外部类的所有成员，包含私有的</p></li><li><p>不能添加访问修饰符，因为它的地位就是一个局部变量，局部变量是不能使用修饰符的，但是可以使用final修饰，因为局部变量也可以使用final</p></li><li><p>作用域：仅仅在定义它的方法或代码块中</p></li><li><p>局部内部类—-访问——&gt;外部类的成员[访问方式：直接访问]</p></li><li><p>外部类—-访问——&gt;局部内部类的成员[访问方式：创建对象，再访问(注意：必须在作用域内)]</p></li><li><p>外部其他类—-不能访问——-&gt;局部内部类（因为局部内部类地位是一个局部变量)</p></li><li><p>如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，则可以使用(外部类名.this.成员)去访问</p><ul><li>```java<br>System.out.println(“外部类的n2= “ + 外部类名.this.n2);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">class Outer02 &#123;//外部类</span><br><span class="line">private int n1 = 100;</span><br><span class="line">    public void m1() &#123;//方法</span><br><span class="line">//局部内部类是定义在外部类的局部位置,通常在方法</span><br><span class="line">        //不能添加访问修饰符，但是可以使用final修饰</span><br><span class="line">        //作用域：仅仅在定义它的方法或代码块中</span><br><span class="line">        final class Inner02 &#123;//局部内部类</span><br><span class="line">            private int n1 = 800;</span><br><span class="line">            //可以访问外部类的所有成员，包含私有的</span><br><span class="line">            public void f1()&#123;</span><br><span class="line">                System.out.println(&quot;n1= &quot; + n1 + &quot; 外部类的n1= &quot; + Outer02.this.n1);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">        //外部类在方法中，可以创建Inner02对象</span><br><span class="line">        Inner02 inner02 = new Inner02();</span><br><span class="line">        inner02.f1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="3-1-2-匿名内部类"><a href="#3-1-2-匿名内部类" class="headerlink" title="3.1.2 匿名内部类"></a>3.1.2 匿名内部类</h5><ul><li><strong>没有类名</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">new</span> 类或接口(参数列表)&#123;</span><br><span class="line">   <span class="comment">//类体 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="type">IA</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IA</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;老虎叫唤... &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">tiger.cry();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">IA</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;老虎叫唤... &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;.cry();</span><br></pre></td></tr></table></figure><ul><li><strong>匿名内部类使用一次，就不能再使用了</strong></li><li>匿名内部类可以调用其本身的方法</li><li>可以直接访问外部类的所有成员,包含私有的</li><li>不能添加访问修饰符,因为它的地位就是一个局部变量</li><li>作用域：仅仅在定义它的方法或代码块中</li><li>匿名内部类—-访问——&gt;外部类成员[访问方式:直接访问]</li><li>外部其他类—-不能访问——-&gt;匿名内部类（因为匿名内部类地位是一个局部变量)</li><li>如果外部类和匿名内部类的成员重名时，匿名内部类访问的话，默认遵循就近原则,如果想访问外部类部成员，则可以使用(外部类名.this.成员）去访问</li></ul><h4 id="3-2-定义在外部类的成员位置"><a href="#3-2-定义在外部类的成员位置" class="headerlink" title="3.2 定义在外部类的成员位置"></a>3.2 定义在外部类的成员位置</h4><h5 id="3-2-1-成员内部类"><a href="#3-2-1-成员内部类" class="headerlink" title="3.2.1 成员内部类"></a>3.2.1 成员内部类</h5><ul><li>没有使用static修饰</li><li>可以直接访问外部类的所有成员</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer01</span>&#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnterO1</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.printIn(<span class="string">&quot;Outer01的n1 = &quot;</span> + n1 + <span class="string">&quot; outer01的name = &quot;</span> + name );</span><br><span class="line">&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>可以添加任意访问修饰符（public、protected、默认、private）</li><li>作用域：在外部类的成员方法中创建成员内部类，在调用方法</li><li>成员内部类—-访问——&gt;外部类[访问方式：直接访问]</li><li>外部类—-访问———&gt;内部类[访问方式：创建对象，再访问]</li><li>外部其他类—-访问——&gt;成员内部类</li><li>如果外部类和内部类的成员重名时，内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用(外部类名.this.成员)去访问</li></ul><h5 id="3-2-2-静态内部类"><a href="#3-2-2-静态内部类" class="headerlink" title="3.2.2 静态内部类"></a>3.2.2 静态内部类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner01</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>使用static修饰</strong></p></li><li><p>可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</p></li><li>可以添加任意访问修饰符(public.protected、默认、private)，因为它的地位就是一个成员</li><li><p>作用域：同其他的成员，为整个类体</p></li><li><p>静态内部类—-访问——&gt;外部类(比如：静态属性)[访问方式：直接访所有静态成员]</p></li><li><p>外部类—-访问———&gt;静态内部类[访问方式：创建对象，再访问]</p><ul><li>```java<br>class A03{<pre><code>private int n1 = 10;private static String name = &quot;tom&quot;;private static void cry()&#123;    System.out.println(&quot;cry&quot; );&#125;//定义一个静态内部类static class BO2&#123;    public void say()&#123;        System.out.print1n(name);cry();    &#125;&#125;public void test()&#123;    B02 b02 = new B02();    b02.say();&#125;</code></pre>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 外部其他类---访问-----&gt;静态内部类</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public class TestInnerDemo3 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    //二种方式</span><br><span class="line">    B02 b02_1 = new A03.B02();//这里就不会创建一个A03对象实例</span><br><span class="line">            b02_1.say();</span><br><span class="line">    B02 b02_2 = new A03().getBo20bject();//第二方式</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如果外部类和静态内部类的成员重名时，静态内部类访问的时，默认遵循就近原则，如果想访问外部类的成员，则可以使用(外部类名.成员)去访问</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（十一）- 枚举和注解</title>
      <link href="/undefined/16f3.html"/>
      <url>/undefined/16f3.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、自定义类实现枚举"><a href="#一、自定义类实现枚举" class="headerlink" title="一、自定义类实现枚举"></a>一、自定义类实现枚举</h2><h3 id="1-实现方法"><a href="#1-实现方法" class="headerlink" title="1. 实现方法"></a>1. 实现方法</h3><ul><li>不需要提供setXxx方法，因为枚举对象值通常为只读</li><li>对枚举对象/属性使用final + static共同修饰，实现底层优化</li><li>枚举对象名通常使用全部大写，常量的命名规范</li><li>枚举对象根据需要,也可以有多个属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//季节名称</span></span><br><span class="line"><span class="keyword">private</span> String description;<span class="comment">//季节描述</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> description;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name,String description)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name= name;</span><br><span class="line"><span class="built_in">this</span>.description= description;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span> ,<span class="string">&quot;温暖&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;炎热&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Season</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h3><ul><li>构造器私有化</li><li>本类内部创建一组对象</li><li>对外暴露对象(通过为对象添加public final static修饰符)</li><li>可以提供get方法，但是不要提供set</li></ul><h2 id="二、enum关键字实现枚举"><a href="#二、enum关键字实现枚举" class="headerlink" title="二、enum关键字实现枚举"></a>二、enum关键字实现枚举</h2><h3 id="1-实现方法-1"><a href="#1-实现方法-1" class="headerlink" title="1. 实现方法"></a>1. 实现方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Season2</span> &#123;</span><br><span class="line"><span class="comment">//public final static Season2 SPRING = new Season2(&quot;春天&quot;, &quot;温暖&quot;);</span></span><br><span class="line"><span class="comment">//因为使用了enum ,因此上面的代码可以简化成如下形式</span></span><br><span class="line">SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>)，</span><br><span class="line">SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;炎热&quot;</span>),</span><br><span class="line">AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>),</span><br><span class="line">WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Season2</span><span class="params">(String name, String description)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.description = description;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//季节名称</span></span><br><span class="line"><span class="keyword">private</span> String description;<span class="comment">//季节描述</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> description;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2. 注意事项"></a>2. 注意事项</h3><ul><li>当我们使用enum关键字开发个枚举类时， 默认会继承Enum类</li><li>传统的public static final Season2 SPRING = new Season2(“春天”, “温暖”);简化成SPRING(“春天”, “温暖”)，这里必须知道，它调用的是哪个构造器</li><li>如果使用无参构造器创建枚举对象，则实参列表和小括号都可以省略</li><li>当有多个枚举对象时，使用,间隔，最后有一个分号结尾</li><li>枚举对象必须放在枚举类的行首</li></ul><h3 id="3-对比"><a href="#3-对比" class="headerlink" title="3. 对比"></a>3. 对比</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义了四个对象，固定.</span></span><br><span class="line"><span class="comment">// pubLic static final Season SPRING = new Season(&quot;春 天&quot;，&quot; 温暖&quot;); </span></span><br><span class="line"><span class="comment">// public static final Season WINTER = new Season(&quot;冬 天&quot;，&quot;寒冷&quot;);</span></span><br><span class="line"><span class="comment">// public static final Season AUTUMN = new Season(&quot;秋天&quot;， &quot;凉爽&quot;);</span></span><br><span class="line"><span class="comment">// pubLic static final Season SUMMER = new Season(&quot;夏天&quot;，” 炎热&quot;);</span></span><br><span class="line"><span class="comment">//如果使用了enum来实现枚举类</span></span><br><span class="line"><span class="comment">//1. 使用关键字enum替代cLass</span></span><br><span class="line"><span class="comment">//2. pubLic static final Season SPRING = new Season(&quot;春天&quot;， &quot;温暖&quot;)直接使用</span></span><br><span class="line"><span class="comment">//   SPRING(&quot;春天”，&quot;温暖&quot;)解读常量名(实参列表) </span></span><br><span class="line"><span class="comment">//3. 如果有多个常量(对象)， 使用,号间隔即可</span></span><br><span class="line"><span class="comment">//4. 如果使用enum来实现枚举，要求将定义常量对象，写在前面</span></span><br><span class="line">SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>)，WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>), AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>), SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;炎热&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> string name;</span><br><span class="line"><span class="keyword">private</span> string desc;</span><br></pre></td></tr></table></figure><h3 id="4-enum常用方法"><a href="#4-enum常用方法" class="headerlink" title="4. enum常用方法"></a>4. enum常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>详细描述</th></tr></thead><tbody><tr><td>valueOf</td><td>传递枚举类型的Class对象和枚举常量名称给静态方法valueOf， 会得到与参数匹配的枚举常量</td></tr><tr><td>toString</td><td>得到当前枚举常量的名称。你可以通过重写这个方法来使得到的结果更易读</td></tr><tr><td>equals</td><td>在枚举类型中可以直接使用“==”来比较两个枚举常量是否相等。Enum提供的这个equals0方法， 也是直接使用“==”实现的。它的存在是为了在Set、 List和Map中使用。注意，equals()是不可变的。</td></tr><tr><td>hashCode</td><td>Enum实现了hashCode0来和equals(保持一致。 它也是不可变的。</td></tr><tr><td>name</td><td>得到当前枚举常量的名称</td></tr><tr><td>ordinal</td><td>得到当前枚举常量的次序</td></tr><tr><td>compareTo</td><td>枚举类型实现了Comparable接口,这样可以比较两个枚举常量的大小(按照声明的顺序排列)</td></tr><tr><td>clone</td><td>枚举类型不能被Clone。 为了防止子类实现克隆方法，Enum实现了一个仅抛出CloneNotSupportedException异常的不变Clone()</td></tr><tr><td>getDeclaringClass</td><td>得到枚举常量所属枚举类型的Class对象。可以用它来判断两个枚举常量是否属于同-一个枚举类型</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Season2</span> <span class="variable">autumn</span> <span class="operator">=</span> Season2.AUTUMN;</span><br><span class="line"><span class="comment">//输出枚举对象的名字</span></span><br><span class="line">System.out.println(autumn.name());</span><br><span class="line"><span class="comment">//ordinal()输出的是该枚举对象的次序/编号，从0开始编号</span></span><br><span class="line"><span class="comment">//AUTUMN枚举对象是第三个，因此输出2</span></span><br><span class="line">System.out.println(autumn.ordinal());</span><br><span class="line"></span><br><span class="line"><span class="comment">//从反编译可以看出 values方法，返回Season2 []</span></span><br><span class="line"><span class="comment">//values为隐藏方法，需要反编译进行显示</span></span><br><span class="line"><span class="comment">//含有定义的所有枚举对象</span></span><br><span class="line">Season2[ ] values = Season2. values() ;</span><br><span class="line">System.out.println(<span class="string">&quot;===遍历取出枚举对象(增强for)====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Season2 season: values) &#123;<span class="comment">//增强for循环</span></span><br><span class="line">System.out.printLn(season);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//value0f:将字符串转换成枚举对象，要求字符串必须转换为已有的常量名，否则报异常</span></span><br><span class="line"><span class="comment">//执行流程</span></span><br><span class="line"><span class="comment">//1. 根据你输入的&quot;AUTUMN&quot; 到Season2的枚举对象去查找</span></span><br><span class="line"><span class="comment">//2. 如果找到了，就返回，如果没有找到，就报错</span></span><br><span class="line"><span class="type">Season2</span> <span class="variable">autumn1</span> <span class="operator">=</span> Season2.value0f(<span class="string">&quot;AUTUMN&quot;</span>);</span><br><span class="line">System.out.printLn(<span class="string">&quot;autumn1=&quot;</span> + autumn1);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pubLic final int compareTo(E o) &#123;</span></span><br><span class="line"><span class="comment">return seLf.ordinal - other.ordinal; </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">Season2.AUTUMN的编号[2] - Season2.SUMMER的编号[3]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(Season2.AUTUMN.compareTo(Season2.SUMMER));</span><br></pre></td></tr></table></figure><h3 id="5-案例"><a href="#5-案例" class="headerlink" title="5. 案例"></a>5. 案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Week[] values = Week.values();</span><br><span class="line">        System.out.println(<span class="string">&quot;===所有星期的信息如下===&quot;</span>);</span><br><span class="line">        <span class="comment">//增强for循环</span></span><br><span class="line">        <span class="keyword">for</span> (Week week : values) &#123;</span><br><span class="line">            System.out.println(week);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举类</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Week</span> &#123;</span><br><span class="line">    MONDAY(<span class="string">&quot;星期一&quot;</span>), TUESDAY(<span class="string">&quot;星期二&quot;</span>), WEDNESDAY(<span class="string">&quot;星期三&quot;</span>), THURSDAY(<span class="string">&quot;星期四&quot;</span>),</span><br><span class="line">    FRIDAY(<span class="string">&quot;星期五&quot;</span>), SATURDAY(<span class="string">&quot;星期六&quot;</span>), SUNDAY(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String week;</span><br><span class="line"></span><br><span class="line">    Week(String week) &#123;<span class="comment">//构造器  枚举类中  默认private 可以省略</span></span><br><span class="line">        <span class="built_in">this</span>.week = week;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写toString方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> week;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-实现接口"><a href="#6-实现接口" class="headerlink" title="6. 实现接口"></a>6. 实现接口</h3><ul><li><p>使用enum关键字后，就不能再继承其它类了，因为enum会隐式继承Enum，而Java是单继承机制</p></li><li><p>枚举类和普通类一样，可以实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> 类名implements 接口<span class="number">1</span>,接口<span class="number">2</span>&#123;&#125; </span><br></pre></td></tr></table></figure></li></ul><h2 id="三、注解"><a href="#三、注解" class="headerlink" title="三、注解"></a>三、注解</h2><ul><li>注解(Annotation)也被称为元数据(Metadata),用于修饰解释包、类、方法、属性、构造器、局部变量等数据信息</li><li>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</li><li>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替java EE旧版中所遗留的繁冗代码和XML配置等。</li></ul><h3 id="1-Annotation"><a href="#1-Annotation" class="headerlink" title="1. Annotation"></a>1. Annotation</h3><ul><li>使用Annotation时要在其前面增加@符号，并把该Annotation当成一个修饰符使用。用于修饰它支持的程序元素</li></ul><h4 id="1-1-Override-重写"><a href="#1-1-Override-重写" class="headerlink" title="1.1 @Override(重写)"></a>1.1 @Override(重写)</h4><ul><li>限定某个方法，是重写父类方法，该注解只能用于方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">(&#123;</span></span><br><span class="line"><span class="params">System.out.println(<span class="string">&quot;Father fly..&quot;</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"><span class="meta">@Override</span> <span class="comment">//说明</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Son fly...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Override表示指定重写父类的方法(从编译层面验证)，如果父类没有fly方法，则会报错</li><li>如果不写@Override注解，而父类仍有public void fly(){} ,仍然构成重写</li><li>@Override只能修饰方法，不能修饰其它类，包，属性等等</li><li>查看@Override注解源码为@Target(ElementType.METHOD),说明只能修饰方法</li></ul><h4 id="1-2-Deprecated"><a href="#1-2-Deprecated" class="headerlink" title="1.2 @Deprecated"></a>1.2 <del>@Deprecated</del></h4><ul><li>用于表示某个程序元素（类、方法等）<strong>已过时</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> String rame;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Father fly... &quot;</span>); &#125;</span><br><span class="line"><span class="comment">//@Deprecated的说明几点.</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">(H&#123;</span></span><br><span class="line"><span class="params">System.out.println(<span class="string">&quot;Father sing... &quot;</span>)</span>;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"><span class="comment">//Override使用说明</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123; </span><br><span class="line">System.out.println(<span class="string">&quot;Son f.y... &quot;</span>); </span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>可以修饰方法，类，宇段，包，参数等等</li><li>@Deprecated的作用可以做到新旧版本的兼容和过渡</li></ul><h4 id="1-3-SuppressWarnings-抑制警告"><a href="#1-3-SuppressWarnings-抑制警告" class="headerlink" title="1.3 @SuppressWarnings(抑制警告)"></a>1.3 @SuppressWarnings(抑制警告)</h4><ul><li>抑制编译器警告</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><span class="comment">//抑制所有警告</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cellphone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWork</span><span class="params">(Calculator calculator, <span class="type">double</span> n1, <span class="type">double</span> n2)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> calculator.work(n1, n2);</span><br><span class="line">        System.out.println(<span class="string">&quot;计算的结果为：&quot;</span> + res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 当我们不希 望看到这些警告的时候，可以使用SuppressWarnings注解 来抑制警告信息</span></span><br><span class="line"><span class="comment">//2. 在&#123;&quot;&quot;&#125;中，可以写入你希望抑制(不显示)警告信息</span></span><br><span class="line"><span class="comment">//3. 可以指定的警告类型有</span></span><br><span class="line">all<span class="comment">//抑制所有警告</span></span><br><span class="line">boxing<span class="comment">//抑制与封装/拆装作业相关的警告</span></span><br><span class="line">cast<span class="comment">//抑制与强制转型作业相关的警告</span></span><br><span class="line">dep-ann<span class="comment">//抑制与淘汰注释相关的警告</span></span><br><span class="line">deprecation<span class="comment">//抑制与淘汰的相关警告</span></span><br><span class="line">fallthrough<span class="comment">//抑制与switch陈述式中遗漏break相关的警告</span></span><br><span class="line"><span class="keyword">finally</span><span class="comment">//抑制与未传回finally区块相关的警告</span></span><br><span class="line">hiding<span class="comment">//抑制与隐藏变数的区域变数相关的警告</span></span><br><span class="line">incomplete-<span class="keyword">switch</span><span class="comment">//,抑制与switch陈述式(enum case)中 遗漏项目相关的警告</span></span><br><span class="line">javadoc<span class="comment">//抑制与javadoc相关的警告</span></span><br><span class="line">nls<span class="comment">//抑制与非nls字串文字相关的警告</span></span><br><span class="line">nuLL<span class="comment">//抑制与空值分析相关的警告</span></span><br><span class="line">rawtypes<span class="comment">//抑制与使用raw类型相关的警告,忽略没有指定泛型的警告</span></span><br><span class="line">resource<span class="comment">//抑制与使用Closeable类型的资源相关的警告</span></span><br><span class="line">restriction<span class="comment">//抑制与使用不建议或禁止参照相关的警告</span></span><br><span class="line">serial<span class="comment">//抑制与可序列化的类别遗漏serialVersionUID栏位相关的警告</span></span><br><span class="line"><span class="keyword">static</span>-access<span class="comment">//抑制与静态存取不正确相关的警告</span></span><br><span class="line"><span class="keyword">static</span>-method<span class="comment">//抑制与可能宣告为static的方法相关的警告</span></span><br><span class="line"><span class="built_in">super</span><span class="comment">//抑制与置换方法相关但不含super呼叫的警告</span></span><br><span class="line">synthetic-access<span class="comment">//抑制与内部类别的存取未最佳化相关的警告</span></span><br><span class="line">sync-override<span class="comment">//抑制因为置换同步方法而遗漏同步化的警告</span></span><br><span class="line">unchecked<span class="comment">//忽略没有检查的警告</span></span><br><span class="line">unqualified-field-access<span class="comment">//抑制与栏位存取不合格相关的警告</span></span><br><span class="line">unused<span class="comment">//忽略没有使用某个变量的警告</span></span><br></pre></td></tr></table></figure><h2 id="四、元注解"><a href="#四、元注解" class="headerlink" title="四、元注解"></a>四、元注解</h2><h3 id="1-Retention"><a href="#1-Retention" class="headerlink" title="1. Retention"></a>1. Retention</h3><ul><li><p>指定注解的作用范围，三种值：SOURCE、CLASS、RUNTIME</p></li><li><p>只能用于修饰一个Annotation定义，用于指定该Annotation可以保留多长时间，@Rentention包含一个RetentionPolicy 类型的成员变量，使用@Rentention时必须为该value成员变量指定值</p></li></ul><h4 id="1-1-SOURCE"><a href="#1-1-SOURCE" class="headerlink" title="1.1 SOURCE"></a>1.1 SOURCE</h4><ul><li>RetentionPolicy.SOURCE：编译器使用后，直接丢弃这种策略的注释</li></ul><h4 id="1-2-CLASS"><a href="#1-2-CLASS" class="headerlink" title="1.2 CLASS"></a>1.2 CLASS</h4><ul><li>RetentionPolicy.CLASS：编译器将把注释记录在class文件中.当运行Java程序时， JVM不会保留注解。这是默认值</li></ul><h4 id="1-3-RUNTIME"><a href="#1-3-RUNTIME" class="headerlink" title="1.3 RUNTIME"></a>1.3 RUNTIME</h4><ul><li>RetentionPolicy.RUNTIME：编译器将把注释记录在class文件中，当运行Java程序时，JVM会保留注释.程序可以通过反射获取该注释</li></ul><h3 id="2-Target"><a href="#2-Target" class="headerlink" title="2. Target"></a>2. Target</h3><ul><li>指定注解可以用在那些地方</li></ul><h3 id="3-Documented"><a href="#3-Documented" class="headerlink" title="3. Documented"></a>3. Documented</h3><ul><li>指定该注解是否会在javadoc体现</li></ul><h3 id="4-Inherited"><a href="#4-Inherited" class="headerlink" title="4. Inherited"></a>4. Inherited</h3><ul><li><p>子类会继承父类注解</p></li><li><p>定义为Documented的注解必须设置Retention值为RUNTIME</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（十二） - 异常</title>
      <link href="/undefined/130c.html"/>
      <url>/undefined/130c.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、异常概念"><a href="#一、异常概念" class="headerlink" title="一、异常概念"></a>一、异常概念</h2><ul><li><p>程序执行中发生的不正常情况称为”异常（Exception）”</p></li><li><p>执行过程中所发生的的异常事件分为两大类：</p><ul><li>Error(错误)： Java虚拟机无法解决的严重问题。如: JVM系统内部错误、资源耗尽等严重情况。比如: StackOverflowError[栈溢出]和OOM(out ofmemory)n Error 是严重错误，程序会崩溃</li><li>Exception：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如空指针访问，试图读取不存在的文件，网络连接中断等等</li></ul></li></ul><h2 id="二、异常体系图"><a href="#二、异常体系图" class="headerlink" title="二、异常体系图"></a>二、异常体系图</h2><img src="/undefined/130c/130c/%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E5%9B%BE.png" class title="异常体系图"><h3 id="1-运行异常"><a href="#1-运行异常" class="headerlink" title="1. 运行异常"></a>1. 运行异常</h3><ul><li>运行时异常，编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序员应该避免其出现的异常。java.lang.RuntimeException类及它的子类都是运行时异常</li><li>对于运行时异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响</li></ul><h4 id="1-1-NullPointerException-空指针异常"><a href="#1-1-NullPointerException-空指针异常" class="headerlink" title="1.1 NullPointerException 空指针异常"></a>1.1 NullPointerException 空指针异常</h4><ul><li>当应用程序试图在需要对象的地方使用null时，抛出该异常</li></ul><h4 id="1-2-ArithmeticException-数学运算异常"><a href="#1-2-ArithmeticException-数学运算异常" class="headerlink" title="1.2 ArithmeticException 数学运算异常"></a>1.2 ArithmeticException 数学运算异常</h4><ul><li>当出现异常的运算条件时，抛出此异常</li></ul><h4 id="1-3-ArrayIndexOutOfBoundsException-数组下标越界异常"><a href="#1-3-ArrayIndexOutOfBoundsException-数组下标越界异常" class="headerlink" title="1.3 ArrayIndexOutOfBoundsException 数组下标越界异常"></a>1.3 ArrayIndexOutOfBoundsException 数组下标越界异常</h4><ul><li>用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引</li></ul><h4 id="1-4-ClassCastException-类型转换异常"><a href="#1-4-ClassCastException-类型转换异常" class="headerlink" title="1.4 ClassCastException 类型转换异常"></a>1.4 ClassCastException 类型转换异常</h4><ul><li>当试图将对象强制转换为不是实例的子类时，抛出该异常</li></ul><h4 id="1-5-NumberFormatException-数字格式不正确异常"><a href="#1-5-NumberFormatException-数字格式不正确异常" class="headerlink" title="1.5 NumberFormatException 数字格式不正确异常"></a>1.5 NumberFormatException 数字格式不正确异常</h4><ul><li>当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常=&gt;使用异常我们可以确保输入是满足条件数字</li></ul><h3 id="2-编译异常"><a href="#2-编译异常" class="headerlink" title="2. 编译异常"></a>2. 编译异常</h3><ul><li>是编译器要求必须处理的异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SQLException <span class="comment">//操作数据库时，查询表可能发生异常</span></span><br><span class="line">lOException <span class="comment">//操作文件时，发生的异常</span></span><br><span class="line">FileNotFoundException <span class="comment">//当操作一个不存在的文件时，发生异常</span></span><br><span class="line">ClassNotFoundException <span class="comment">//加载类，而该类不存在时，异常</span></span><br><span class="line">EOFException <span class="comment">//操作文件，到文件末尾，发生异常</span></span><br><span class="line">IllegalArguementException <span class="comment">//参数异常</span></span><br></pre></td></tr></table></figure><h2 id="三、异常处理"><a href="#三、异常处理" class="headerlink" title="三、异常处理"></a>三、异常处理</h2><ul><li>当异常发生时，对异常的处理的方式</li></ul><h3 id="1-try-catch-finally"><a href="#1-try-catch-finally" class="headerlink" title="1. try-catch-finally"></a>1. try-catch-finally</h3><ul><li>在代码中捕获异常，自行处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//代码可能异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    <span class="comment">//捕获到异常</span></span><br><span class="line">    <span class="comment">//1. 当异常发生时，系统将异常封装成Exception对象e，传递给catch</span></span><br><span class="line">    <span class="comment">//2. 得到异常对象后，根据需求处理</span></span><br><span class="line">    <span class="comment">//3. 如果没有发生异常，catch代码块不执行</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//1. 不管try代码块是否有异常发生，始终都要执行finally代码块</span></span><br><span class="line">    <span class="comment">//2. 通常将是资源的代码，放在finally</span></span><br><span class="line">    <span class="comment">//3. finally代码块可以没有</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-细节"><a href="#1-1-细节" class="headerlink" title="1.1 细节"></a>1.1 细节</h4><ul><li><p>如果异常发生了，则异常发生后面的代码不会执行，直接进入到catch块</p></li><li><p>如果异常没有发生，则顺序执行try的代码块，不会进入到catch</p></li><li><p>如果希望不管是否发生异常，都执行某段代码(比如关闭连接，释放资源等)则使用如下代码- finally {}</p></li><li><p>可以有多个catch语句，捕获不同的异常(进行不同的业务处理)，要求父类异常在后，子类异常在前，比如(Exception 在后，NullPointerException 在前)，如果发生异常，只会匹配一个catch</p><ul><li><p>```java<br>try{<br>}catch(NullPointerException e){<br>}catch(Exception e){<br>}finally{</p><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 可以进行try-finally配合使用，这种用法相当于没有捕获异常，因此程序会直接崩掉。I应用场景，就是执行一段代码，不管是否发生异常，都必须执行某个业务逻辑</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    try&#123;</span><br><span class="line">        //代码</span><br><span class="line">    &#125;finally&#123;</span><br><span class="line">        //总是会执行的代码</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-throws"><a href="#2-throws" class="headerlink" title="2. throws"></a>2. throws</h3><ul><li>如果一个方法(中的语句执行时)可能生成某种异常， 但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理</li><li>在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String file)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"><span class="comment">//读文件的操作可能产生FileNotFoundException类型的异常</span></span><br><span class="line"><span class="type">FilelnputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot; d://aa.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-细节"><a href="#1-细节" class="headerlink" title="1. 细节"></a>1. 细节</h4><ul><li>对于编译异常，程序中必须处理，比如try- catch或者throws</li><li>对于运行时异常，程序中如果没有处理，默认就是throws的方式处理</li><li>子类重写父类的方法时，对抛出异常的规定:子类重写的方法，所抛出的异常类型要么和父类抛出的异常一致， 要么为父类抛出的异常的类型的子类型</li><li>在throws过程中，如果有方法try-catch ,就相当于处理异常，就可以不必throws</li></ul><h3 id="3-自定义异常"><a href="#3-自定义异常" class="headerlink" title="3. 自定义异常"></a>3. 自定义异常</h3><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul><li>当程序中出现了某些”错误”,但该错误信息并没有在Throwable子类中描述处理，这个时候可以自已设计异常类，用于描述该错误信息。</li></ul><h3 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2. 步骤"></a>2. 步骤</h3><ul><li>定义类：自定义异常类名(程序员自己写)继承Exception或RuntimeException</li><li>如果继承Exception，属于编译异常</li><li>如果继承RuntimeException，属于运行异常(-般来说，继承RuntimeException)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">180</span>;</span><br><span class="line">        <span class="comment">//要求范围在0 - 150之间 否则抛出一个自定义异常</span></span><br><span class="line">        <span class="keyword">if</span> (!(age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">150</span>)) &#123;</span><br><span class="line">            <span class="comment">//这里通过构造器 设置信息</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>(<span class="string">&quot;年龄需要在0 - 150之间...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;你的年龄范围正确...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义一个异常</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-throw和throws的区别"><a href="#4-throw和throws的区别" class="headerlink" title="4. throw和throws的区别"></a>4. throw和throws的区别</h3><div class="table-container"><table><thead><tr><th></th><th>意义</th><th>位置</th><th>后面跟的东西</th></tr></thead><tbody><tr><td>throws</td><td>异常处理的一种方式</td><td>方法声明处</td><td>异常类型</td></tr><tr><td>throw</td><td>手动生成异常对象的关键字</td><td>方法体中</td><td>异常对象</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（十四） - 集合</title>
      <link href="/undefined/fc27.html"/>
      <url>/undefined/fc27.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><ul><li>可以动态保存任意多个对象，使用比较方便</li><li>提供了一系列方便的操作对象方法：add、remove、set、get</li><li>使用集合添加、删除新元素代码更加简洁</li></ul><h2 id="二、集合框架体系"><a href="#二、集合框架体系" class="headerlink" title="二、集合框架体系"></a>二、集合框架体系</h2><h3 id="1-单列集合"><a href="#1-单列集合" class="headerlink" title="1. 单列集合"></a>1. 单列集合</h3><img src="/undefined/fc27/fc27/%E5%8D%95%E5%88%97%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png" class title="单列集合框架"><img src="/undefined/fc27/fc27/%E5%8D%95%E5%88%97%E9%9B%86%E5%90%88%E7%B1%BB%E5%9B%BE.png" class title="单列集合类图"><h4 id="1-1-使用"><a href="#1-1-使用" class="headerlink" title="1.1 使用"></a>1.1 使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单列集合 collection</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">arrayList.add( <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">arrayList.add( <span class="string">&quot;tom&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="1-2-Collection接口实现类的特点"><a href="#1-2-Collection接口实现类的特点" class="headerlink" title="1.2 Collection接口实现类的特点"></a>1.2 Collection接口实现类的特点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Collection</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Iterable</span>&lt;E&gt;</span><br></pre></td></tr></table></figure><ul><li>collection实现子类可以存放多个元素,每个元素可以是Object</li><li>有些Collection的实现类,可以存放重复的元素，有些不可以</li><li>有些Collection的实现类，有些是有序的(List)，有些不是有序(Set)</li><li>Collection接口没有直接的实现子类，是通过它的子接口Set 和List来实现的</li></ul><h4 id="1-3-常用方法"><a href="#1-3-常用方法" class="headerlink" title="1.3 常用方法"></a>1.3 常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) add:添加单个元素</span><br><span class="line"><span class="number">2</span>) remove:删除指定元素</span><br><span class="line"><span class="number">3</span>) contains:查找元素是否存在</span><br><span class="line"><span class="number">4</span>) size:获取元素个数</span><br><span class="line"><span class="number">5</span>) isEmpty:判断是否为空</span><br><span class="line"><span class="number">6</span>) clear:清空</span><br><span class="line"><span class="number">7</span>) addAll:添加多个元素</span><br><span class="line"><span class="number">8</span>) containsAll:查找多个元素是否都存在</span><br><span class="line"><span class="number">9</span>) removeAll: 删除多个元素</span><br><span class="line"><span class="number">10</span>)说明:以ArrayList实现类来演示</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionMethods</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add: 添加单个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list.add(<span class="number">10</span>);<span class="comment">//list.add(new Integer(10))</span></span><br><span class="line">        list.add(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove: 删除指定元素</span></span><br><span class="line">        list.remove(<span class="number">0</span>);<span class="comment">//删除第一个元素</span></span><br><span class="line">        list.remove(<span class="literal">true</span>);<span class="comment">//指定删除某个元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//contains: 查找元素是否存在</span></span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;jack&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//size: 获取元素的个数</span></span><br><span class="line">        System.out.println(list.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//isEmpty: 判断是否为空</span></span><br><span class="line">        System.out.println(list.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear: 清空</span></span><br><span class="line">        list.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//addAll: 添加多个元素</span></span><br><span class="line">        list2.add(<span class="string">&quot;西游记&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">        list.addAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//containsAll: 查找多个元素是否都存在</span></span><br><span class="line">        System.out.println(list.containsAll(list2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//removeAll: 删除多个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;水浒传&quot;</span>);</span><br><span class="line">        list.removeAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-遍历方式"><a href="#1-4-遍历方式" class="headerlink" title="1. 4 遍历方式"></a>1. 4 遍历方式</h4><h5 id="1-4-1-Iterator-迭代器"><a href="#1-4-1-Iterator-迭代器" class="headerlink" title="1.4.1 Iterator(迭代器)"></a>1.4.1 Iterator(迭代器)</h5><ul><li><p>Iterator对象称为迭代器，主要用于遍历Collection集合中的元素。</p></li><li><p>所有实现了Collection接口的集合类都有一个iterator()方法,用以返回一个实现了lterator接口的对象,即可以返回一个迭代器。</p></li><li><p>Iterator仅用于遍历集合,Iterator 本身并不存放对象。</p></li><li><p>执行原理：</p><ul><li>```java<br>Iterator iterator = collection.iterator();//得到一个集合的迭代器<br>//方法<br>hasNext();//判断是否还有下一个元素<br>while(iterator.hasNext()) {<pre><code>//next();//指针下移，将下移以后集合位置上的元素返回System.out.println(iterator.next());</code></pre>}<br>//在调用iterator.next()方法之前必须要调用iterator.hasNext()进行检测是否有下一条，如果下一条记录无效，直接调用iterator.next()会抛出NoSuchElementException异常<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 1.4.2 增强for</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//语法</span><br><span class="line">for(元素类型 元素名 : 集合名或者数组名)&#123;</span><br><span class="line">    访问元素</span><br><span class="line">&#125;</span><br><span class="line">//案例</span><br><span class="line">for(Object object : col) &#123;</span><br><span class="line">    System.out.println(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-双列集合"><a href="#2-双列集合" class="headerlink" title="2. 双列集合"></a>2. 双列集合</h3><img src="/undefined/fc27/fc27/%E5%8F%8C%E5%88%97%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png" class title="双列集合框架"><img src="/undefined/fc27/fc27/%E5%8F%8C%E5%88%97%E9%9B%86%E5%90%88%E7%B1%BB%E5%9B%BE.png" class title="双列集合类图"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">hashMap.put(<span class="string">&quot;N01&quot;</span>，<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">hashMap.put( <span class="string">&quot;NO2&quot;</span>，<span class="string">&quot;上海&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="三、List接口"><a href="#三、List接口" class="headerlink" title="三、List接口"></a>三、List接口</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h3><ul><li>List 接口是 Collection 接口的子接口</li><li>List集合类中元素有序(即添加顺序和取出顺序一致)、且可重复</li><li>List集合中的每个元素都有其对应的顺序索引，即支持索引</li><li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置,可以根据序号存取容器中的元素</li><li>JDK API中List接口的实现类有：ArrayList、LinkedList、Vector</li></ul><h4 id="1-1-常用方法"><a href="#1-1-常用方法" class="headerlink" title="1.1 常用方法"></a>1.1 常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List 集合里添加了一些根据索引来操作集合元素的方法</span><br><span class="line"><span class="number">1</span>) <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, Object ele)</span><span class="comment">//在index位置插入ele元素</span></span><br><span class="line"><span class="number">2</span>) <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection eles)</span><span class="comment">//从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line"><span class="number">3</span>) Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span><span class="comment">//获取指定index位置的元素</span></span><br><span class="line"><span class="number">4</span>) <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object obj)</span><span class="comment">//返回obj在集合中首次出现的位置</span></span><br><span class="line"><span class="number">5</span>) <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object obj)</span><span class="comment">//返回obj在当前集合中末次出现的位置</span></span><br><span class="line"><span class="number">6</span>) Object <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span><span class="comment">//移除指定index位置的元素，并返回此元素</span></span><br><span class="line"><span class="number">7</span>) Object <span class="title function_">set</span><span class="params">(<span class="type">int</span> index,Object ele)</span><span class="comment">//设置指定index位置的元素为ele ,相当于是替换</span></span><br><span class="line"><span class="number">8</span>) List <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromlndex, <span class="type">int</span> tolndex)</span><span class="comment">//返回从fromIndex到tolndex位置的子集合</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在指定位置增加 信息</span></span><br><span class="line">        list.add(<span class="number">2</span>, <span class="string">&quot;韩顺平教育&quot;</span>);</span><br><span class="line">        <span class="comment">//输出指定位置1的信息</span></span><br><span class="line">        System.out.println(list.get(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除指定位置的元素</span></span><br><span class="line">        list.remove(<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//替换指定位置的元素</span></span><br><span class="line">        list.set(<span class="number">7</span>, <span class="string">&quot;study java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得迭代器</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环遍历</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;next=&quot;</span> + next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-遍历的三种方式"><a href="#2-遍历的三种方式" class="headerlink" title="2. 遍历的三种方式"></a>2. 遍历的三种方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：使用iterator</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> col.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：使用增强for</span></span><br><span class="line"><span class="keyword">for</span>(Object o : col) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三：使用普通for</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">    System.out.println(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-ArrayList"><a href="#3-ArrayList" class="headerlink" title="3. ArrayList"></a>3. ArrayList</h3><ul><li>permits all elements, including null ,ArrayList可以加入null,并且多个</li><li>ArrayList是由数组来实现数据存储的门</li><li>ArrayList 基本等同于Vector，除了ArrayList是线程不安全(执行效率高）,在多线程情况下，不建议使用</li></ul><h4 id="1-底层分析"><a href="#1-底层分析" class="headerlink" title="1. 底层分析"></a>1. 底层分析</h4><ul><li><p>ArrayList中维护了一个Object类型的数组elementData；transient Object[] elementData;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure></li><li><p>当创建对象时，如果使用的是无参构造器，则初始elementData容量为0 (jdk7是10)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>当添加元素时:先判断是否需要扩容，如果需要扩容，则调用grow方法，否则直接添加元素到合适位置</p></li><li><p>如果使用的是无参构造器，如果第一次添加，需要扩容的话，则扩容elementData为10,如果需要再次扩容的话，则扩容elementData为1.5倍。</p></li><li>如果使用的是指定容量capacity的构造器，则初始elementData容量为capacity</li><li>如果使用的是指定容量capacity的构造器,如果需要扩容，则直接扩容elementData为1.5倍。</li></ul><img src="/undefined/fc27/fc27/ArrayList%E6%BA%90%E7%A0%81%EF%BC%88%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E5%99%A8%EF%BC%89.png" class title="ArrayList源码（无参构造器）"><img src="/undefined/fc27/fc27/ArrayList%E6%BA%90%E7%A0%81%EF%BC%88%E6%9C%89%E5%8F%82%E6%9E%84%E9%80%A0%E5%99%A8%EF%BC%89.png" class title="ArrayList源码（有参构造器）"><h3 id="4-Vector"><a href="#4-Vector" class="headerlink" title="4. Vector"></a>4. Vector</h3><h4 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h4><ul><li><p>Vector底层也是一个对象数组</p><ul><li>```java<br>protected Object[] elementData;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- Vector是线程同步的，即线程安全</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public synchronized E get(int index) &#123;</span><br><span class="line">        if (index &gt;= elementCount) &#123;</span><br><span class="line">    throw new ArraylndexOutOfBoundsException(index);</span><br><span class="line">        &#125;</span><br><span class="line">        return elementData(index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="4-2-比较"><a href="#4-2-比较" class="headerlink" title="4.2 比较"></a>4.2 比较</h4><ul><li>Vector和ArrayList的比较</li></ul><div class="table-container"><table><thead><tr><th></th><th>底层结构</th><th>版本</th><th>线程安全（同步）效率</th><th>扩容倍数</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>jdk1.2</td><td>不安全，效率高</td><td>如果有参构造器1.5倍； 如果是无参构造器 ：1、 第一次10；2、从第二次开始按1.5倍扩容</td></tr><tr><td>Vector</td><td>可变数组Object[]</td><td>jdk1.0</td><td>安全，效率不高</td><td>如果是无参，默认为10，满后按2被进行扩容；如果指定大小，则每次按2倍进行扩容</td></tr></tbody></table></div><h3 id="5-LinkedList"><a href="#5-LinkedList" class="headerlink" title="5. LinkedList"></a>5. LinkedList</h3><ul><li>LinkedList底层实现了双向<strong>链表</strong>和双端<strong>队列</strong>特点</li><li>可以添加任意元素（元素可以重复）,包括null</li><li>线程不安全</li></ul><h4 id="5-1-底层机制"><a href="#5-1-底层机制" class="headerlink" title="5.1 底层机制"></a>5.1 底层机制</h4><ul><li>LinkedList底层维护了一个双向链表</li><li>LinkedList中维护了两个属性first和last分别指向首节点和尾节点</li><li>每个节点(Node对象)，里面又维护了prev、next、item三个属性，其中通过prev指向前一个，通过next指向后一个节点。最终实现双向链表</li><li>所以LinkedList的元素的添加和删除，不是通过数组完成的，相对来说效率较高。</li></ul><img src="/undefined/fc27/fc27/LinkedList%E5%BA%95%E5%B1%82%E6%9C%BA%E5%88%B6.png" class title="LinkedList底层机制"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">smith</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 链接三个结点，形成双向列表  jack &gt; tom &gt; smith</span></span><br><span class="line">        jack.next = tom;</span><br><span class="line">        tom.next = smith;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//smith &gt; tom &gt; jack</span></span><br><span class="line">        smith.pro = tom;</span><br><span class="line">        tom.pro = jack;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">first</span> <span class="operator">=</span> jack;<span class="comment">//让first引用指向jack 就是双向列表的头结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> smith;<span class="comment">//让last引用指向smith 就是双向列表的头结点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从头到尾进行遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;======&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出first信息</span></span><br><span class="line">            System.out.println(first);</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从尾到头遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;======&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (last == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出last信息</span></span><br><span class="line">            System.out.println(last);</span><br><span class="line">            last = last.pro;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//链表添加对象/数据</span></span><br><span class="line">        <span class="comment">//在tom 和smith中插入一个对象 hi</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、先创建一个 Node结点 name 就是hi</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">hi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        hi.next = smith;</span><br><span class="line">        hi.pro = tom;</span><br><span class="line">        smith.pro = hi;</span><br><span class="line">        tom.next = hi;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让first再次指向jack</span></span><br><span class="line"></span><br><span class="line">        first = jack;<span class="comment">//让first引用指向jack，就是双向链表的头结点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从头到尾进行遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;======&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出first信息</span></span><br><span class="line">            System.out.println(first);</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        last = smith;<span class="comment">//让last引用指向smith 就是双向列表的头结点</span></span><br><span class="line">        <span class="comment">//从尾到头遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;======&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (last == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出last信息</span></span><br><span class="line">            System.out.println(last);</span><br><span class="line">            last = last.pro;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个Node 类，Node 对象 表示双向链表的一个结点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object item;<span class="comment">//真正存放数据</span></span><br><span class="line">    <span class="keyword">public</span> Node next;<span class="comment">//指向后一个结点</span></span><br><span class="line">    <span class="keyword">public</span> Node pro;<span class="comment">//指向前一个结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node name=&quot;</span> + item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-比较"><a href="#5-2-比较" class="headerlink" title="5.2 比较"></a>5.2 比较</h4><ul><li>ArrayList和LinkedList的比较</li></ul><div class="table-container"><table><thead><tr><th></th><th>底层结构</th><th>增删的效率</th><th>改查的效率</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>较低；数组扩容</td><td>较高</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>较高，通过链表追加</td><td>较低</td></tr></tbody></table></div><h4 id="5-3-选择"><a href="#5-3-选择" class="headerlink" title="5.3 选择"></a>5.3 选择</h4><ul><li>如何在ArrayList和LinkedList中选择<ul><li>如果改查的操作多，选择ArrayList</li><li>如果增删的操作多，选择LinkedList</li></ul></li></ul><h3 id="6-set接口"><a href="#6-set接口" class="headerlink" title="6. set接口"></a>6. set接口</h3><ul><li>无序（添加和取出的顺序不一致），没有索引</li><li><p>不允许重复元素，最多包含一个null</p></li><li><p>可以使用迭代器和增强for进行遍历，不能使用索引方式进行遍历</p></li></ul><h4 id="6-1-HashSet"><a href="#6-1-HashSet" class="headerlink" title="6.1 HashSet"></a>6.1 HashSet</h4><ul><li><p>HashSet实现了Set接口</p></li><li><p>HashSet实际上是HashMap</p><ul><li>```java<br>public HashSet() {<pre><code>map = new HashMap&lt;&gt;();</code></pre>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 不能有重复元素对象，可以存放null，但只有一个</span><br><span class="line"></span><br><span class="line">- HashSet不保证元素是有序的，取决于hash后，再确定索引的结果</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class HashSet01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashSet set = new HashSet();</span><br><span class="line"></span><br><span class="line">        //1. 在执行add方法后会返回一个boolean值</span><br><span class="line">        //2. 如果添加成功，返回true，否则返回false</span><br><span class="line">        //3. 可以通过remove指定删除某个对象</span><br><span class="line">        System.out.println(set.add(&quot;john&quot;));//T</span><br><span class="line">        System.out.println(set.add(&quot;lucy&quot;));//T</span><br><span class="line">        System.out.println(set.add(&quot;john&quot;));//F</span><br><span class="line">        System.out.println(set.add(&quot;jack&quot;));//T</span><br><span class="line">        System.out.println(set.add(&quot;Rose&quot;));//T</span><br><span class="line"></span><br><span class="line">        set.remove(&quot;john&quot;);</span><br><span class="line">        System.out.println(&quot;set=&quot; + set);</span><br><span class="line"></span><br><span class="line">        //</span><br><span class="line">        set = new HashSet();//置空</span><br><span class="line">        System.out.println(&quot;set=&quot; + set);//0</span><br><span class="line"></span><br><span class="line">        //4. HashSet 不能添加相同的元素/数据？</span><br><span class="line">        set.add(&quot;lucy&quot;);//添加成功</span><br><span class="line">        set.add(&quot;lucy&quot;);//添加失败</span><br><span class="line">        set.add(new Dog(&quot;tom&quot;));//OK 不同的对象只是名字相同</span><br><span class="line">        set.add(new Dog(&quot;tom&quot;));//OK</span><br><span class="line">        System.out.println(&quot;set=&quot; + set);</span><br><span class="line"></span><br><span class="line">        //经典面试题</span><br><span class="line">        set.add(new String(&quot;TP&quot;));//ok</span><br><span class="line">        set.add(new String(&quot;TP&quot;));//添加失败</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;set=&quot; + set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义Dog类</span><br><span class="line">class Dog &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Dog(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Dog&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="6-1-1-底层机制"><a href="#6-1-1-底层机制" class="headerlink" title="6.1.1 底层机制"></a>6.1.1 底层机制</h5><ul><li>HashSet底层是HashMap，HashMap底层是（数组+链表+红黑树）</li></ul><img src="/undefined/fc27/fc27/HashSet%E5%BA%95%E5%B1%82%E6%9C%BA%E5%88%B6.png" class title="HashSet底层机制"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetStructure</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟一个HashSet 的底层 (HashMap的底层结构)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建一个数组，数组的类型是Node[]</span></span><br><span class="line">        <span class="comment">//2. Node[] 数组称为表</span></span><br><span class="line">        Node[] table = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">16</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;table= &quot;</span> + table);</span><br><span class="line">        <span class="comment">//3. 创建结点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jhon&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        table[<span class="number">2</span>] = john;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        john.next = jack;<span class="comment">//将john的next指向jack形成链表</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">rose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;Rose&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        jack.next = rose;<span class="comment">//将rose结点挂载到jack</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">lucy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;Lucy&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        table[<span class="number">3</span>] =  lucy;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;<span class="comment">//结点类</span></span><br><span class="line">    Object item;<span class="comment">//存放数据</span></span><br><span class="line">    Node next;<span class="comment">//指向下个结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object item, Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = item;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            定义一个Employee类，该类包含:private成员属性name,sal,birthday(MyDate类.·型)，</span></span><br><span class="line"><span class="comment">            其中 birthday 为 MyDate类型(属性包括:year, month, day),要求:</span></span><br><span class="line"><span class="comment">            1.创建3个Employee 放入 HashSet中</span></span><br><span class="line"><span class="comment">            2.当name和birthday的值相同时，认为是相同员工，不能添加到HashSe集合中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> <span class="title class_">Employee2</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">8000</span>,<span class="number">2022</span>, <span class="number">3</span>, <span class="number">13</span>));</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> <span class="title class_">Employee2</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">12000</span>,<span class="number">2021</span>, <span class="number">3</span>, <span class="number">13</span>));</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> <span class="title class_">Employee2</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">3000</span>,<span class="number">2022</span>, <span class="number">3</span>, <span class="number">13</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : hashSet) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;员工信息：&quot;</span> + hashSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个Employee类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee2</span> <span class="keyword">extends</span> <span class="title class_">MyDate</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee2</span><span class="params">(String name, <span class="type">double</span> sal, <span class="type">int</span> years, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(years, month, day);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">super</span>.equals(o)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Employee2</span> <span class="variable">employee2</span> <span class="operator">=</span> (Employee2) o;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.equals(employee2) &amp;&amp; Objects.equals(name, employee2.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(<span class="built_in">super</span>.hashCode(), name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;员工姓名：&quot;</span> + name + <span class="string">&quot;薪水：&quot;</span> + sal + <span class="string">&quot;出生年月日：&quot;</span> + getYears() + <span class="string">&quot;-&quot;</span> + getMonth()</span><br><span class="line">                 + <span class="string">&quot;-&quot;</span> + getDay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDate</span> &#123;<span class="comment">//MtDate类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> years;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> years, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.years = years;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">MyDate</span> <span class="variable">myDate</span> <span class="operator">=</span> (MyDate) o;</span><br><span class="line">        <span class="type">return</span> <span class="variable">years</span> <span class="operator">=</span>= myDate.years &amp;&amp; month == myDate.month &amp;&amp; day == myDate.day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(years, month, day);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYears</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> years;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYears</span><span class="params">(<span class="type">int</span> years)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.years = years;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonth</span><span class="params">(<span class="type">int</span> month)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDay</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-LinkedHashSet"><a href="#6-2-LinkedHashSet" class="headerlink" title="6.2 LinkedHashSet"></a>6.2 LinkedHashSet</h4><ul><li>LinkedHashedSet是HashSet的子类</li><li>LinkedHashSet 底层是一个 LinkedHashMap，底层维护了一个数组+双向链表</li><li>LinkedHashSet根据元素的hashCode值米决互元系时仔4直，问时使用链表维护元素的次序(图)，这使得元素看起来是以插入顺序保存的</li><li>LinkedHashSet 不允许添重复元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashSetExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Car 类(属性:name,price)，如果name和price一样,。则认为是相同元素，就不能添加。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">LinkedHashSet</span> <span class="variable">linkedHashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奥拓&quot;</span>, <span class="number">1000</span>));</span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奥迪&quot;</span>, <span class="number">300000</span>));</span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;法拉利&quot;</span>, <span class="number">10000000</span>));</span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奥迪&quot;</span>, <span class="number">300000</span>));</span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;保时捷&quot;</span>, <span class="number">70000000</span>));</span><br><span class="line">        linkedHashSet.add(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奥迪&quot;</span>, <span class="number">300000</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;linkedHashSet= &quot;</span> +linkedHashSet);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car) o;</span><br><span class="line">        <span class="keyword">return</span> Double.compare(car.price, price) == <span class="number">0</span> &amp;&amp; Objects.equals(name, car.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在LinkedHashSet中维护了一个hash表和双向链表(LinkedHashSet有head和 tail )</li><li>每一个节点有before和after属性,这样可以形成双向链表</li><li>在添加一个元素时，先求hash值，在求索引.，确定该元素在table的位置，然后将添加的元素加入到双向链表(如果已经存在，不添加[原则和hashset一样])tail.next = newElement；newElement.pre = tail；tail = newEelment;</li><li>这样的话，我们遍历LinkedHashSet也能确保插入顺序和遍历顺序一致</li></ul><h3 id="7-Map接口"><a href="#7-Map接口" class="headerlink" title="7. Map接口"></a>7. Map接口</h3><h4 id="7-1-实现类的特点（jdk8）"><a href="#7-1-实现类的特点（jdk8）" class="headerlink" title="7.1 实现类的特点（jdk8）"></a>7.1 实现类的特点（jdk8）</h4><ul><li>Map与Collection并列存在。用于保存具有映射关系的数据：Key-Value</li><li>Map 中的key和 value可以是任何引用类型的数据，会封装到HashMap$Node对象中</li><li>Map 中的key 不允许重复，原因和HashSet一样（存放时会比较哈希值）</li><li>Map中的value可以重复</li><li>Map的key可以为null, value也可以为null，注意key 为null, 只能有一个,value为null ,可以多个</li><li>常用String类作为Map的key<br>7) key 和 value之间存在单向一对一关系,即通过指定的key 总能找到对应的value<br>7) 一组k-v是存放在一个Node结点中，因为Node实现了Entry接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Map_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. Map与Collection并列存在, 用于保存具有映射关系的数据：Key-Value(双列元素)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. Map 中的 key 和 value 可以是任何引用类型的数据, 会封装到HashMap$Node 对象中</span></span><br><span class="line">        <span class="comment">//3. Map中的 Key不允许重复,原因和HashSet 一样</span></span><br><span class="line">        <span class="comment">//4. Map 中的 value是可以重复的</span></span><br><span class="line">        <span class="comment">//5. Map 中的 key 可以为null value也可以为null 但key为null，只能有一个；value为null，可以为多个</span></span><br><span class="line">        <span class="comment">//6. 常用String 作为key，其他的也可以</span></span><br><span class="line">        <span class="comment">//7. key 和 value 之间存在单向一对一关系 即通过指定的key 总能找到对应的value</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;no1&quot;</span>, <span class="string">&quot;张三丰&quot;</span>);<span class="comment">//k-v</span></span><br><span class="line">        map.put(<span class="string">&quot;no2&quot;</span>, <span class="string">&quot;张无极&quot;</span>);<span class="comment">//k-v</span></span><br><span class="line">        map.put(<span class="string">&quot;no1&quot;</span>, <span class="string">&quot;张无忌&quot;</span>);<span class="comment">//k-v//当有相同的k 就等价替换</span></span><br><span class="line">        map.put(<span class="string">&quot;no3&quot;</span>, <span class="string">&quot;张无极&quot;</span>);<span class="comment">//k-v</span></span><br><span class="line">        map.put(<span class="literal">null</span>, <span class="literal">null</span>);<span class="comment">//k-v</span></span><br><span class="line">        map.put(<span class="literal">null</span>, <span class="string">&quot;123&quot;</span>);<span class="comment">//k-v等价替换</span></span><br><span class="line">        map.put(<span class="string">&quot;no4&quot;</span>, <span class="literal">null</span>);<span class="comment">//k-v</span></span><br><span class="line">        map.put(<span class="string">&quot;no5&quot;</span>, <span class="literal">null</span>);<span class="comment">//k-v</span></span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;赵明&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Object</span>(), <span class="string">&quot;林白&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过get方法 传入一个key 会返回对应的value</span></span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;no2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-体系图"><a href="#7-2-体系图" class="headerlink" title="7.2 体系图"></a>7.2 体系图</h4><img src="/undefined/fc27/fc27/Map%E4%BD%93%E7%B3%BB%E5%9B%BE.png" class title="Map体系图"><h4 id="7-3-常用方法"><a href="#7-3-常用方法" class="headerlink" title="7.3 常用方法"></a>7.3 常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) put<span class="comment">//添加</span></span><br><span class="line"><span class="number">2</span>) remove<span class="comment">//根据键删除映射关系</span></span><br><span class="line"><span class="number">3</span>) get<span class="comment">//根据键获取值</span></span><br><span class="line"><span class="number">4</span>) size<span class="comment">//获取元素个数</span></span><br><span class="line"><span class="number">5</span>) isEmpty<span class="comment">//判断个数是否为</span></span><br><span class="line"><span class="number">6</span>) clear<span class="comment">//清除</span></span><br><span class="line"><span class="number">7</span>) containsKey<span class="comment">//查找键是否存在</span></span><br></pre></td></tr></table></figure><h4 id="7-4-遍历方法"><a href="#7-4-遍历方法" class="headerlink" title="7.4 遍历方法"></a>7.4 遍历方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) containsKey<span class="comment">//查找键是否存在</span></span><br><span class="line"><span class="number">2</span>) keySet<span class="comment">//获取所有的键</span></span><br><span class="line"><span class="number">3</span>) entrySet<span class="comment">//获取所有关系</span></span><br><span class="line"><span class="number">4</span>) values<span class="comment">//获取所有的值</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapFor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;邓超&quot;</span>,<span class="string">&quot;孙俪&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;王宝强&quot;</span>,<span class="string">&quot;马蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;宋喆&quot;</span>,<span class="string">&quot;马蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;刘令博&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="literal">null</span>,<span class="string">&quot;刘亦菲&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;鹿晗&quot;</span>,<span class="string">&quot;关晓彤&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一组 ：先取出 所有的key 通过key 取出对应的value</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">keySet</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">        <span class="comment">//(1) 增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------第一种方法------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object key :keySet) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;-&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------第二种方式-----&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;-&quot;</span> + map.get(key));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二组：把所有的Valus 取出</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line">        <span class="comment">//(1) 增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----取出所有的valuse 增强for----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object key : values) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;value &quot;</span> + values);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----取出所有的valuse 迭代器----&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> values.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span>  iterator1.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;values &quot;</span> + values);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三组：通过EntrySet 来获取k-v</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();<span class="comment">//EntrySet&lt;Map.Entry&lt;k,v&gt;&gt;</span></span><br><span class="line">        <span class="comment">//(1) 增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------使用EntrySet 的 for增强(第3种)---&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object entry : entrySet) &#123;</span><br><span class="line">            <span class="comment">//将entry转成map.entry</span></span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">            System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> +  m.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------使用EntrySet 的 迭代器(第4种)---&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">entry</span> <span class="operator">=</span>  iterator2.next();</span><br><span class="line">            <span class="comment">//System.out.println(entry.getClass());//HashMap$Node-实现-&gt; Map.Entry(getKey, getValues)</span></span><br><span class="line">            <span class="comment">//向下转型</span></span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">m1</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">            System.out.println(m1.getKey() + <span class="string">&quot;-&quot;</span> + m1.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-5-HashMap"><a href="#7-5-HashMap" class="headerlink" title="7.5 HashMap"></a>7.5 HashMap</h4><ul><li>Map接口的常用实现类:HashMap、Hashtable和Properties</li><li>HashMap是 Map 接口使用频率最高的实现类</li><li>HashMap 是以 key-val对的方式来存储数据(HashMap$Node类型)</li><li>key 不能重复，但是值可以重复，允许使用null键和null值</li><li>如果添加相同的key，则会覆盖原来的key-val，等同于修改。(key不会替换，val会替换)</li><li>与HashSet一样，不保证映射的顺序，因为底层是以hash表的方式来存储的(jdk8的hashMap底层数组+链表+红黑树)</li><li>HashMap没有实现同步，因此是线程不安全的，方法没有做同步互斥的操作，没有synchronized</li></ul><h5 id="7-5-1-底层机制"><a href="#7-5-1-底层机制" class="headerlink" title="7.5.1 底层机制"></a>7.5.1 底层机制</h5><img src="/undefined/fc27/fc27/HashMap%E5%BA%95%E5%B1%82%E6%9C%BA%E5%88%B6.png" class title="HashMap底层机制"><h5 id="7-5-2-扩容机制"><a href="#7-5-2-扩容机制" class="headerlink" title="7.5.2 扩容机制"></a>7.5.2 扩容机制</h5><ul><li>HashMap底层维护了Node类型的数组table，默认为null</li><li>当创建对象时，将加载因子(loadfactor)初始化为0.75</li><li>当添加key-val时，通过key的哈希值得到在table的索引。然后判断该索引处是否有元素，如果没有元素直接添加。如果该索引处有元素，继续判断该元素的key是否和准备加入的key相等，如果相等，则直接替换val；如果不相等需要判断是树结构还是链表结构，做出相应处理。如果添加时发现容量不够，则需要扩容</li><li>第1次添加，则需要扩容table容量为16，临界值(threshold)为12</li><li>以后再扩容，则需要扩容table容量为原来的2倍，临界值为原来的2倍，即24，依次类推</li><li>在Java8中，如果一条链表的元素个数超过TREEIFY_THRESHOLD(默认是8)，并且table的大小 &gt;= MIN TREEIFY_CAPACITY(默认64),就会进行树化(红黑树)</li></ul><h4 id="7-6-HashTable"><a href="#7-6-HashTable" class="headerlink" title="7.6 HashTable"></a>7.6 HashTable</h4><ul><li>存放的元素是键值对：即K-V</li><li>hashTable的键和值都不能为null</li><li>hashTable使用方法基本上和HashMap一样</li><li>hashTable是线程安全的，hashMap是线程不安全的</li></ul><h4 id="7-7-Hashtable和HashMap对比"><a href="#7-7-Hashtable和HashMap对比" class="headerlink" title="7.7 Hashtable和HashMap对比"></a>7.7 Hashtable和HashMap对比</h4><div class="table-container"><table><thead><tr><th></th><th>版本</th><th>线程安全（同步）</th><th>效率</th><th>允许null键null值</th></tr></thead><tbody><tr><td>HashMap</td><td>1.2</td><td>不安全</td><td>高</td><td>可以</td></tr><tr><td>Hashtable</td><td>1.0</td><td>安全</td><td>较低</td><td>不可以</td></tr></tbody></table></div><h3 id="8-Properties"><a href="#8-Properties" class="headerlink" title="8. Properties"></a>8. Properties</h3><ul><li>通常作为配置文件</li><li>Properties类继承自Hashtable类并且实现了Map接口，也是使用一种键值对的形式来保存数据</li><li>使用特点和Hashtable类似</li><li>Properties 还可以用于从 xxx.properties文件中，加载数据到Properties类对象，并进行读取和修改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">properties.put(<span class="string">&quot;john&quot;</span>,<span class="number">100</span>);</span><br><span class="line">properties.put(<span class="literal">null</span>, <span class="number">100</span>);</span><br><span class="line">properties.put(<span class="string">&quot;john&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">properties.put(<span class="string">&quot;lucy&quot;</span>,<span class="number">100</span>);</span><br><span class="line">properties.put(<span class="string">&quot;lic&quot;</span>,<span class="number">100</span>);</span><br><span class="line">properties.put(<span class="string">&quot;lic&quot;</span>, <span class="number">88</span>);</span><br><span class="line">System.out.println(properties);</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">properties.remove(<span class="string">&quot;lic&quot;</span>);</span><br><span class="line"><span class="comment">//改</span></span><br><span class="line">properties.put(<span class="string">&quot;john&quot;</span>，<span class="string">&quot;北京大学&quot;</span>);</span><br><span class="line">System.out.println(properties);</span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">System.out.println(properties.get(<span class="string">&quot;john&quot;</span>));</span><br><span class="line">System.out.println(properties.getProperty(<span class="string">&quot;john&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="9-小结"><a href="#9-小结" class="headerlink" title="9.  小结"></a>9.  小结</h3><ul><li>先判断存储的类型(一组对象[单列]或一组键值对[双列])</li><li>一组对象[单列]:Collection接口<ul><li>允许重复：List</li><li>增删多：LinkedList[底层维护了一个双向链表]</li><li>改查多： ArrayList[底层维护 Object类型的可变数组]</li></ul></li><li>不允许重复：Set<ul><li>无序：HashSet[底层是HashMap，维护了一个哈希表即(数组+链表+红黑树)]</li><li>排序：TreeSet</li><li>插入和取出顺序一致：LinkedHashSet，维护数组+双向链表</li></ul></li><li>一组键值对[双列]：Map<ul><li>键无序：HashMap [底层是：哈希表 jdk7：数组+链表，jdk8：数组+链表+红黑树]键</li><li>排序:TreeMap</li><li>键插入和取出顺序一致： LinkedHashMap</li><li>读取文件Properties</li></ul></li></ul><h2 id="三、Collection工具类"><a href="#三、Collection工具类" class="headerlink" title="三、Collection工具类"></a>三、Collection工具类</h2><ul><li>Collections是一个操作 Set、List和Map等集合的工具类</li><li>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作</li></ul><h3 id="1-排序操作（均为static方法）"><a href="#1-排序操作（均为static方法）" class="headerlink" title="1. 排序操作（均为static方法）"></a>1. 排序操作（均为static方法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) reverse(List)<span class="comment">//反转 List 中元素的顺序</span></span><br><span class="line"><span class="number">2</span>) shuffle(List)<span class="comment">//对 List集合元素进行随机排序</span></span><br><span class="line"><span class="number">3</span>) sort(List)<span class="comment">//根据元素的自然顺序对指定List 集合元素按升序排序</span></span><br><span class="line"><span class="number">4</span>) sort(List,Comparator)<span class="comment">//根据指定的Comparator产生的顺序对List集合元素进行排序</span></span><br><span class="line"><span class="number">5</span>) swap(List,<span class="type">int</span>,<span class="type">int</span>)<span class="comment">//将指定list集合中的i处元素和j处元素进行交换</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Collections_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 创建ArrayList集合 用于测试</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;king&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;milan&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            1) reverse(List):反转List中元素的顺序</span></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;反转List中元素的顺序 &quot;</span> + list);</span><br><span class="line"><span class="comment">//            2) shuffle(List):对List集合元素进行随机排序</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;随机排序 &quot;</span> + list);</span><br><span class="line"><span class="comment">//            3) sort(List):根据元素的自然顺序对指定List集合元素按升序排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素的自然顺序 &quot;</span> + list);</span><br><span class="line"><span class="comment">//            4) sort(List, Comparator):根据指定的Comparator 产生的顺序对List集合元素进行排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ((String)o1).length() - ((String)o2).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定排序后的情况 &quot;</span> + list);</span><br><span class="line"><span class="comment">//            5) swap(List, int, int):将指定 list集合中的i处元素和j处元素进行交换</span></span><br><span class="line"></span><br><span class="line">        Collections.swap(list, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list集合交换后的 &quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1) Object max(Collection):根据元素的自然顺序，返回给定集合中的最大元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;自然顺序最大元素=&quot;</span> + Collections.max(list));</span><br><span class="line"><span class="comment">//        2) Object max(Collection, Comparator):根据Comparator 指定的顺序.返回给定集合中的最大元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Comparator 指定的顺序= &quot;</span> + Collections.max(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ((String)o1).length() - ((String)o2).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line"><span class="comment">//        3) Object min(Collection)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;自然顺序最小元素=&quot;</span> + Collections.min(list));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4) Object min(Collection,Comparator)</span></span><br><span class="line"><span class="comment">//        5) int frequency(Collection, Object):返回指定集合中指定元素的出现次数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;tom出现的次数=&quot;</span> + Collections.frequency(list, <span class="string">&quot;tom&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        6) void copy(List dest,List src):将src中的内容复制到dest中</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            dest.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拷贝</span></span><br><span class="line">        Collections.copy(dest,list);</span><br><span class="line">        System.out.println(<span class="string">&quot;dest= &quot;</span> + dest);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        7) boolean replaceAll(List list,Object oldVal, Object newVal):使用新值替换 List 对象的所有旧值</span></span><br><span class="line">        </span><br><span class="line">        Collections.replaceAll(list,<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;hy&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;替换后的list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-查找、替换"><a href="#2-查找、替换" class="headerlink" title="2. 查找、替换"></a>2. 查找、替换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) Object <span class="title function_">max</span><span class="params">(Collection)</span><span class="comment">//根据元素的自然顺序，返回给定集合中的最大元素</span></span><br><span class="line"><span class="number">2</span>) Object <span class="title function_">max</span><span class="params">(Collection, Comparator)</span><span class="comment">//根据Comparator 指定的顺序返回给定集合中的最大元素</span></span><br><span class="line"><span class="number">3</span>) Object <span class="title function_">min</span><span class="params">(Collection)</span></span><br><span class="line"><span class="number">4</span>) Object <span class="title function_">min</span><span class="params">(Collection,Comparator)</span></span><br><span class="line"><span class="number">5</span>) <span class="type">int</span> <span class="title function_">frequency</span><span class="params">(Collection,Object)</span><span class="comment">//返回指定集合中指定元素的出现次数</span></span><br><span class="line"><span class="number">6</span>) <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(List dest,List src)</span><span class="comment">//将src中的内容复制到dest中</span></span><br><span class="line"><span class="number">7</span>) <span class="type">boolean</span> <span class="title function_">replaceAll</span><span class="params">(List list,Object oldVal, Object newVal)</span><span class="comment">//使用新值替换 List 对象的所有旧值</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（二十五） - JDBC</title>
      <link href="/undefined/5c27.html"/>
      <url>/undefined/5c27.html</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>作用：为访问不同的数据库提供了统一的接口</li><li>JDBC API是Java提供一套基于数据库操作的接口API</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="/undefined/5c27/JDBC原理.png" alt="JDBC原理"></p><h3 id="JDBC程序编写步骤"><a href="#JDBC程序编写步骤" class="headerlink" title="JDBC程序编写步骤"></a>JDBC程序编写步骤</h3><h4 id="注册驱动"><a href="#注册驱动" class="headerlink" title="注册驱动"></a>注册驱动</h4><ul><li>加载Driver类</li></ul><p><img src="/undefined/5c27/mysql驱动jar包.png" alt="mysql驱动jar包"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">准备工作：   在项目下创建一个文件夹libs</span></span><br><span class="line"><span class="comment">将mysql.jar拷贝到目录下 点击add to project 加入到项目</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1. 注册驱动</span></span><br><span class="line"><span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>();<span class="comment">//创建Driver对象 驱动</span></span><br></pre></td></tr></table></figure><h3 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h3><ul><li>得到Connection</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 得到连接</span></span><br><span class="line"><span class="comment">//(1) jdbc:mysql://  规定好的表示协议，通过jdbc的方式连接mysql</span></span><br><span class="line"><span class="comment">//(2) localhost 主机  表示ip地址</span></span><br><span class="line"><span class="comment">//(3) 3306  表示端口</span></span><br><span class="line"><span class="comment">//(4) study 表示连接到 mysql study的那个数据库</span></span><br><span class="line"><span class="comment">//(5) mysql的连接本质就是网络连接 socket</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/study&quot;</span>;</span><br><span class="line"><span class="comment">//将 用户名和密码放入到Properties 对象</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// user 和 password 是规定好的 不可以更改 值根据实际情况填写</span></span><br><span class="line">properties.setProperty(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>);<span class="comment">//用户</span></span><br><span class="line">properties.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);<span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);<span class="comment">//获取连接</span></span><br></pre></td></tr></table></figure><h3 id="执行DML语句（增删改查）"><a href="#执行DML语句（增删改查）" class="headerlink" title="执行DML语句（增删改查）"></a>执行DML语句（增删改查）</h3><ul><li>发送sql语句给mysql执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. 执行sql</span></span><br><span class="line"><span class="comment">//String sql = &quot;insert into actor values(1, &#x27;刘德华&#x27;, &#x27;男&#x27;, &#x27;1970-11-11&#x27;, &#x27;110&#x27;)&quot;;</span></span><br><span class="line"><span class="comment">//String sql = &quot;update actor set name = &#x27;周星驰&#x27; where id = 1&quot;;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from actor where id = 1&quot;</span>;</span><br><span class="line"><span class="comment">// 执行前先获得statement对象</span></span><br><span class="line"><span class="comment">// statement 用于返回静态SQL语句并返回其生成的结果对象</span></span><br><span class="line"><span class="comment">// 使用statement 会存在sql注入问题 推荐使用preparedStatement 可防止此问题</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connect.createStatement();</span><br><span class="line"><span class="comment">// 如果是dml 语句 返回的就是影响的行数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;成功&quot;</span> : <span class="string">&quot;失败&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h3><ul><li>关闭相关连接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4. 关闭连接资源</span></span><br><span class="line">statement.close();</span><br><span class="line">connect.close();</span><br></pre></td></tr></table></figure><h2 id="连接数据库的方式"><a href="#连接数据库的方式" class="headerlink" title="连接数据库的方式"></a>连接数据库的方式</h2><h3 id="获取Driver实现类对象"><a href="#获取Driver实现类对象" class="headerlink" title="获取Driver实现类对象"></a>获取Driver实现类对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1获取Driver实现类对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect01</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/study&quot;</span>;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>);<span class="comment">//用户</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);<span class="comment">//密码</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;方式1：&quot;</span> + connect);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="通过反射"><a href="#通过反射" class="headerlink" title="通过反射"></a>通过反射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式2 -- 通过反射</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect02</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;</span><br><span class="line">    Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/study&quot;</span>;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.setProperty(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>);<span class="comment">//用户</span></span><br><span class="line">    properties.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);<span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line">    System.out.println(<span class="string">&quot;方式2：&quot;</span> + connect);</span><br></pre></td></tr></table></figure><h3 id="使用DriverManager-替代Driver"><a href="#使用DriverManager-替代Driver" class="headerlink" title="使用DriverManager 替代Driver"></a>使用DriverManager 替代Driver</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式3 使用DriverManager 替代Driver 进行统一管理</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect03</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;</span><br><span class="line">    </span><br><span class="line">    Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建url  和 user 和 password</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/study&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    DriverManager.registerDriver(driver);<span class="comment">//注册Driver驱动</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    System.out.println(<span class="string">&quot;第三种方式：&quot;</span> + connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Class-forName-自动完成注册驱动"><a href="#使用Class-forName-自动完成注册驱动" class="headerlink" title="使用Class.forName 自动完成注册驱动"></a>使用Class.forName 自动完成注册驱动</h3><ul><li><strong>推荐使用</strong></li><li>mysql驱动5.1.6可以无需Class.forName(“com.mysql.jdbc.Driver”);</li><li>从jdk1.5以后使用了jdbc4，不再需要显示调用class.forName()，注册驱动而是自动调用驱动jar包下的META-INTF\services\java.sql.Driver文本中的类名去注册</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式4 使用Class.forName 自动完成注册驱动 简化代码</span></span><br><span class="line"><span class="comment">//这种方式获取连接使用最多 推荐使用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect04</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">    <span class="comment">//使用反射加载Driver类</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建url  和 user 和 password</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/study&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    System.out.println(<span class="string">&quot;第4种方式：&quot;</span> + connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="class-froName-和-配置文件"><a href="#class-froName-和-配置文件" class="headerlink" title="class.froName 和 配置文件"></a>class.froName 和 配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式5  ,在方式4的基础改进  增加配置文件，让mysql更加灵活</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect05</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过Properties 对象获取配置文件信息</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Class.forName(driver);</span><br><span class="line"></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    System.out.println(<span class="string">&quot;第5种方式：&quot;</span> + connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="resultSet结果集"><a href="#resultSet结果集" class="headerlink" title="resultSet结果集"></a>resultSet结果集</h2><ul><li><p>表示数据库结果集的数据表</p></li><li><p>ResultSet对象保持一个光标指向其当前的数据行。最开始光标位于第一行之前</p></li><li><p>next方法将光标移动到下一行，ResultSet对象中没有更多行时返回false</p><p><img src="/undefined/5c27/ResultSet结果集.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSet_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取配置文件中的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 加载Driver驱动</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 得到Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. while 取出数据</span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next()) &#123; <span class="comment">//光标向后移动，没有更多行就返回 false</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="number">1</span>);<span class="comment">//获取该列第1行</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="number">2</span>);<span class="comment">//获取该列第2行</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getString(<span class="number">3</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> resultSet.getDate(<span class="number">4</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> resultSet.getString(<span class="number">5</span>);</span><br><span class="line">            System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + sex + <span class="string">&quot;\t&quot;</span> + date + <span class="string">&quot;\t&quot;</span> + phone );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 关闭资源</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/undefined/5c27/ResultSet存储.png"></p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><ul><li>Statement对象用于执行静态SQL语句并返回其生成的结果的对象</li><li>在连接建立后，需要对数据库进行访问，执行命名或是SQL语句可以通过 Statement[存在SQL注入]、PreparedStatement[预处理]、CallableStatement [存储过程] </li><li><strong>Statement对象执行SQL语句,存在SQL注入风险</strong></li><li>SQL注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的SQL语句段或命令，恶意攻击数据库</li><li><strong>要防范SQL注入</strong>，只要用<strong>PreparedStatement(从Statement扩展而来)取代 Statement</strong>就可以了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Statement_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//statement 存在sql注入问题 即利用字符串拼接问题 获取数据库的数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入用户名：&quot;</span>);<span class="comment">//输入名字  1&#x27; or</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine();<span class="comment">// 这里不能使用next() 因为遇到空格会报错</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入密码：&quot;</span>);<span class="comment">//输入万能密码 or &#x27;1&#x27; = &#x27;1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_pwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取配置文件中的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载Driver驱动</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from admin where name = &#x27;&quot;</span> + admin_name + <span class="string">&quot;&#x27; and pwd = &#x27;&quot;</span> + admin_pwd + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登入成功...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登入失败...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PreparedStatement-预处理"><a href="#PreparedStatement-预处理" class="headerlink" title="PreparedStatement 预处理"></a>PreparedStatement 预处理</h2><ul><li>PreparedStatement 执行的SQL语句中的参数用问号?)来表示,调用PreparedStatement对象的setXxx()方法来设置这些参数. setXxx()方法有两个参数，第一个参数是要设置的SQL语句中的参数的索引(从1开始)，第二个是设置的SQL语句中的参数的值</li><li>调用executeQuery()，返回ResultSet 对象</li><li>调用executeUpdate():执行更新,包括增、删、修改</li></ul><h3 id="executeQuery-执行查询操作"><a href="#executeQuery-执行查询操作" class="headerlink" title="executeQuery() 执行查询操作"></a>executeQuery() 执行查询操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatement_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine();<span class="comment">// 这里不能使用next() 因为遇到空格会报错</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_pwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取配置文件中的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载Driver驱动</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//preparedStatement 是实现了PreparedStatement接口的实现类的对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from admin where name = ? and pwd = ?&quot;</span>;<span class="comment">//问号是占位符</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给？ 赋值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>,admin_name);<span class="comment">//第一个参数指第几个问号，第二个参数指给这个问号赋的值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,admin_pwd);</span><br><span class="line"></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();<span class="comment">//查询并返回ResultSet结果集</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登入成功...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登入失败...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="executeUpdate-执行DML操作"><a href="#executeUpdate-执行DML操作" class="headerlink" title="executeUpdate() 执行DML操作"></a>executeUpdate() 执行DML操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatementDML</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine();<span class="comment">// 这里不能使用next() 因为遇到空格会报错</span></span><br><span class="line"><span class="comment">//        System.out.print(&quot;请输入密码：&quot;);</span></span><br><span class="line"><span class="comment">//        String admin_pwd = scanner.nextLine();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取配置文件中的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载Driver驱动</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//preparedStatement 是实现了PreparedStatement接口的实现类的对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加记录</span></span><br><span class="line">        <span class="comment">//String sql = &quot;insert into admin values(?,?)&quot;;//问号是占位符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改记录</span></span><br><span class="line">        <span class="comment">//String sql = &quot;update admin set pwd = ? where name = ?&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除记录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from admin where name = ?&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给？ 赋值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>,admin_name);</span><br><span class="line">        <span class="comment">//preparedStatement.setString(1,admin_pwd);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(i &gt; <span class="number">0</span> ? <span class="string">&quot;成功..&quot;</span> : <span class="string">&quot;失败...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC-API"><a href="#JDBC-API" class="headerlink" title="JDBC API"></a>JDBC API</h2><p><img src="/undefined/5c27/JDBCAPI.png"></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>JDBC程序中当一个Connection对象创建时，<strong>默认情况下是自动提交事务</strong>，每执行一个SQL语句，如果执行成功，就会像数据库自动提交，而且不能回滚</li><li>JDBC程序中为了让多个SQL语句作为一个整体执行，需要使用事务</li><li>调用Connection的setAutoCommit(false) 可以取消自动提交事务</li><li>在所有的SQL语句都执行成功后，调用Connection的commit()方法提交事务</li><li>在其中某个操作失败或者异常时，调用Connection的rollBack()方法回滚事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transaction_</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有使用事务</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">noTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 得到数据库连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2. 执行sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance - 100 where id = 1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance + 100 where id = 2&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();<span class="comment">//在默认情况下 connection 是默认自动提交的</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.executeUpdate();<span class="comment">//执行第一条sql</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;<span class="comment">//抛出异常</span></span><br><span class="line"></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql2);</span><br><span class="line">            preparedStatement.executeUpdate();<span class="comment">//执行第二条sql</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>, connection, preparedStatement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用事务</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 得到数据库连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2. 执行sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance - 100 where id = 1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance + 100 where id = 2&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();<span class="comment">//在默认情况下 connection 是默认自动提交的</span></span><br><span class="line">            <span class="comment">//将connection 设置为不自动提交</span></span><br><span class="line">            <span class="comment">//这里会自动开启事务</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.executeUpdate();<span class="comment">//执行第一条sql</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//int i = 1 / 0;//抛出异常</span></span><br><span class="line"></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql2);</span><br><span class="line">            preparedStatement.executeUpdate();<span class="comment">//执行第二条sql</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">//进行回滚, 撤销执行的sql  默认回滚到事务开始的状态</span></span><br><span class="line">            System.out.println(<span class="string">&quot;执行发生了异常，撤销执行的sql...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>, connection, preparedStatement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><ul><li>当需要成批插入或者更新记录时，可以采用Java的批量更新机制</li><li>如果要使用批处理功能，JDBC连接Mysql时，需要在url中添加参数？rewriteBatchedStatements=true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/study?rewriteBatchedStatements=true</span></span><br></pre></td></tr></table></figure><ul><li>批处理通常和PreparedStatement一起搭配使用，可以减少编译次数，减少运行次数，提高效率</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批处理方法</span></span><br><span class="line">addBatch();<span class="comment">//添加需要批处理的SQL语句或参数</span></span><br><span class="line">executeBatch();<span class="comment">//执行批处理的语句</span></span><br><span class="line">clearnBatch();<span class="comment">//清空批处理语句</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Batch_</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//传统方法 添加5000条数据到admin2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">noBatch</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into admin2 values(null, ?, ?)&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();<span class="comment">//开始时间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span> + i);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();<span class="comment">//结束时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;传统耗时 = &quot;</span> + (end - start));<span class="comment">//传统耗时 = 10208</span></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        JDBCUtils.close(<span class="literal">null</span>, connection, preparedStatement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//使用批量方式 添加5000条数据到admin2</span></span><br><span class="line">    <span class="comment">//配置文件中需添加  ?rewriteBatchedStatements=true 开启批处理</span></span><br><span class="line">    <span class="comment">//url=jdbc:mysql://localhost:3306/study?rewriteBatchedStatements=true</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into admin2 values(null, ?, ?)&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();<span class="comment">//开始时间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span> + i);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">            <span class="comment">//将sql语句加入到 批处理包中</span></span><br><span class="line">            preparedStatement.addBatch();</span><br><span class="line">            <span class="comment">//当有1000条记录时 在批量执行</span></span><br><span class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">1000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                preparedStatement.executeBatch();</span><br><span class="line">                <span class="comment">//清空</span></span><br><span class="line">                preparedStatement.clearBatch();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();<span class="comment">//结束时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;批量耗时 = &quot;</span> + (end - start));<span class="comment">//传统耗时 = 10208</span></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        JDBCUtils.close(<span class="literal">null</span>, connection, preparedStatement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>JDBC的数据库连接池使用javax.sql.DataSource来表示，DataSource是一个接口，通常由第三方实现</p></li><li><p>预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需要从“缓冲池”中取出一个，使用完毕后在放回去</p></li><li>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是从新建立一个</li><li>当应用程序相连接池请求的连接数超过最大连接数量时，这些请求将被加入到<strong>等待队列</strong></li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/连接池.png"></p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h4><ul><li>速度相对较慢，稳定性不错(hiberbate、spring)</li></ul><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/C3P0驱动包.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0_</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式1 ： 相关参数 在程序中指定 user, url, password driver等</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0_01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建数据源对象</span></span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">comboPooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        <span class="comment">//2. 通过配置文件获取相关信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//读取相关信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 给数据源 comboPooledDataSource 设置参数</span></span><br><span class="line">        <span class="comment">//   连接管理由comboPooledDataSource 管理</span></span><br><span class="line">        comboPooledDataSource.setDriverClass(driver);</span><br><span class="line">        comboPooledDataSource.setJdbcUrl(url);</span><br><span class="line">        comboPooledDataSource.setUser(user);</span><br><span class="line">        comboPooledDataSource.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置初始连接数</span></span><br><span class="line">        comboPooledDataSource.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//设置最大连接数</span></span><br><span class="line">        comboPooledDataSource.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comboPooledDataSource.getConnection();<span class="comment">//这个方法就是从DataSource接口实现</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;c3p0 耗时 = &quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 第二种方式 使用配置文件模板</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0_02</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">comboPooledDataSource</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;zb_study&quot;</span>);<span class="comment">//zb_study表示数据源名称</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//测试5000 次连接</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comboPooledDataSource.getConnection();</span><br><span class="line">            <span class="comment">//System.out.println(&quot;连接OK&quot;);</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;c3p0 第二种方式 耗时= &quot;</span> + (end-start));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">    &lt;!-- c3p0连接池配置 --&gt;</span><br><span class="line">    &lt;!-- 数据源名称代表连接池 --&gt;</span><br><span class="line">    &lt;named-config name= <span class="string">&quot;zb_study&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--默认是mysql数据库--&gt;</span><br><span class="line">        &lt;!--驱动类--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClass&quot;</span>&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">        &lt;!--url--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;jdbcUrl&quot;</span>&gt;jdbc:mysql:<span class="comment">//localhost:3306/study&lt;/property&gt;</span></span><br><span class="line">        &lt;!-- 数据库的用户名  默认值：<span class="literal">null</span> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;user&quot;</span>&gt;root&lt;/property&gt;</span><br><span class="line">        &lt;!-- 数据库的密码  默认值：<span class="literal">null</span> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span>&gt;<span class="number">123456</span>&lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--初始化连接数  取值要在minPoolSize和maxPoolSize之间（可包含，闭区间） 默认值：<span class="number">3</span> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;initialPoolSize&quot;</span>&gt;<span class="number">5</span>&lt;/property&gt;</span><br><span class="line">        &lt;!-- 最大连接数 （连接池中的连接数不能超过maxPoolSize最大连接数） 默认值：<span class="number">15</span>--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxPoolSize&quot;</span>&gt;<span class="number">50</span>&lt;/property&gt;</span><br><span class="line">        &lt;!--最小连接数  默认值：<span class="number">3</span>  --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;minPoolSize&quot;</span>&gt;<span class="number">10</span>&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- c3p0连接池中数据连接不够时（无空闲连接可用）,一次增长的个数（增长不能超过maxPoolSize最大连接个数） 默认值：<span class="number">3</span> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;acquireIncrement&quot;</span>&gt;<span class="number">5</span>&lt;/property&gt;</span><br><span class="line">        &lt;!-- 连接的最大空闲时间，如果超过这个时间还没有被使用，就断开这个连接（设置为<span class="number">0</span>或负数，就永远都不会被断开） 单位：秒  默认值 ：<span class="number">0</span> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxIdleTime&quot;</span>&gt;<span class="number">600</span>&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 从数据库获取新连接失败后重复尝试的次数。小于等于<span class="number">0</span>表示无限次  默认值: <span class="number">30</span>--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;acquireRetryAttempts&quot;</span> value=<span class="string">&quot;30&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 两次连接的中间间隔时间（重新尝试的时间间隔）  单位：毫秒  默认值：<span class="number">1000</span> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;acquireRetryDelay&quot;</span>&gt;<span class="number">1000</span>&lt;/property&gt;</span><br><span class="line">        &lt;!-- 连接关闭时，是否将所有未提交的操作进行事务回滚  默认值：<span class="literal">false</span> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;autoCommitOnClose&quot;</span>&gt;<span class="literal">false</span>&lt;/property&gt;</span><br><span class="line">        &lt;!-- 当连接池用完时,客户端调用getConnection()后等待获取新连接的时间  单位：毫秒  默认值：<span class="number">0</span></span><br><span class="line">                如果值设为 <span class="number">0</span>，将无限期等待，直到有空闲连接。  否则按照设置的值，超时将抛出SQLException异常</span><br><span class="line">                时间设置过小时会出现连接超时，这样会抛出SQLException异常，设置时间时需要小心，按照实际情况设置适当的值--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;<span class="number">0</span>&lt;/property&gt;</span><br><span class="line">        &lt;!-- 每隔多少秒检查所有连接池中的空闲连接  单位：秒   默认值：<span class="number">0</span> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;idleConnectionTestPeriod&quot;</span>&gt;<span class="number">60</span>&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置PreparedStatement缓存，设置连接池为数据源缓存的PreparedStatement的总数</span><br><span class="line">                为<span class="number">0</span>的时候不缓存，同时maxStatementsPerConnection的配置无效。</span><br><span class="line">               由于PreparedStatement属于单个Connection,所以这个数量应该根据应用中平均连接数乘以每个连接的平均PreparedStatement来计算--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxStatements&quot;</span>&gt;<span class="number">1000</span>&lt;/property&gt;</span><br><span class="line">        &lt;!-- 每个对象可连接的最多命令对象数 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;maxStatementsPerConnection&quot;</span>&gt;<span class="number">2</span>&lt;/property&gt;</span><br><span class="line">    &lt;/named-config&gt;</span><br><span class="line"></span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure><h4 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a>DBCP</h4><ul><li>速度相对C3P0较快，但不稳定</li></ul><h4 id="Proxool"><a href="#Proxool" class="headerlink" title="Proxool"></a>Proxool</h4><ul><li>有监控连接池状态的功能，稳定性相对c3p0差一点</li></ul><h4 id="BoneCP"><a href="#BoneCP" class="headerlink" title="BoneCP"></a>BoneCP</h4><ul><li>速度快</li></ul><h4 id="Druid-德鲁伊"><a href="#Druid-德鲁伊" class="headerlink" title="Druid(德鲁伊)"></a>Druid(德鲁伊)</h4><ul><li>是阿里提供的数据库连接池，集DBCP、C3P0、Proxool优点于一身的数据库连接池（推荐使用）</li></ul><p><img src="/undefined/5c27/Druid驱动包.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Druid_</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 导入Druid jar包</span></span><br><span class="line">        <span class="comment">//2. 加入配置文件 将该文件拷贝到项目的src目录</span></span><br><span class="line">        <span class="comment">//3. 读取配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 创建一个指定的数据库连接池 Druid连接</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span></span><br><span class="line">                DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">            <span class="comment">//System.out.println(&quot;连接成功&quot;);</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;druid 连接池 耗时 = &quot;</span> + (end - start));<span class="comment">//druid 连接池 耗时 = 692</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JDBCUtilsByDruid"><a href="#JDBCUtilsByDruid" class="headerlink" title="JDBCUtilsByDruid"></a>JDBCUtilsByDruid</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtilsByDruid</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line">    <span class="comment">//在静态代码块完成 ds初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\druid.properties&quot;</span>));</span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//转换为运行异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getConnection 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    <span class="comment">//close 不是关闭连接 将使用的Connection 对象放回到连接池中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Apache-DButils工具类"><a href="#Apache-DButils工具类" class="headerlink" title="Apache-DButils工具类"></a>Apache-DButils工具类</h2><ul><li>commons-dbutils是 Apache组织提供的一个开源JDBC工具类库，它是对JDBC的封装,使用dbutils能极大简化jdbc编码的工作量。</li></ul><h3 id="DbUtils类"><a href="#DbUtils类" class="headerlink" title="DbUtils类"></a>DbUtils类</h3><ul><li>QueryRunner类:该类封装了SQL的执行，是线程安全的。可以实现增、删、改、查、批处理</li><li>使用QueryRunner类实现查询</li><li>ResultSetHandler接口：该接口用于处理java.sql.ResultSet，将数据按要求转换为另一种形式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ArrayHandler<span class="comment">//把结果集中的第一行数据转成对象数组。</span></span><br><span class="line">ArrayListHandler<span class="comment">//把结果集中的每一行数据都转成一个数组，再存放到List中。BeanHandler:将结果集中的第一行数据封装到一个对应的JavaBean实例中。</span></span><br><span class="line">BeanListHandler<span class="comment">//将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</span></span><br><span class="line">ColumnListHandler<span class="comment">//将结果集中某一列的数据存放到List中</span></span><br><span class="line">KeyedHandler(name)<span class="comment">//将结果集中的每行数据都封装到Map里，再把这些map再存到一个map里，其key为指定的key.</span></span><br><span class="line">MapHandler<span class="comment">//将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</span></span><br><span class="line">MapListHandler<span class="comment">//将结果集中的每一行数据都封装到一个Map里，然后再存放到List</span></span><br></pre></td></tr></table></figure><p><img src="https://zhib0.oss-cn-hangzhou.aliyuncs.com/img/DbUtils驱动包.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBUtils_USE</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//使用 apache - DBUtils 工具类 + druid 完成对表的crud操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryMany</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;<span class="comment">//返回结果是多行情况</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到连接(druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 先导入 DBUtils包</span></span><br><span class="line">        <span class="comment">//3. 创建QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//4. 执行相关方法 返回 ArrayList 结果集</span></span><br><span class="line">        <span class="comment">//String sql = &quot;select * from actor where id &gt;= ?&quot;;</span></span><br><span class="line">        <span class="comment">// 也可以查询部分</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name from actor where id &gt;= ?&quot;</span>;</span><br><span class="line">        <span class="comment">//(1) query 方法执行sql语句 得到 resultSet --封装到--&gt; ArrayList 集合中</span></span><br><span class="line">        <span class="comment">//(2) 返回集合</span></span><br><span class="line">        <span class="comment">//(3) connection 连接</span></span><br><span class="line">        <span class="comment">//(4) sql : 执行的sql语句</span></span><br><span class="line">        <span class="comment">//(5) new BeanListHandler&lt;&gt;(Actor.class) 在底层将resultSet -&gt; Actor 对象 —-&gt; 封装到 ArrayList</span></span><br><span class="line">        <span class="comment">//    底层使用反射机制 获取Actor类的属性 然后封装</span></span><br><span class="line">        <span class="comment">//(6) 1 就是给 sql 语句中的? 赋值， 可以有多个值 因为是 Object... params</span></span><br><span class="line">        <span class="comment">//(7) 底层得到 resultSet  PreparedStatement 会在query 关闭</span></span><br><span class="line">        List&lt;Actor&gt; list =</span><br><span class="line">                queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;&gt;(Actor.class), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;集合的信息&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Actor actor : list) &#123;</span><br><span class="line">            System.out.println(actor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放连接</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>,<span class="literal">null</span>,connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回结果是单行情况</span></span><br><span class="line">    <span class="comment">// Apache + dbutils + druid</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuerySingle</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 先得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用dbutils类 和接口</span></span><br><span class="line">        <span class="comment">//3. 创建QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//4. 执行相关方法 返回单个对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//  因为返回的单行记录&lt;----&gt; 单个对象 使用的Handler 是BeanHandler</span></span><br><span class="line">        <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span></span><br><span class="line">                queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;&gt;(Actor.class), <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(actor);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//返回单行单列的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// apache + dbutils + druid</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testScalar</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name from actor where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//4. 执行相关方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span></span><br><span class="line">                queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>&lt;&gt;(), <span class="number">4</span>);</span><br><span class="line">        <span class="comment">//当查询的内容没有是 返回null</span></span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// apache + dbutils + druid 完成dml (update , insert, delete)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDml</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="comment">//String sql = &quot;update actor set name = ? where id = ?&quot;;</span></span><br><span class="line">        <span class="comment">//String sql = &quot;insert into actor values(null, ?, ?,?,?)&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from actor where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 执行 dml 操作是 queryRunner.updated()</span></span><br><span class="line">        <span class="comment">//   返回的值是受影响的行数</span></span><br><span class="line">        <span class="comment">//int affectRows = queryRunner.update(connection, sql, &quot;执笔&quot;, &quot;男&quot;,&quot;2000-01-01&quot;,&quot;123456&quot;);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectRows</span> <span class="operator">=</span> queryRunner.update(connection, sql, <span class="number">2</span>);</span><br><span class="line">        System.out.println(affectRows &gt; <span class="number">0</span> ? <span class="string">&quot;执行成功&quot;</span> : <span class="string">&quot;执行没有受影响到表&quot;</span>);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>,<span class="literal">null</span>,connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表和JavaBean的类型映射关系"><a href="#表和JavaBean的类型映射关系" class="headerlink" title="表和JavaBean的类型映射关系"></a>表和JavaBean的类型映射关系</h3><ul><li><p>JavaBean又称domain、pojo</p><p><img src="/undefined/5c27/表和JavaBean的类型映射关系.png" alt="表和JavaBean的类型映射关系"></p></li></ul><h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><ul><li>DAO：data access object数据访问对象</li></ul><h3 id="BasicDAO"><a href="#BasicDAO" class="headerlink" title="BasicDAO"></a>BasicDAO</h3><ul><li>这样的通用类，称为 BasicDao，是专门和数据库交互的，即完成对数据库(表)的crud操作。</li><li>在BaiscDao的基础上，实现一张表对应一个Dao，更好的完成功能,比如 Customer表-Customer.java类(javabean)-CustomerDao.java</li></ul><p><img src="/undefined/5c27/分层设计.png" alt="分层设计"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 执笔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 该类对应ResultSet 中的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Actor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;<span class="comment">//mysql中字符也是字符串</span></span><br><span class="line">    <span class="comment">//这里使用 Date会报错 原因java实体类中的java.util.Date 和 mysql8中的datetime类型无法相互转换</span></span><br><span class="line">    <span class="keyword">private</span> String borndate;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Actor</span><span class="params">()</span> &#123;<span class="comment">//给予无参构造器便于反射使用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Actor</span><span class="params">(Integer id, String name, String sex, String borndate, String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.borndate = borndate;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBorndate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> borndate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBorndate</span><span class="params">(String borndate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.borndate = borndate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\nActor&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, borndate=&quot;</span> + borndate +</span><br><span class="line">                <span class="string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DAO-1"><a href="#DAO-1" class="headerlink" title="DAO"></a>DAO</h4><h5 id="BasicDAO-1"><a href="#BasicDAO-1" class="headerlink" title="BasicDAO"></a>BasicDAO</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 执笔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 开发basicDAO 是其他DAO的父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicDAO</span>&lt;T&gt; &#123;<span class="comment">//泛型指定具体的类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通用的 执行dml的方法 针对任意的表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(String sql, Object... parameters)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            <span class="keyword">return</span> qr.update(connection, sql, parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值是多行的情况</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">queryMultiply</span><span class="params">(String sql, Class&lt;T&gt; clazz, Object... parameters)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;T&gt;(clazz), parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值是单行的情况</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">querySingle</span><span class="params">(String sql, Class&lt;T&gt; clazz, Object... parameters)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;T&gt;(clazz), parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回是单行单列的情况</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryScalar</span><span class="params">(String sql, Object... parameters)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>&lt;T&gt;(), parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ActorDAO"><a href="#ActorDAO" class="headerlink" title="ActorDAO"></a>ActorDAO</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 执笔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActorDAO</span> <span class="keyword">extends</span> <span class="title class_">BasicDAO</span>&lt;Actor&gt;&#123;</span><br><span class="line">    <span class="comment">//1. 这里有BasicDAO 的所有方法</span></span><br><span class="line">    <span class="comment">//2. 添加独有的操作</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TestDAO"><a href="#TestDAO" class="headerlink" title="TestDAO"></a>TestDAO</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//查询获得多行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tesActorDAO</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ActorDAO</span> <span class="variable">actorDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActorDAO</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 查询多行记录</span></span><br><span class="line">        List&lt;Actor&gt; actors = actorDAO.queryMultiply(<span class="string">&quot;select * from actor where id &gt; ?&quot;</span>, Actor.class, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==== 多行查询结果 ====&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Actor actor : actors) &#123;</span><br><span class="line">            System.out.println(actor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 查询单行记录</span></span><br><span class="line">        <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span> actorDAO.querySingle(<span class="string">&quot;select * from actor where id = ?&quot;</span>, Actor.class, <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==== 单行查询结果 ====&quot;</span>);</span><br><span class="line">        System.out.println(actor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 查询单行单列记录</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> actorDAO.queryScalar(<span class="string">&quot;select name from actor where id = ?&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==== 单行单列查询结果 ====&quot;</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. dml 操作 update insert delete</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> actorDAO.update(<span class="string">&quot;update actor set name = ? where id = ?&quot;</span>, <span class="string">&quot;李白&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==== dml操作结果 ====&quot;</span>);</span><br><span class="line">        System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;执行成功&quot;</span> : <span class="string">&quot;执行没有影响&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGoodsDAO</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行dml 操作</span></span><br><span class="line">        <span class="type">GoodsDAO</span> <span class="variable">goodsDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GoodsDAO</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into goods values(?, ?, ?)&quot;</span>;</span><br><span class="line">        <span class="comment">//int rows = goodsDAO.update(sql, 10, &quot;华为手机&quot;, 2000);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> goodsDAO.update(sql, <span class="number">20</span>, <span class="string">&quot;苹果手机&quot;</span>, <span class="number">8000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==== dml操作结果 ====&quot;</span>);</span><br><span class="line">        System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;执行成功&quot;</span> : <span class="string">&quot;执行没有影响&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询多行记录</span></span><br><span class="line">        List&lt;Goods&gt; goods =</span><br><span class="line">                goodsDAO.queryMultiply(<span class="string">&quot;select * from goods where id &gt; ?&quot;</span>, Goods.class, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==== 多行查询结果 ====&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Goods good :goods) &#123;</span><br><span class="line">            System.out.println(good);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询单行记录</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> goodsDAO.querySingle(<span class="string">&quot;select * from goods where id = ?&quot;</span>, Goods.class, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==== 单行查询结果 ====&quot;</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单行单列查询</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> goodsDAO.queryScalar(<span class="string">&quot;select goods_name from goods where id = ?&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(o1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（二十七）- 正则表达式</title>
      <link href="/undefined/b5e3.html"/>
      <url>/undefined/b5e3.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><ul><li>对字符串执行模式匹配的技术</li><li>全称 regular expression -&gt; RegExp</li></ul><h2 id="二、元字符"><a href="#二、元字符" class="headerlink" title="二、元字符"></a>二、元字符</h2><h3 id="1-转义符"><a href="#1-转义符" class="headerlink" title="1. 转义符"></a>1. 转义符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\转义符</span><br><span class="line">需要用到转义符号的字符有：. * + () $ /\ ? [] ^ &#123;&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>\</td><td>将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，”n”匹配字符”n”。”\n”匹配换行符。序列”\\\“匹配”\“，”\(“匹配”(“。</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;12&amp;(.adb5&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String reg = &quot;\\(&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">reg</span> <span class="operator">=</span> <span class="string">&quot;\\.&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(reg);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到：&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-字符匹配符"><a href="#2-字符匹配符" class="headerlink" title="2. 字符匹配符"></a>2. 字符匹配符</h3><h4 id="2-1-匹配不区分大小写"><a href="#2-1-匹配不区分大小写" class="headerlink" title="2.1 匹配不区分大小写"></a>2.1 匹配不区分大小写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(?i)abc表示abc都不区分大小写a // i表示大小写不敏感</span></span><br><span class="line"><span class="comment">//(?i)bc表示bc不区分大小写</span></span><br><span class="line"><span class="comment">//a((?i)b)c表示只有b不区分大小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指定 Pattern.CASE_INSENSITIVE 表示匹配是不区分字母大小写</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pat</span> <span class="operator">=</span> Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);</span><br></pre></td></tr></table></figure><h4 id="2-2-字符匹配符列表"><a href="#2-2-字符匹配符列表" class="headerlink" title="2.2 字符匹配符列表"></a>2.2 字符匹配符列表</h4><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">含义</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">[ ]</td><td style="text-align:left">可接收的字符列表</td><td>[efgh]</td><td>e、f、g、h中的任意字符</td></tr><tr><td style="text-align:center"><sup><a href="#fn_" id="reffn_"></a></sup></td><td style="text-align:left">不可接收字符列表</td><td><sup><a href="#fn_abc" id="reffn_abc">abc</a></sup></td><td>除a、b、c之外的任意字符，包括数字和特殊符号</td></tr><tr><td style="text-align:center">-</td><td style="text-align:left">连字符</td><td>A-Z</td><td>任意单个大写字母</td></tr><tr><td style="text-align:center">.</td><td style="text-align:left">匹配除\n以外的任何字符</td><td>a..b</td><td>以a开头，b结尾，中间包括2个任意字符的长度为4的字符串</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:left">匹配单个数字字符，相当于[0-9]</td><td>\d{3}{\d}?</td><td>包含3个或4个数字的字符串</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:left">匹配单个非数字字符，相当于[ ^0-9 ]</td><td>\D(\d)*</td><td>以单个非数字字符开头，后接人一个数字字符串</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:left">匹配单个数字、大小写字母符，相当于[0-9a-zA-z]</td><td>\d{3}\w{4}</td><td>以3个数字字符开头的长度为7的数字字母字符串</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:left">匹配单个非数字、大小写字母符，相当于[ ^0-9a-zA-z]</td><td>\W+\d{2}</td><td>以至少1个非数字字母符开头，2个数字字符结尾的字符串</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:left">匹配任意空白字符，包括空格、制表符、换页符等，相当于[\f\n\r\t\v]</td><td></td><td></td></tr><tr><td style="text-align:center">\S</td><td style="text-align:left">匹配任何非空白字符，相当于[ ^\f\n\r\t\v]</td><td></td><td></td></tr><tr><td style="text-align:center">\f</td><td style="text-align:left">换页匹配符，等效于\x0c 和 \cL</td><td></td><td></td></tr><tr><td style="text-align:center">\n</td><td style="text-align:left">换行匹配符，等效于\x0a 和 \cJ</td><td></td><td></td></tr><tr><td style="text-align:center">\r</td><td style="text-align:left">匹配一个回车符，等效于\x0d 和 \cM</td><td></td><td></td></tr><tr><td style="text-align:center">\t</td><td style="text-align:left">制表匹配符，等效于\x09 和 \cl</td><td></td><td></td></tr><tr><td style="text-align:center">\v</td><td style="text-align:left">垂直制表符匹配，等效于</td><td></td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegTheory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;1998年12月8日，第二代Java平台发布，1999年6月，Sun公司发布了第二代12345678&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匹配文中的所有四个数字</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. \\d表示一个数字</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d\\d\\d\\d&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;(\\d\\d)(\\d\\d)&quot;</span>;<span class="comment">//() 表示分组</span></span><br><span class="line">        <span class="comment">//2. 创建模式对象[即正则表达式对象]</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="comment">//3. 创建匹配器</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 开始匹配</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * matcher.find() 完成任务 (考虑分组)</span></span><br><span class="line"><span class="comment">         * (\d\d)(\d\d) 正则表达式中有() 表示分组, 第1个() 表示第1组, 第2个() 表示第二组....</span></span><br><span class="line"><span class="comment">         * 1. 根据指定的规则, 定位满足规则的子字符串(如(19)(98))</span></span><br><span class="line"><span class="comment">         * 2. 找到后将子字符串的开始的索引记录到matcher对象的属性 int[] groups;</span></span><br><span class="line"><span class="comment">         *    2.1 groups[0] = 0, 把该子字符串的结束的索引+1的值记录到groups[1] = 4</span></span><br><span class="line"><span class="comment">         *    2.2 记录1组()匹配到的子字符串 groups[2] = 0 groups[3] = 2</span></span><br><span class="line"><span class="comment">         *    2.3 记录2组()匹配到的子字符串 groups[3] = 2 groups[4] = 4</span></span><br><span class="line"><span class="comment">         *    2.4 多组以此类推...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到：&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;找到第1组()：&quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;找到第2组()：&quot;</span> + matcher.group(<span class="number">2</span>));</span><br><span class="line">            <span class="comment">//System.out.println(&quot;找到第3组()：&quot; + matcher.group(3));//报错 数组下标越界</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;a11c8ab@cABC_ &quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr = &quot;[a-z]&quot;;//匹配 a-z之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[A-Z]&quot;;//匹配 A-Z之间任意一个字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;abc&quot;;//匹配 abc 字符串 [默认区分大小写]</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;(?i)abc&quot;;//匹配 abc 字符串 [不区分大小写]</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[0-9]&quot;;//匹配 0-9 间的任意字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[^a-z]&quot;;//匹配 不在 a-z 间的任意字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[^0-9]&quot;;//匹配 不在 0-9 间的任意字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[abcd]&quot;;//匹配 abcd 间的任意字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;[^abcd]&quot;;//匹配 不是 abcd 间的任意字符</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d&quot;;//匹配 0-9间的任意一个数字</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\D&quot;;//匹配 不是0-9中的任意一个数字</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\w&quot;;//匹配 任意英文字符、数字和下划线</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\W&quot;;//匹配 与\w相反</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\s&quot;;//匹配 任何空白字符(空格 制表符)</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\S&quot;;//匹配 与\s相反</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;\\.&quot;</span>;<span class="comment">//匹配 除\n之外的所有字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定 Pattern.CASE_INSENSITIVE 表示匹配是不区分字母大小写</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr<span class="comment">/*,Pattern.CASE_INSENSITIVE*/</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到：&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-选择匹配符"><a href="#3-选择匹配符" class="headerlink" title="3. 选择匹配符"></a>3. 选择匹配符</h3><ul><li>在匹配某个字符串的时候是选择性的</li></ul><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>\</td><td></td><td>匹配”\</td><td>“之前或之后的表达式</td><td>ab\</td><td>cd</td><td>ab或cd</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;zhibi 执笔 值&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;zhi|执|值&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr<span class="comment">/*,Pattern.CASE_INSENSITIVE*/</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到：&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-限定符"><a href="#4-限定符" class="headerlink" title="4. 限定符"></a>4. 限定符</h3><ul><li>用于指定前面的字符和组合项连续出现的次数</li></ul><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>说明</th><th>匹配输入</th></tr></thead><tbody><tr><td>*</td><td>指定字符重复0次或n次（无要求）</td><td>(abc)*</td><td>仅包含任意个abc的字符串，等效于\w*</td><td>abc、abcabcabc</td></tr><tr><td>+</td><td>指定字符重复1次或n次（至少一次）</td><td>m+(abc)*</td><td>至少以1个m开头，后接任意个abc的字符串</td><td>m、mabc、mabcabc</td></tr><tr><td>？</td><td>指定字符重复0次或1次（至多一次）</td><td>m+abc?</td><td>至少以1个m开头，后接ab货abc的字符串</td><td>mab、mabc</td></tr><tr><td>{n}</td><td>只能输入n个字符</td><td>[abcd]{3}</td><td>由abcd中字母组成的任意长度为3的字符串</td><td>abc、acd、adc</td></tr><tr><td>{n,}</td><td>指定至少n个匹配</td><td>[abcd]{3,}</td><td>由abcd中字母组成的任意长度不小于3的字符串</td><td>aab、dbc、aaabcd</td></tr><tr><td>{n,m}</td><td>指定至少n个但不多于m个匹配</td><td>[abcd]{3,5}</td><td>由abcd中字母组成的任意长度不小于3，不大于5的字符串</td><td>abc、abcd、aaaaa、bcdaa</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//java匹配机制为贪婪匹配, 即尽可能的匹配多的</span></span><br><span class="line">        <span class="comment">//1. &#123;n&#125; 如：a&#123;3&#125; 1&#123;4&#125; (\\d)&#123;2&#125;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;111111aaaahello&quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr = &quot;a&#123;3&#125;&quot;;//匹配aaa</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1&#123;4&#125;&quot;;//匹配1111</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;(\\d)&#123;2&#125;&quot;;//匹配任意两个数字</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. &#123;n,m&#125; 匹配至少出现n次, 最多出现m次 如a&#123;3,4&#125;, 1&#123;4,5&#125;,\\d&#123;2,5&#125;</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;a&#123;3,4&#125;&quot;;//匹配aaaa 或者aaa 遵守贪婪匹配 即优先匹配aaaa</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1&#123;4,5&#125;&quot;;//匹配1111 或者11111 遵守贪婪匹配 即优先匹配11111</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d&#123;2,5&#125;&quot;;//匹配任意2-5位间的数字 遵守贪婪匹配 即优先匹配5位数字</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. + 表示出现1次到任意多次 如 a+ 1+ \\d+</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;a+&quot;;</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1+&quot;;</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d+&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. * 表示出现0次到任意多次 如a* 1* \\d*</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;a1*&quot;;</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1*&quot;;</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d1*&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. ? 表示出现0次到1次 如 a? 1? \\d?</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;a?&quot;;</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;1?&quot;;</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d1?&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;a2111?&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到第&quot;</span> + (++i) + <span class="string">&quot;个：&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-定位符"><a href="#5-定位符" class="headerlink" title="5. 定位符"></a>5. 定位符</h3><ul><li>规定要匹配的字符串出现的位置</li></ul><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>说明</th><th>匹配输入</th></tr></thead><tbody><tr><td>^</td><td>指定起始字符</td><td>^[0-9]+[a-z]*</td><td>以至少1个数字开头，后接任意个小写字母的字符串</td><td>123、6aa、555abc</td></tr><tr><td>$</td><td>指定结束字符</td><td>^[0-9]\-[a-z]+$</td><td>以1个数字开头后接连字符”-“至少1个小写字母结尾的字符串</td><td>1-a</td></tr><tr><td>\b</td><td>匹配目标字符串的边界</td><td>zb\b</td><td>这里说的字符串的边界指的是子串间有空格，或者是目标字符串的结束位置</td><td>la<strong>zb</strong> nh<strong>zb</strong></td></tr><tr><td>\B</td><td>匹配目标字符串的非边界</td><td>zb\B</td><td>和\b的含义刚刚相反</td><td><strong>zb</strong>hh</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;c123-ab&quot;</span>;</span><br><span class="line">        <span class="comment">//1. ^ 指定起始字符</span></span><br><span class="line">        <span class="comment">// ^[0-9]+[a-z]* 指定以至少1个数字开头, 后接任意字母结尾</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;^[0-9]+[a-z]*&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. $ 指定结束字符</span></span><br><span class="line">        <span class="comment">// ^[0-9]+[a-z]+$ 值以至少1个数字开头, 以至少1个任意字母结尾</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;^[0-9]+[a-z]+$&quot;;</span></span><br><span class="line">        <span class="comment">// ^[0-9]\\-[a-z]+$ 值以至少1个数字开头,中间是-号 以至少1个任意字母结尾</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;^[0-9]+\\-[a-z]+$&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. \\b 匹配目标字符串的边界[即字符串的结束位置，或者空格前的结束位置]</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;c\\b&quot;;</span></span><br><span class="line">        <span class="comment">//4. \\B 与\\b含义相反</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;c\\B&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到：&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、分组"><a href="#三、分组" class="headerlink" title="三、分组"></a>三、分组</h2><ul><li>使用圆括号组成一个比较复杂的匹配模式，一个圆括号（）的部分可以看做是一个子表达式或者一个分组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegTheory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;1998年12月8日，第二代Java平台发布，1999年6月，Sun公司发布了第二代12345678&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匹配文中的所有四个数字</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. \\d表示一个数字</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d\\d\\d\\d&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;(\\d\\d)(\\d\\d)&quot;</span>;<span class="comment">//() 表示分组</span></span><br><span class="line">        <span class="comment">//2. 创建模式对象[即正则表达式对象]</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="comment">//3. 创建匹配器</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 开始匹配</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * matcher.find() 完成任务 (考虑分组)</span></span><br><span class="line"><span class="comment">         * (\d\d)(\d\d) 正则表达式中有() 表示分组, 第1个() 表示第1组, 第2个() 表示第二组....</span></span><br><span class="line"><span class="comment">         * 1. 根据指定的规则, 定位满足规则的子字符串(如(19)(98))</span></span><br><span class="line"><span class="comment">         * 2. 找到后将子字符串的开始的索引记录到matcher对象的属性 int[] groups;</span></span><br><span class="line"><span class="comment">         *    2.1 groups[0] = 0, 把该子字符串的结束的索引+1的值记录到groups[1] = 4</span></span><br><span class="line"><span class="comment">         *    2.2 记录1组()匹配到的子字符串 groups[2] = 0 groups[3] = 2</span></span><br><span class="line"><span class="comment">         *    2.3 记录2组()匹配到的子字符串 groups[3] = 2 groups[4] = 4</span></span><br><span class="line"><span class="comment">         *    2.4 多组以此类推...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到：&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;找到第1组()：&quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;找到第2组()：&quot;</span> + matcher.group(<span class="number">2</span>));</span><br><span class="line">            <span class="comment">//System.out.println(&quot;找到第3组()：&quot; + matcher.group(3));//报错 数组下标越界</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、捕获"><a href="#四、捕获" class="headerlink" title="四、捕获"></a>四、捕获</h2><ul><li>把正则表达式中的表达式或分组匹配的内容，保存到内存中以数字编号或显示命名的组里，从左向右，以分组的左括号作为标志，第一个出现的分组的组号为1，第二个为2，以此类推；组0表示整个正则表达式</li></ul><h3 id="1-非命名捕获"><a href="#1-非命名捕获" class="headerlink" title="1. 非命名捕获"></a>1. 非命名捕获</h3><div class="table-container"><table><thead><tr><th>常用分组构造形式</th><th>说明</th><th></th></tr></thead><tbody><tr><td>(pattern)</td><td>非命名捕获。捕获匹配的字符串。编号为零的第一个捕获是由整个正则表达式模式匹配的文本，其它捕获结果则根据左括号的顺序从1开始自动编号。</td><td></td></tr><tr><td>(?:pattern)</td><td>匹配pattern但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用”or”字符(\</td><td>)组合模式部件的情况很有用。例如，l(?:y\</td><td>e)是比”ly\</td><td>le”更好的表达式</td><td></td></tr><tr><td>(?=pattern)</td><td>它是一个非捕获匹配。例如,”Windows (?=95\</td><td>98\</td><td>NT\</td><td>2000)” 匹配”Windows 2000”中的”Windows”，但不匹配”Windows 3.1”中的”windows”</td><td>相当于取括号内的匹配</td></tr><tr><td>(?!pattern)</td><td>该表达式匹配不处于匹配pattern的字符串的起始点的搜索字符串。它是一个非捕获匹配。例如，”Windows (?!95\</td><td>98\</td><td>NT\</td><td>2000)”匹配”Windows 3.1”中的”windows”，但是不匹配”Windows 2000”中的”Windows”</td><td>相当于排除括号内的匹配</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;执笔hello执笔同学执笔你好执笔画江山&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 找到执笔同学、执笔画江山、执笔你好</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;执笔同学|执笔画江山|执笔你好&quot;;//选择匹配符</span></span><br><span class="line">        <span class="comment">// 等价于 非捕获分组 注意：这里不能使用 matcher.group(1)进行输出</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;执笔(?:同学|画江山|你好)&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 找到执笔关键字但是只要求查找执笔同学 执笔画江山中的执笔</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;执笔(?=同学|画江山)&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 找到执笔关键字 但是不是执笔同学 执笔画江山中的执笔</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;执笔(?!同学|画江山|你好)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到：&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-命名捕获"><a href="#2-命名捕获" class="headerlink" title="2. 命名捕获"></a>2. 命名捕获</h3><div class="table-container"><table><thead><tr><th>常用分组构造形式</th><th>说明</th></tr></thead><tbody><tr><td>(?<name>pattern)</name></td><td>命名捕获。将匹配的子字符串捕获到一个组名称或编号名称中。用于name的字符串不能包含任何标点符号，并且不能以数字开头。可以使用单引号替代尖括号，例如(?’name’)</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;he1123l1569lo&quot;</span>;</span><br><span class="line">        <span class="comment">//1. 非命名捕获分组</span></span><br><span class="line">        <span class="comment">//String regStr = &quot;(\\d\\d)(\\d\\d)&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 命名捕获分组</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;(?&lt;g1&gt;\\d\\d)(?&lt;g2&gt;\\d\\d)&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到：&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            <span class="comment">//System.out.println(&quot;找到第1组：&quot; + matcher.group(1));</span></span><br><span class="line">            System.out.println(<span class="string">&quot;找到第1组：&quot;</span> + matcher.group(<span class="string">&quot;g1&quot;</span>));</span><br><span class="line">            <span class="comment">//System.out.println(&quot;找到第2组：&quot; + matcher.group(2));</span></span><br><span class="line">            System.out.println(<span class="string">&quot;找到第2组：&quot;</span> + matcher.group(<span class="string">&quot;g2&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、反向引用"><a href="#五、反向引用" class="headerlink" title="五、反向引用"></a>五、反向引用</h2><ul><li>圆括号的内容被捕获后，可以在这个括号后被使用，从而得到一个实用的表达式；内部反向引用用\ \表示分组号，外部反向引用用$表示分组号</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;我....我要.....学学学学.....编程java&quot;</span>;</span><br><span class="line">        <span class="comment">//1. 去除.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;(\\.)\\1+&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        content = matcher.replaceAll(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 将相同的字替换</span></span><br><span class="line"><span class="comment">//        regStr = &quot;(.)\\1+&quot;;</span></span><br><span class="line"><span class="comment">//        pattern = Pattern.compile(regStr);</span></span><br><span class="line"><span class="comment">//        matcher = pattern.matcher(content);</span></span><br><span class="line"><span class="comment">//        while(matcher.find()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;扎到：&quot; + matcher.group(0));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        content = matcher.replaceAll(&quot;$1&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(content);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 简化表示</span></span><br><span class="line">        content = Pattern.compile(<span class="string">&quot;(.)\\1+&quot;</span>).matcher(content).replaceAll(<span class="string">&quot;$1&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、匹配方式"><a href="#六、匹配方式" class="headerlink" title="六、匹配方式"></a>六、匹配方式</h2><h3 id="1-贪婪匹配"><a href="#1-贪婪匹配" class="headerlink" title="1. 贪婪匹配"></a>1. 贪婪匹配</h3><ul><li>默认是贪婪匹配</li></ul><h3 id="2-非贪婪匹配"><a href="#2-非贪婪匹配" class="headerlink" title="2. 非贪婪匹配"></a>2. 非贪婪匹配</h3><ul><li>在匹配符后加 ?</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;1111abc&quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr = &quot;\\d+&quot;;//默认是贪婪匹配 输出1111</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;\\d+?&quot;</span>;<span class="comment">//非贪婪匹配在匹配符后加 ？</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到：&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、pattern类"><a href="#七、pattern类" class="headerlink" title="七、pattern类"></a>七、pattern类</h2><ul><li><p>pattern对象是一个正则表达式对象</p></li><li><p>pattern类没有公共构造方法，要创建一个pattern对象，调用其公共静态方法，返回一个pattern对象，该方法接受一个正则表达式作为它的第一个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pattern</span>(regStr);<span class="comment">//regStr 正则表达式字符串</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-matches方法"><a href="#1-matches方法" class="headerlink" title="1. matches方法"></a>1. matches方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Matches_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;i am study java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;.*java.*&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isMatches</span> <span class="operator">=</span> Pattern.matches(regStr, content);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否整体匹配成功：&quot;</span> + isMatches);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、Matcher类"><a href="#八、Matcher类" class="headerlink" title="八、Matcher类"></a>八、Matcher类</h2><h3 id="1-方法"><a href="#1-方法" class="headerlink" title="1. 方法"></a>1. 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">start</span><span class="params">()</span><span class="comment">//返回以前匹配的初始索引。</span></span><br><span class="line">(<span class="number">2</span>) <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">start</span><span class="params">(<span class="type">int</span> group)</span><span class="comment">//返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引</span></span><br><span class="line">(<span class="number">3</span>) <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">end</span><span class="params">()</span><span class="comment">//返回最后匹配字符之后的偏移量。</span></span><br><span class="line">(<span class="number">4</span>) <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">end</span><span class="params">(<span class="type">int</span> group)</span><span class="comment">//返回在以前的匹配操作期间，由给定组所捕获子序列的最后字符之后的偏量</span></span><br><span class="line">(<span class="number">5</span>) <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lookingAt</span><span class="params">()</span><span class="comment">//尝试将从区域开头开始的输入序列与该模式匹配</span></span><br><span class="line">(<span class="number">6</span>) <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">()</span><span class="comment">//尝试查找与该模式匹配的输入序列的下一个子序列。</span></span><br><span class="line">(<span class="number">7</span>) <span class="comment">//重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> start)</span><span class="comment">//</span></span><br><span class="line">(<span class="number">8</span>) <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">()</span><span class="comment">//尝试将整个区域与模式匹配。</span></span><br><span class="line"></span><br><span class="line">(<span class="number">9</span>) <span class="comment">//实现终端添加和替换步骤。</span></span><br><span class="line">    <span class="keyword">public</span> Matcher <span class="title function_">appendReplacement</span><span class="params">(StringBuffer sb, String replacement)</span></span><br><span class="line">(<span class="number">10</span>) <span class="keyword">public</span> StringBuffer <span class="title function_">appendTail</span><span class="params">(StringBuffer sb)</span><span class="comment">//实现终端添加和替换步骤。</span></span><br><span class="line">(<span class="number">11</span>) <span class="comment">//替换模式与给定替换字符串相匹配的输入序列的每个子序列。</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">replaceAll</span><span class="params">(String replacement)</span></span><br><span class="line">(<span class="number">12</span>) <span class="comment">//替换模式与给定替换字符串匹配的输入序列的第一个子序列。</span></span><br><span class="line">     <span class="keyword">public</span> String <span class="title function_">replaceFirst</span><span class="params">(String replacement)</span></span><br><span class="line">(<span class="number">13</span>) <span class="comment">//返回指定字符串的字面替换字符串。这个方法返回一个字符串，就像传递给Matcher类的appendReplacement方法一个字面字符串一样工作。   </span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">quoteReplacement</span><span class="params">(String s)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatcherMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hellozb 123zb hello0zb hello zb&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">            System.out.println(matcher.start());</span><br><span class="line">            System.out.println(matcher.end());</span><br><span class="line">            System.out.println(<span class="string">&quot;找到：&quot;</span> + content.substring(matcher.start(), matcher.end()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//整体匹配方法，常用语校验某个字符串是否符合某个规则</span></span><br><span class="line">        System.out.println(<span class="string">&quot;整体匹配=&quot;</span> + matcher.matches());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成content 有zb 替换成执笔</span></span><br><span class="line">        regStr = <span class="string">&quot;zb&quot;</span>;</span><br><span class="line">        pattern = Pattern.compile(regStr);</span><br><span class="line">        matcher = pattern.matcher(content);</span><br><span class="line">        <span class="comment">//返回的字符串才是替换后的字符串 原来的content不变化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newContent</span> <span class="operator">=</span> matcher.replaceAll(<span class="string">&quot;执笔&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;newContent= &quot;</span> + newContent);</span><br><span class="line">        System.out.println(<span class="string">&quot;content= &quot;</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、String类"><a href="#九、String类" class="headerlink" title="九、String类"></a>九、String类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringReg</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;2000年5月，JDK1.3、JDK1.4 相继发布....&quot;</span>;</span><br><span class="line">        <span class="comment">//1. 将JDK1.3、JDK1.4 替换成 JDK</span></span><br><span class="line">        content = content.replaceAll(<span class="string">&quot;JDK1\\.3|JDK1\\.4&quot;</span>,<span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 验证手机号必须是 138 139开头</span></span><br><span class="line">        content = <span class="string">&quot;13988888888&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(content.matches(<span class="string">&quot;1(38|39)\\d&#123;8&#125;&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证成功...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证失败...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 分割 按照 # 或者 - 或者~ 或者数字进行分割</span></span><br><span class="line">        content = <span class="string">&quot;hello#abc-tom12jack~china&quot;</span>;</span><br><span class="line">        String[] split = content.split(<span class="string">&quot;#|-|~|\\d&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、案例"><a href="#十、案例" class="headerlink" title="十、案例"></a>十、案例</h2><h5 id="1-解析URL"><a href="#1-解析URL" class="headerlink" title="1. 解析URL"></a>1. 解析URL</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3.对一个url进行解析 http://www.sohu.com:8080/abc/index.htm</span></span><br><span class="line"><span class="comment">         * a)要求得到协议是什么?   http</span></span><br><span class="line"><span class="comment">         * b)域名是什么?         www.sohu.com</span></span><br><span class="line"><span class="comment">         * c)端口是健么?         8080</span></span><br><span class="line"><span class="comment">         * d)文件名是什么?       index.htm</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;http://www.sohu.com:8080/abc/index.htm&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;^([a-zA-Z]+)://([a-zA-Z.]+):(\\d+)[\\w/]*/([\\w.]+)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">if</span> (matcher.matches()) &#123;<span class="comment">//整体匹配 如果匹配成功 可以通过group(x), 获取对应分组的内容</span></span><br><span class="line">            System.out.println(<span class="string">&quot;整体匹配：&quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;找到协议：&quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;找到域名：&quot;</span> + matcher.group(<span class="number">2</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;找到端口：&quot;</span> + matcher.group(<span class="number">3</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;找到文件名：&quot;</span> + matcher.group(<span class="number">4</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匹配失败...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-匹配"><a href="#2-匹配" class="headerlink" title="2. 匹配"></a>2. 匹配</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2.要求验证是不是整数或者小数</span></span><br><span class="line"><span class="comment">         *   提示:这个题要考虑正数和负数</span></span><br><span class="line"><span class="comment">         *   比如:123 -345 34.89 -87.9 -0.01 0.45等</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;0.89&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;^[-+]?([1-9]\\d*|0)(\\.\\d+)?$&quot;</span>;</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> Pattern.compile(regStr).matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(content.matches(regStr)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匹配成功...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;匹配失败...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-验证邮箱"><a href="#3-验证邮箱" class="headerlink" title="3. 验证邮箱"></a>3. 验证邮箱</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 规定电子邮件规则为</span></span><br><span class="line"><span class="comment">         * 1．只能有一个@</span></span><br><span class="line"><span class="comment">         * 2. @前面是用户名,可以是a-z A-Z0-9_-字符</span></span><br><span class="line"><span class="comment">         * 3. @后面是域名,并且域名只能是英文字母，比如sohu.com或者tsinghua.org.cn</span></span><br><span class="line"><span class="comment">         * 4、写出对应的正则表达式,验证输入的字符串是否为满足规则</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;123@shouhu.com&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;^[\\w-]+@([a-zA-Z]+\\.)+[a-zA-Z]+$&quot;</span>;</span><br><span class="line"><span class="comment">//        Pattern pattern = Pattern.compile(regStr);</span></span><br><span class="line"><span class="comment">//        Matcher matcher = pattern.matcher(content);</span></span><br><span class="line"><span class="comment">//        if (matcher.find())&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;邮箱满足规则...&quot;);</span></span><br><span class="line"><span class="comment">//        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;邮箱不满足规则...&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//1. String 的matchers 是整体匹配</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (content.matches(regStr)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;邮箱满足规则...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;邮箱不满足规则...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（二十八）- 算法优化-骑士周游问题</title>
      <link href="/undefined/460c.html"/>
      <url>/undefined/460c.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、骑士周游"><a href="#一、骑士周游" class="headerlink" title="一、骑士周游"></a>一、骑士周游</h2><h2 id="二、回溯-贪心算法"><a href="#二、回溯-贪心算法" class="headerlink" title="二、回溯 + 贪心算法"></a>二、回溯 + 贪心算法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 执笔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HorseChessBoard</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">X</span>  <span class="operator">=</span> <span class="number">6</span>;<span class="comment">//表示col</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">Y</span>  <span class="operator">=</span> <span class="number">6</span>;<span class="comment">//表示row</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] chessBoard = <span class="keyword">new</span> <span class="title class_">int</span>[Y][X];<span class="comment">//棋盘大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[X * Y];<span class="comment">//记录某个位置是否走过</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">finished</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//是否完成遍历棋盘</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        traversalChessBoard(chessBoard, row - <span class="number">1</span>, col - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;时间：&quot;</span> + (end - start));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出当前棋盘的情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] rows : chessBoard) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> step : rows) &#123;<span class="comment">//step 表示应该走的第几步</span></span><br><span class="line">                System.out.print(step + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对ps的各个位置 可以走的下一个位置的次数进行排序 把可能走的下一个位置从小到大排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(ArrayList&lt;Point&gt; ps)</span> &#123;</span><br><span class="line">        ps.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Point&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Point o1, Point o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> next(o1).size() - next(o2).size();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最核心的算法 遍历棋盘 如果遍历成功 就把 finished设置为true</span></span><br><span class="line">    <span class="comment">//并将走的每一步step 记录到chessBoard</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">traversalChessBoard</span><span class="params">(<span class="type">int</span>[][] chessBoard, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> step)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先把step 记录到 chessBoard</span></span><br><span class="line">        chessBoard[row][col] = step;</span><br><span class="line">        <span class="comment">//把这个位置 设置为已经访问</span></span><br><span class="line">        visited[row * X + col] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//获取当前位置可以走的下一个位置有哪些</span></span><br><span class="line">        ArrayList&lt;Point&gt; ps = next(<span class="keyword">new</span> <span class="title class_">Point</span>(col, row));<span class="comment">// col --&gt; X, row --&gt; Y</span></span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        sort(ps);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">while</span>(!ps.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//取出当前ps的第一个位置(点)</span></span><br><span class="line">            <span class="type">Point</span> <span class="variable">p</span> <span class="operator">=</span> ps.remove(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//判断该位置是否走过 如果没有走过就递归遍历</span></span><br><span class="line">            <span class="keyword">if</span>(!visited[p.y * X + p.x]) &#123;</span><br><span class="line">                <span class="comment">//递归遍历</span></span><br><span class="line">                traversalChessBoard(chessBoard, p.y, p.x, step + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当退出while循环后 是否遍历成功， 如果没有成功就重置相应的值 然后进行回溯</span></span><br><span class="line">        <span class="keyword">if</span> (step &lt; X * Y &amp;&amp; !finished) &#123;</span><br><span class="line">            <span class="comment">//重置</span></span><br><span class="line">            chessBoard[row][col] = <span class="number">0</span>;</span><br><span class="line">            visited[row * X + col] = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            finished = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写方法，可以获取当前位置 可以走的下一步的所有位置(Point表示 x,y)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Point&gt; <span class="title function_">next</span><span class="params">(Point curPoint)</span> &#123;<span class="comment">// curPoint 当前位置点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个ArrayList</span></span><br><span class="line">        ArrayList&lt;Point&gt; ps = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个 Point对象(点/位置) 准备放入到 ps中</span></span><br><span class="line">        <span class="type">Point</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断在该位置 能否走如下位置 如果可以就将该点(Point) 放入到ps</span></span><br><span class="line">        <span class="comment">//判断5点的位置</span></span><br><span class="line">        <span class="keyword">if</span> ((p.x = curPoint.x - <span class="number">2</span>) &gt;= <span class="number">0</span> &amp;&amp; (p.y = curPoint.y - <span class="number">1</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p));<span class="comment">//这里需要新建一个点 不然会被覆盖</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断6点的位置</span></span><br><span class="line">        <span class="keyword">if</span> ((p.x = curPoint.x - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; (p.y = curPoint.y - <span class="number">2</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p));<span class="comment">//这里需要新建一个点 不然会被覆盖</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断7点的位置</span></span><br><span class="line">        <span class="keyword">if</span> ((p.x = curPoint.x + <span class="number">1</span>) &lt; X &amp;&amp; (p.y = curPoint.y - <span class="number">2</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p));<span class="comment">//这里需要新建一个点 不然会被覆盖</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断0点的位置</span></span><br><span class="line">        <span class="keyword">if</span> ((p.x = curPoint.x + <span class="number">2</span>) &lt; X &amp;&amp; (p.y = curPoint.y - <span class="number">1</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p));<span class="comment">//这里需要新建一个点 不然会被覆盖</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断1点的位置</span></span><br><span class="line">        <span class="keyword">if</span> ((p.x = curPoint.x + <span class="number">2</span>) &lt; X &amp;&amp; (p.y = curPoint.y + <span class="number">1</span>) &lt; Y) &#123;</span><br><span class="line">            ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p));<span class="comment">//这里需要新建一个点 不然会被覆盖</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断2点的位置</span></span><br><span class="line">        <span class="keyword">if</span> ((p.x = curPoint.x + <span class="number">1</span>) &lt; X &amp;&amp; (p.y = curPoint.y + <span class="number">2</span>) &lt; Y) &#123;</span><br><span class="line">            ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p));<span class="comment">//这里需要新建一个点 不然会被覆盖</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断3点的位置</span></span><br><span class="line">        <span class="keyword">if</span> ((p.x = curPoint.x - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; (p.y = curPoint.y + <span class="number">2</span>) &lt; Y) &#123;</span><br><span class="line">            ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p));<span class="comment">//这里需要新建一个点 不然会被覆盖</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断4点的位置</span></span><br><span class="line">        <span class="keyword">if</span> ((p.x = curPoint.x - <span class="number">2</span>) &gt;= <span class="number">0</span> &amp;&amp; (p.y = curPoint.y + <span class="number">1</span>) &lt; Y) &#123;</span><br><span class="line">            ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p));<span class="comment">//这里需要新建一个点 不然会被覆盖</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（二十四） - MySQL数据库</title>
      <link href="/undefined/4a1b.html"/>
      <url>/undefined/4a1b.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">net start mysql <span class="comment">//启动mysql服务</span></span><br><span class="line">net stop mysql <span class="comment">//停止mysql服务</span></span><br><span class="line"><span class="comment">//本机默认端口3306登入</span></span><br><span class="line">mysql -u root -p <span class="comment">//进入mysql管理终端 -u 用户名 -p 密码(此处可不写，回车后再填也可以) </span></span><br><span class="line"><span class="comment">//连接Mysql数据库指令</span></span><br><span class="line">mysql -h 主机ip -P 端口 -u 用户名 -p密码</span><br><span class="line"><span class="comment">//-p密码 不需要待空格</span></span><br><span class="line"><span class="comment">//-p密码，密码可以省略回车后再输入</span></span><br><span class="line"><span class="comment">//-h 主机IP ，默认本机</span></span><br><span class="line"><span class="comment">//-P 端口， 默认3306</span></span><br><span class="line">flush privilesges <span class="comment">//刷新权限</span></span><br></pre></td></tr></table></figure><h3 id="数据库三层结构"><a href="#数据库三层结构" class="headerlink" title="数据库三层结构"></a>数据库三层结构</h3><ul><li>所谓的安装Mysql数据库，就是在主机安装一个数据库管理系统（DBMS：database manager system），这个管理程序可以管理多个数据库</li><li>一个数据库中可以创建多个表，以保存数据（信息）</li><li>普通表的本质仍然是文件</li></ul><p><img src="/undefined/4a1b/数据库管理系统、数据库、表间的关系.jpg" alt="数据库管理系统、数据库、表间的关系"></p><h3 id="数据库的范式"><a href="#数据库的范式" class="headerlink" title="数据库的范式"></a>数据库的范式</h3><ul><li>第一范式：列不可再分</li><li>第二范式：一张表只表达一层含义（只描述一件事情）</li><li>第三范式：表中的每一列和主键都是直接依赖关系，而不是间接依赖</li></ul><div class="note info flat"><p>数据库设计的范式和数据库的查询性能很多时候是相悖的，我们需要根据实际的业务情况做一个选择：</p><ul><li>查询频次不高的情况下，我们更倾向于提高数据库的设计范式，从而提高存储效率</li><li>查询频次较高的情形，我们更倾向于牺牲数据库的规范度，降低数据库设计的范式，允许特定的冗余，从而提高查询的性能</li></ul></div><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><p><img src="/undefined/4a1b/数据库存储方式.jpg" alt="数据库存储方式"></p><ul><li>表的一行称为一条记录，在Java程序中，一行记录往往用对象表示</li></ul><h3 id="SQL语句的分类"><a href="#SQL语句的分类" class="headerlink" title="SQL语句的分类"></a>SQL语句的分类</h3><ul><li>DDL：数据定义语句[create表，库.….]</li><li>DML：数据操作语句[增加insert,修改update,删除delete]</li><li>DQL：数据查询语句[select ]</li><li>DCL：数据控制语句[管理数据库:比如用户权限 grant revoke ]</li></ul><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p><img src="/undefined/4a1b/创建数据库.png" alt="创建数据库"></p><ul><li>CHARACTER SET：指定数据库采用的字符集，<strong>默认utf8</strong></li><li>COLLATE：指定数据库字符集的校对规则（通常采用<strong>utf8_bin[区分大小写]</strong>、<strong>utf8_general_ci[不区分大小写]</strong>，<strong>默认是utf8_general_ci</strong>）</li><li>规避关键字可以用反引号（`）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE db01;<span class="comment">//创建db01数据库</span></span><br><span class="line">CCREATE DATABASE `name`;<span class="comment">//使用反引号规避关键字</span></span><br></pre></td></tr></table></figure><h4 id="查看、删除数据库"><a href="#查看、删除数据库" class="headerlink" title="查看、删除数据库"></a>查看、删除数据库</h4><p><img src="/undefined/4a1b/查看、删除数据库.png" alt="查看删除数据库"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;<span class="comment">//显示数据库</span></span><br><span class="line">SHOW CREATE DATABASE db01;<span class="comment">//显示创建数据库语句</span></span><br><span class="line">DROP DATABASE db01;<span class="comment">//删除数据库</span></span><br></pre></td></tr></table></figure><h4 id="备份和恢复数据库"><a href="#备份和恢复数据库" class="headerlink" title="备份和恢复数据库"></a>备份和恢复数据库</h4><h5 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h5><ul><li>在dos下执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u 用户名 -p -B 数据库<span class="number">1</span> 数据库<span class="number">2</span> 数据库n &gt; 文件名.sql</span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line">mysqldump -u root -p -B db01 &gt; name.sql;</span><br></pre></td></tr></table></figure><h5 id="恢复数据库"><a href="#恢复数据库" class="headerlink" title="恢复数据库"></a>恢复数据库</h5><ul><li>进入SQLyog再执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Source 文件名.sql</span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line">Source name.sql</span><br></pre></td></tr></table></figure><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p><img src="/undefined/4a1b/创建表.png" alt="创建表"></p><h3 id="备份和回复表"><a href="#备份和回复表" class="headerlink" title="备份和回复表"></a>备份和回复表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备份数据库的表</span></span><br><span class="line">mysqldump -u 用户名 -p 密码 数据库 表<span class="number">1</span> 表<span class="number">2</span> 表n &gt; d:\\文件名.sql</span><br></pre></td></tr></table></figure><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><p><img src="/undefined/4a1b/修改表.png" alt="修改表"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改表名</span></span><br><span class="line">Rename table 表名 to 新表名;</span><br><span class="line"><span class="comment">//修改表字符集</span></span><br><span class="line">alter table 表名 character set 字符集;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改job列，使其长度为60</span></span><br><span class="line">ALTER TABLE emp </span><br><span class="line">MODIFY job <span class="title function_">VARCHAR</span><span class="params">(<span class="number">60</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="表复制"><a href="#表复制" class="headerlink" title="表复制"></a>表复制</h3><ul><li>自我复制数据（蠕虫复制）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">-- 表复制(蠕虫复制)</span><br><span class="line">CREATE TABLE <span class="title function_">my_tab01</span></span><br><span class="line"><span class="params">(id INT,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span>,</span><br><span class="line">sal DOUBLE,</span><br><span class="line">job <span class="title function_">VARCHAR</span><span class="params">(<span class="number">32</span>)</span>,</span><br><span class="line">deptno INT);</span><br><span class="line"></span><br><span class="line">DESC my_tab01;</span><br><span class="line">SELECT * FROM my_tab01;</span><br><span class="line"></span><br><span class="line">-- 自我复制</span><br><span class="line">-- <span class="number">1.</span> 把emp表复制到my_tab01表</span><br><span class="line">INSERT INTO <span class="title function_">my_tab01</span></span><br><span class="line"><span class="params">(id,`name`,sal,job,deptno)</span></span><br><span class="line">SELECT empno, ename, sal, job, deptno</span><br><span class="line">FROM emp;</span><br><span class="line">SELECT * FROM emp;</span><br><span class="line">-- 自我复制  每执行一次翻倍</span><br><span class="line">INSERT INTO my_tab01</span><br><span class="line">SELECT * FROM my_tab01;</span><br><span class="line"></span><br><span class="line">-- 删除一张重复的表</span><br><span class="line">-- <span class="number">1.</span> 先创建一张my_tab02</span><br><span class="line">-- <span class="number">2.</span> 让my_ tab02 有重复的记录</span><br><span class="line">CREATE TABLE my_tab02 LIKE emp;-- 把emp表的结构(列) 复制到my_tab02</span><br><span class="line"></span><br><span class="line">DESC my_tab02;</span><br><span class="line"></span><br><span class="line">INSERT INTO my_tab02</span><br><span class="line">SELECT * FROM emp;</span><br><span class="line">SELECT * FROM my_tab02;</span><br><span class="line"></span><br><span class="line">-- <span class="number">3.</span> 考虑去重</span><br><span class="line">-- (<span class="number">1</span>) 创建一个新的临时空表my_tem,该表结构与my_tab02一致</span><br><span class="line">CREATE TABLE my_tem LIKE my_tab02;</span><br><span class="line">-- (<span class="number">2</span>) 将my_tem 通过distinct 关键字处理后把记录复制到my_tem表</span><br><span class="line">INSERT INTO my_tem</span><br><span class="line">SELECT DISTINCT * FROM my_tab02;</span><br><span class="line">-- (<span class="number">3</span>) 清除my_tab02的所有记录</span><br><span class="line">DELETE FROM my_tab02;</span><br><span class="line">-- (<span class="number">4</span>) 把my_tem表的记录复制到my_tab02</span><br><span class="line">INSERT INTO my_tab02</span><br><span class="line">SELECT * FROM my_tem;</span><br><span class="line">-- (<span class="number">5</span>) drop 删除掉my_tem表</span><br><span class="line">DROP TABLE my_tem;</span><br><span class="line">-- </span><br><span class="line">SELECT * FROM my_tem</span><br></pre></td></tr></table></figure><h3 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示表结构 可以查看表所有的列</span></span><br><span class="line">DESC 表名 </span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line">DESC emp;</span><br></pre></td></tr></table></figure><h2 id="Mysql常用的数据类型（列类型）"><a href="#Mysql常用的数据类型（列类型）" class="headerlink" title="Mysql常用的数据类型（列类型）"></a>Mysql常用的数据类型（列类型）</h2><p><img src="/undefined/4a1b/Mysql列类型.png" alt="Mysql列类型"></p><p><img src="/undefined/4a1b/Mysql常用数据类型详情.png" alt></p><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><ul><li>在满足需求的情况下，尽量选者占用空间小的数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义无符号的整数</span></span><br><span class="line">create table <span class="title function_">t1</span> <span class="params">(id tinyint)</span>;<span class="comment">//默认是有符号的</span></span><br><span class="line">create table <span class="title function_">t1</span> <span class="params">(id tinyint unsigned)</span>;<span class="comment">//无符号定义</span></span><br></pre></td></tr></table></figure><h3 id="位类型"><a href="#位类型" class="headerlink" title="位类型"></a>位类型</h3><ul><li>bit字段显示时，按照位的方式显示</li><li>查询的时候仍然可以使用添加的数值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//基本使用</span><br><span class="line">create table t2 (num bit(M));//M范围 1~64</span><br></pre></td></tr></table></figure><h3 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FLOAT/DOUBLE[UNSIGNED]<span class="comment">//float 单精度，double 双精度</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可以支持更加精确的小数位，M是小数位数(精度)的总数,D是小数点(标度)后面的位数</span></span><br><span class="line"><span class="comment">如果D是0，则没有小数点 </span></span><br><span class="line"><span class="comment">M最大65，D最大是30；如果D被省略，默认是0，如果M被省略，默认是10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">DECIMAL[M,D][UNSIGNED]</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CHAR(size)<span class="comment">//固定长度字符串，最大255字符 </span></span><br><span class="line">VARCHAR(size)<span class="comment">//可变长度字符 最大65532字节 [utf8编码最大21844字符 其中1-3字节用于记录大小]</span></span><br></pre></td></tr></table></figure><h2 id="数据库crud"><a href="#数据库crud" class="headerlink" title="数据库crud"></a>数据库crud</h2><h3 id="insert-添加数据"><a href="#insert-添加数据" class="headerlink" title="insert 添加数据"></a>insert 添加数据</h3><p><img src="/undefined/4a1b/insert添加数据.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例</span></span><br><span class="line">insert into goods <span class="title function_">values</span><span class="params">(<span class="number">1</span>,<span class="number">200</span>)</span>;</span><br><span class="line"><span class="comment">//细节</span></span><br><span class="line"><span class="comment">//(1) 插入的数据应与字段的数据类型相同。比如把&#x27;abc&#x27;添加到int类型会错误</span></span><br><span class="line"><span class="comment">//(2) 数据的长度应在列的规定范围内，例如:不能将一个长度为80的字符串加入到长度为40的列中。</span></span><br><span class="line"><span class="comment">//(3) 在values中列出的数据位置必须与被加入的列的排列位置相对应。</span></span><br><span class="line"><span class="comment">//(4) 字符和日期型数据应包含在单引号中。</span></span><br><span class="line"><span class="comment">//(5) 列可以插入空值[前提是该字段允许为空]，insert into table value(null)</span></span><br><span class="line"><span class="comment">//(6) insert into tab name(列名..) values (),(),() 形式添加多条记录</span></span><br><span class="line"><span class="comment">//(7) 如果是给表中的所有字段添加数据，可以不写前面的字段名称</span></span><br><span class="line"><span class="comment">//(8) 默认值的使用，当不给某个字段值时，如果有默认值就会添加，否则报错</span></span><br></pre></td></tr></table></figure><h3 id="update-修改数据"><a href="#update-修改数据" class="headerlink" title="update 修改数据"></a>update 修改数据</h3><p><img src="/undefined/4a1b/update修改数据.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例</span></span><br><span class="line">update goods <span class="type">set</span> <span class="variable">sal</span> <span class="operator">=</span> <span class="number">2</span> <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//细节</span></span><br><span class="line"><span class="comment">//(1) UPDATE语法可以用新值更新原有表行中的各列。</span></span><br><span class="line"><span class="comment">//(2) SET子句指示要修改哪些列和要给予哪些值。</span></span><br><span class="line"><span class="comment">//(3) WHERE子句指定应更新哪些行。如没有WHERE子句,则更新所有的行。</span></span><br><span class="line"><span class="comment">//(4)如果需要修改多个字段,可以通过set字段1=值1,字段2=值2.….</span></span><br></pre></td></tr></table></figure><h3 id="delete-删除数据"><a href="#delete-删除数据" class="headerlink" title="delete 删除数据"></a>delete 删除数据</h3><p><img src="/undefined/4a1b/delete删除数据.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例</span></span><br><span class="line">delete from goods <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//细节</span></span><br><span class="line"><span class="comment">//(1) 如果不使用where子句，将删除表中所有数据。</span></span><br><span class="line"><span class="comment">//(2) Delete语句不能删除某一列的值(可使用update 设为null或者&quot;&quot;)使用delete语句仅删除记录，不删除表本身。</span></span><br><span class="line"><span class="comment">//(3) 如要删除表，使用drop语句。drop table表名;</span></span><br></pre></td></tr></table></figure><h3 id="select-查询数据"><a href="#select-查询数据" class="headerlink" title="select 查询数据"></a>select 查询数据</h3><p><img src="/undefined/4a1b/select查询数据.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例</span></span><br><span class="line">select * from goods;</span><br><span class="line"><span class="comment">//细节</span></span><br><span class="line"><span class="comment">//(1) Select 指定查询哪些列的数据。</span></span><br><span class="line"><span class="comment">//(2) column指定列名。</span></span><br><span class="line"><span class="comment">//(3) *号代表查询所有列。</span></span><br><span class="line"><span class="comment">//(4) From指定查询哪张表。</span></span><br><span class="line"><span class="comment">//(5) DISTINCT可选,指显示结果时,是否去掉重复数据</span></span><br></pre></td></tr></table></figure><h4 id="使用表达式对查询的列进行运算"><a href="#使用表达式对查询的列进行运算" class="headerlink" title="使用表达式对查询的列进行运算"></a>使用表达式对查询的列进行运算</h4><p><img src="/undefined/4a1b/select查询运算.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,(math + chinese + english) from students;</span><br></pre></td></tr></table></figure><h4 id="给列取别名"><a href="#给列取别名" class="headerlink" title="给列取别名"></a>给列取别名</h4><p><img src="/undefined/4a1b/select给列取别名.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name as <span class="string">&#x27;名字&#x27;</span> from students;</span><br></pre></td></tr></table></figure><h4 id="where-选择查询"><a href="#where-选择查询" class="headerlink" title="where 选择查询"></a>where 选择查询</h4><div class="table-container"><table><thead><tr><th>比较运算符</th><th>&gt;  &lt;  &lt;=  &gt;=  =  &lt;&gt;  !=</th><th>大于、小于、大于（小于）等于、不等于</th></tr></thead><tbody><tr><td></td><td><strong>between…and…</strong></td><td><strong>显示某一区间的值</strong></td></tr><tr><td></td><td><strong>in(set)</strong></td><td><strong>显示在in列表中的值，in(100,200)</strong></td></tr><tr><td></td><td><strong>like ‘张pattern’  not like</strong></td><td><strong>模糊查询</strong></td></tr><tr><td></td><td><strong>is null</strong></td><td><strong>判断是否为空</strong></td></tr><tr><td><strong>逻辑运算符</strong></td><td><strong>and</strong></td><td><strong>多个条件同时成立</strong></td></tr><tr><td></td><td><strong>or</strong></td><td><strong>多个条件任一条件成立</strong></td></tr><tr><td></td><td><strong>not</strong></td><td><strong>不成立</strong></td></tr></tbody></table></div><h4 id="order-by-排序查询"><a href="#order-by-排序查询" class="headerlink" title="order by 排序查询"></a>order by 排序查询</h4><p><img src="/undefined/4a1b/orderby排序.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例</span></span><br><span class="line">SELECT * FROM emp </span><br><span class="line">ORDER BY sal;</span><br><span class="line"><span class="comment">//细节</span></span><br><span class="line"><span class="comment">//(1) Order by 指定排序的列，排序的列既可以是表中的列名，也可以是select语句后指定的列名。</span></span><br><span class="line"><span class="comment">//(2) Asc升序[默认]、Desc降序</span></span><br><span class="line"><span class="comment">//(3) ORDER BY子句应位于SELECT语句的结尾。</span></span><br></pre></td></tr></table></figure><h4 id="count-合计函数"><a href="#count-合计函数" class="headerlink" title="count 合计函数"></a>count 合计函数</h4><p><img src="/undefined/4a1b/count合计函数.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//案例</span></span><br><span class="line">SELECT <span class="title function_">COUNT</span><span class="params">(*)</span> FROM student;</span><br><span class="line"><span class="comment">//细节</span></span><br><span class="line"><span class="comment">//(1) 如果该值是null就不会统计</span></span><br><span class="line"><span class="comment">//(2) count返回行的总数</span></span><br><span class="line"><span class="comment">// count(*) 和 count(列) 的区别</span></span><br><span class="line"><span class="comment">// count(*)  返回满足条件的记录的行数</span></span><br><span class="line"><span class="comment">// count(列)：统计满足条件的某列有多少 但是会排除 为null的情况</span></span><br></pre></td></tr></table></figure><h4 id="sum-求和"><a href="#sum-求和" class="headerlink" title="sum 求和"></a>sum 求和</h4><p><img src="/undefined/4a1b/sum求和.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统计一个班级语文、英语、数学各科的总成绩</span></span><br><span class="line">SELECT <span class="title function_">SUM</span><span class="params">(math)</span> AS 数学总分, SUM(english) AS 英语总分, SUM(chinese) AS 语文总分 FROM student;</span><br></pre></td></tr></table></figure><h4 id="AVG-平均值"><a href="#AVG-平均值" class="headerlink" title="AVG 平均值"></a>AVG 平均值</h4><p><img src="/undefined/4a1b/AVG平均值.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求一个班级总分平均分</span></span><br><span class="line">SELECT <span class="title function_">AVG</span><span class="params">(chinese + english + math)</span> FROM student;</span><br></pre></td></tr></table></figure><h4 id="Max-Min-最大-最小值"><a href="#Max-Min-最大-最小值" class="headerlink" title="Max/Min 最大/最小值"></a>Max/Min 最大/最小值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Max Min 函数的使用</span></span><br><span class="line"><span class="comment">// 求班级最高分 和最低分</span></span><br><span class="line">SELECT <span class="title function_">MAX</span><span class="params">(chinese + english + math)</span>, MIN(chinese + english + math) FROM student;</span><br></pre></td></tr></table></figure><h4 id="group-by-分组"><a href="#group-by-分组" class="headerlink" title="group by 分组"></a>group by 分组</h4><p><img src="/undefined/4a1b/groupby分组.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示平均工资低于2000的部门号和它的平均工资//别名 </span></span><br><span class="line"><span class="comment">// 1. 显示均工资低于2000的部门号</span></span><br><span class="line">SELECT <span class="title function_">AVG</span><span class="params">(sal)</span>,deptno FROM emp GROUP BY deptno;</span><br></pre></td></tr></table></figure><ul><li>使用having子句对分组后的结果进行过滤</li></ul><p><img src="/undefined/4a1b/having过滤.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 显示平均工资低于2000的部门号和它的平均工资</span></span><br><span class="line">SELECT <span class="title function_">AVG</span><span class="params">(sal)</span>,deptno FROM emp GROUP BY deptno HAVING <span class="title function_">AVG</span><span class="params">(sal)</span> &lt; <span class="number">2000</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h4><div class="table-container"><table><thead><tr><th>CHARSET(str)</th><th>返回字串字符集</th></tr></thead><tbody><tr><td><strong>CONCAT(string2 [,….])</strong></td><td><strong>连接字符串</strong></td></tr><tr><td><strong>INSERT(string , substring)</strong></td><td><strong>返回substring在string中出现的位置，没有就返回0</strong></td></tr><tr><td><strong>UCASE(string2)</strong></td><td><strong>转换成大写</strong></td></tr><tr><td><strong>LCASE(string2)</strong></td><td><strong>转换成小写</strong></td></tr><tr><td><strong>LEFT(string2, length)</strong></td><td><strong>从string2中的左边起取length个字符</strong></td></tr><tr><td><strong>LENGTH(string)</strong></td><td><strong>string长度[按照字节]</strong></td></tr><tr><td><strong>REPLACE(str , search_str, replace_str)</strong></td><td><strong>在str中用replace_str替换search_str</strong></td></tr><tr><td><strong>STRCMP(string1, string2)</strong></td><td><strong>逐字符比较两个字符串</strong></td></tr><tr><td><strong>SUBSTRING(str, position [,length])</strong></td><td><strong>从str的position开始[从1开始计算], 取length个字符</strong></td></tr><tr><td><strong>LTRIM(string2)RTRIM(string2)trim</strong></td><td><strong>去除前端空格或后端空格</strong></td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">-- 字符串相关的函数的使用 </span><br><span class="line">-- CHARSET(str) 返回字串字符集</span><br><span class="line">SELECT <span class="title function_">CHARSET</span><span class="params">(ename)</span> FROM emp;</span><br><span class="line">-- CONCAT (string2 [,....]) 连接子串，将多个列拼接成一列</span><br><span class="line">SELECT <span class="title function_">CONCAT</span> <span class="params">(ename, <span class="string">&#x27; 工作是 &#x27;</span>, job)</span> FROM emp;</span><br><span class="line"></span><br><span class="line">-- INSTR(string, substring)  返回substring 在 string 中出现的位置, 没有返回<span class="number">0</span></span><br><span class="line">-- dual 亚元表 系统表 可以作为测试表使用</span><br><span class="line">SELECT <span class="title function_">INSTR</span> <span class="params">(<span class="string">&#x27;zhibi&#x27;</span>, <span class="string">&#x27;bi&#x27;</span>)</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- UCASE(string2)  转换成大写</span><br><span class="line">SELECT <span class="title function_">UCASE</span><span class="params">(ename)</span> FROM emp;</span><br><span class="line"></span><br><span class="line">-- LCASE(string2) 转换成小写</span><br><span class="line">SELECT <span class="title function_">LCASE</span><span class="params">(ename)</span> FROM emp;</span><br><span class="line">-- LEFT(string2, length)  从string2中的左边起取length个字符</span><br><span class="line">-- RIGHT(string2, length)  从string2中的右边起取length个字符</span><br><span class="line">SELECT <span class="title function_">LEFT</span><span class="params">(ename, <span class="number">2</span>)</span> FROM emp;</span><br><span class="line"></span><br><span class="line">-- LENGTH (string) string 长度[按照字节]</span><br><span class="line">SELECT <span class="title function_">LENGTH</span> <span class="params">(ename)</span> FROM emp;</span><br><span class="line">-- REPLACE(str, search str, replacr str) 在str中 用 replace str替换 search str</span><br><span class="line">SELECT ename, REPLACE(job, <span class="string">&#x27;MANAGER&#x27;</span>,<span class="string">&#x27;经理&#x27;</span>) FROM emp;</span><br><span class="line"></span><br><span class="line">-- STRCMP(string1, string2) 逐字符比较量字串大小</span><br><span class="line">SELECT <span class="title function_">STRCMP</span><span class="params">(<span class="string">&#x27;ZB&#x27;</span>,<span class="string">&#x27;ZB&#x27;</span>)</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- SUBSTRING(str, position [, length]) 从str的position开始[从<span class="number">1</span>开始计算]</span><br><span class="line">SELECT <span class="title function_">SUBSTRING</span><span class="params">(ename, <span class="number">1</span>, <span class="number">2</span>)</span> FROM emp;</span><br><span class="line">-- LTRIM(string2) RTRIM(string2) trim 去除前端空格或后端空格</span><br><span class="line">SELECT <span class="title function_">LTRIM</span><span class="params">(<span class="string">&#x27;     执笔&#x27;</span>)</span> FROM DUAL;</span><br><span class="line">SELECT <span class="title function_">LTRIM</span><span class="params">(<span class="string">&#x27;执笔     &#x27;</span>)</span> FROM DUAL;</span><br><span class="line">SELECT <span class="title function_">TRIM</span><span class="params">(<span class="string">&#x27;     执笔     &#x27;</span>)</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- 以首字母小写的方式显示所有emp员工的姓名</span><br><span class="line">-- <span class="number">1.</span> 首字母小写</span><br><span class="line">-- <span class="number">2.</span> 获取除首字母的所有字母</span><br><span class="line">-- <span class="number">3.</span> 拼接 </span><br><span class="line">SELECT <span class="title function_">CONCAT</span> <span class="params">(LCASE(LEFT(ename,<span class="number">1</span>)</span>), SUBSTRING(ename, <span class="number">2</span>)) FROM emp;</span><br><span class="line"></span><br><span class="line">-- 第二种方式</span><br><span class="line">-- <span class="number">1.</span> 获取首字母小写</span><br><span class="line">SELECT <span class="title function_">LCASE</span><span class="params">(LEFT(ename,<span class="number">1</span>)</span>) FROM emp;</span><br><span class="line">-- <span class="number">2.</span> 替换第一个字母</span><br><span class="line">SELECT <span class="title function_">REPLACE</span><span class="params">(ename,LEFT(ename,<span class="number">1</span>)</span>,LCASE(LEFT(ename,<span class="number">1</span>))) FROM emp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a>数学相关函数</h4><div class="table-container"><table><thead><tr><th>ABS(num)</th><th>绝对值</th></tr></thead><tbody><tr><td><strong>BIN(decimal_number)</strong></td><td><strong>十进制转二进制</strong></td></tr><tr><td><strong>CEILING(number2)</strong></td><td><strong>向上取整，得到比num2大的最小整数</strong></td></tr><tr><td><strong>CONV(number2, from_base, to_base)</strong></td><td><strong>进制转换</strong></td></tr><tr><td><strong>FLOOR(number2)</strong></td><td><strong>向下取整，得到比num2小的最大整数</strong></td></tr><tr><td><strong>FORMAT(number, decimal_place)</strong></td><td><strong>保留小数位数</strong></td></tr><tr><td><strong>HEX(DecimalNumber)</strong></td><td><strong>转十六进制</strong></td></tr><tr><td><strong>LEAST(number, number2[,….])</strong></td><td><strong>求最小值</strong></td></tr><tr><td><strong>MOD(numberator, denominator)</strong></td><td><strong>求余</strong></td></tr><tr><td><strong>RAND([seed])</strong></td><td><strong>返回一个随机浮点值v，范围0≤v≤1.0**</strong>；诺已指定一个整数N，则它被用作种子值，用来产生重复序列**</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-- 数学相关函数</span><br><span class="line">--ABS (num)绝对值</span><br><span class="line">SELECT <span class="title function_">ABS</span> <span class="params">(-<span class="number">10</span>)</span>FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- BIN(decimal number ) 十进制转二进制</span><br><span class="line">SELECT <span class="title function_">BIN</span><span class="params">(<span class="number">10</span>)</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- CEILING (number2 )向上取整，得到比num2大的最小整数</span><br><span class="line">SELECT <span class="title function_">CEILING</span> <span class="params">(-<span class="number">1.1</span>)</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- CONV (number2 ,from_base , to_base)进制转换 conv 全称 convert转换</span><br><span class="line">-- <span class="number">8</span> 是十进制数，转换为<span class="number">2</span>进制输出</span><br><span class="line">SELECT <span class="title function_">CONV</span> <span class="params">(<span class="number">8</span> , <span class="number">10</span>, <span class="number">2</span>)</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- FLOOR (number2 )向下取整,得到比 num2小的最大整数</span><br><span class="line">SELECT <span class="title function_">FLOOR</span><span class="params">(<span class="number">1.1</span>)</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- FORMAT(number ,decimal places )保留小数位数(四舍五入)</span><br><span class="line">SELECT <span class="title function_">FORMAT</span><span class="params">(<span class="number">12.12354668</span>,<span class="number">2</span>)</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- HEX(DecimalNumber )转十六进制</span><br><span class="line"></span><br><span class="line">-- LEAST (number , number2[ ,..])求最小值</span><br><span class="line">SELECT <span class="title function_">LEAST</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,-<span class="number">10</span>,<span class="number">8</span>)</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- MOD(numerator ,denominator )求余</span><br><span class="line">SELECT <span class="title function_">MOD</span><span class="params">(<span class="number">10</span>, <span class="number">3</span>)</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- RAND ( [seed]) RAND ( [seed])其范围为<span class="number">0</span> ≤ v ≤ <span class="number">1.0</span> 随机数</span><br><span class="line">-- 会变的随机数 rand()</span><br><span class="line">SELECT <span class="title function_">RAND</span><span class="params">()</span> FROM DUAL;</span><br><span class="line">-- 一旦执行就不变化的随机数 rand(seed) seed不变 随机数不变化</span><br><span class="line">SELECT <span class="title function_">RAND</span><span class="params">(<span class="number">6</span>)</span> FROM DUAL;</span><br></pre></td></tr></table></figure><h4 id="时间日期相关函数"><a href="#时间日期相关函数" class="headerlink" title="时间日期相关函数"></a>时间日期相关函数</h4><div class="table-container"><table><thead><tr><th>CURRENT_DATE()</th><th>当前时间</th></tr></thead><tbody><tr><td><strong>CURRENT_TIME()</strong></td><td><strong>当前日期</strong></td></tr><tr><td><strong>CURRENT_TIMESTAMP()</strong></td><td><strong>当前时间戳</strong></td></tr><tr><td><strong>DATE(datetime)</strong></td><td><strong>返回datetime的日期部分</strong></td></tr><tr><td><strong>DATE_ADD(date2, INTERVAL d_value d_type)</strong></td><td><strong>在data2中加上日期或时间</strong></td></tr><tr><td><strong>DATE_SUB(date2, INTERVAL d_value d_type)</strong></td><td><strong>在data2中减去日期或时间</strong></td></tr><tr><td><strong>DATEDIFF(date1, date2)</strong></td><td><strong>两个日期时间差(结果是多少天)</strong></td></tr><tr><td><strong>TIMEDIFF(date1, date2)</strong></td><td><strong>两个时间差(多少小时多少分钟多少秒)</strong></td></tr><tr><td><strong>NOW()</strong></td><td><strong>当前时间</strong></td></tr><tr><td><strong>YEAR、Month、DATE(datetime)、FROM_UNIXTIME()</strong></td><td><strong>年月日</strong></td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">-- 日期时间相关函数的使用</span><br><span class="line">-- CURRENT_DATE () 当前日期</span><br><span class="line">SELECT <span class="title function_">CURRENT_DATE</span><span class="params">()</span> FROM DUAL;</span><br><span class="line">-- CURRENT_TIME () 当前时间</span><br><span class="line">SELECT <span class="title function_">CURRENT_TIME</span><span class="params">()</span> FROM DUAL;</span><br><span class="line">-- CURRENT_TIMESTAMP () 当前时间戳</span><br><span class="line">SELECT <span class="title function_">CURRENT_TIMESTAMP</span><span class="params">()</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- 创建一张存放信息的表</span><br><span class="line">CREATE TABLE <span class="title function_">mes</span><span class="params">(</span></span><br><span class="line"><span class="params">id INT,</span></span><br><span class="line"><span class="params">content VARCHAR(<span class="number">30</span>)</span>,</span><br><span class="line">send_time DATETIME);</span><br><span class="line"></span><br><span class="line">INSERT INTO mes </span><br><span class="line"><span class="title function_">VALUES</span><span class="params">(<span class="number">1</span>, <span class="string">&#x27;新闻联播&#x27;</span>, CURRENT_TIMESTAMP()</span>);</span><br><span class="line">INSERT INTO mes </span><br><span class="line"><span class="title function_">VALUES</span><span class="params">(<span class="number">2</span>, <span class="string">&#x27;浙江新闻&#x27;</span>, NOW()</span>);</span><br><span class="line">INSERT INTO mes </span><br><span class="line"><span class="title function_">VALUES</span><span class="params">(<span class="number">3</span>, <span class="string">&#x27;广州新闻&#x27;</span>, NOW()</span>);</span><br><span class="line"></span><br><span class="line">SELECT * FROM mes;</span><br><span class="line">SELECT <span class="title function_">NOW</span><span class="params">()</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- 上应用实例</span><br><span class="line">-- 显示所有新闻信息，发布日期只显示日期，不用显示时间.</span><br><span class="line">SELECT id, content,DATE(send_time)</span><br><span class="line">FROM mes;</span><br><span class="line">-- 请查询在<span class="number">10</span>分钟内发布的帖子</span><br><span class="line">SELECT * </span><br><span class="line">FROM mes</span><br><span class="line">WHERE <span class="title function_">DATE_ADD</span><span class="params">(send_time, INTERVAL <span class="number">10</span> MINUTE)</span> &gt;= NOW();</span><br><span class="line">SELECT * </span><br><span class="line">FROM mes</span><br><span class="line">WHERE send_time &gt;= DATE_SUB(NOW(), INTERVAL <span class="number">10</span> MINUTE);</span><br><span class="line"></span><br><span class="line">-- 请在mysql的sql语句中求出 <span class="number">2011</span>-<span class="number">11</span>-<span class="number">11</span>和<span class="number">1990</span>-<span class="number">1</span>-<span class="number">1</span>相差多少天</span><br><span class="line">SELECT <span class="title function_">DATEDIFF</span><span class="params">(<span class="string">&#x27;2011-11-11&#x27;</span>,<span class="string">&#x27;1990-01-01&#x27;</span>)</span> FROM DUAL;</span><br><span class="line">-- 请用mysgl 的sql语句求出你活了多少天?[练习]</span><br><span class="line">SELECT <span class="title function_">DATEDIFF</span><span class="params">(NOW()</span>,<span class="string">&#x27;1998-06-05&#x27;</span>) FROM DUAL;</span><br><span class="line">-- 如果你能活<span class="number">80</span>岁，求出你还能活多少天.[练习]</span><br><span class="line">-- 先求出活<span class="number">80</span>岁时的日期</span><br><span class="line">SELECT <span class="title function_">DATE_ADD</span><span class="params">(<span class="string">&#x27;1998-06-05&#x27;</span>, INTERVAL <span class="number">80</span> YEAR)</span> FROM DUAL;</span><br><span class="line">-- 计算还能活多少天</span><br><span class="line">SELECT <span class="title function_">DATEDIFF</span><span class="params">(DATE_ADD(<span class="string">&#x27;1998-06-05&#x27;</span>, INTERVAL <span class="number">80</span> YEAR)</span>,NOW()) FROM DUAL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- YEAR|MONTH|DAY| DATE(datetime)</span><br><span class="line">SELECT <span class="title function_">YEAR</span><span class="params">(NOW()</span>) FROM DUAL;</span><br><span class="line">SELECT <span class="title function_">MONTH</span><span class="params">(NOW()</span>) FROM DUAL;</span><br><span class="line">SELECT <span class="title function_">DAY</span><span class="params">(NOW()</span>) FROM DUAL;</span><br><span class="line">SELECT <span class="title function_">MONTH</span><span class="params">(<span class="string">&#x27;2022-6-17&#x27;</span>)</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- unix_timestamp()  返回的是<span class="number">1970</span>-<span class="number">1</span>-<span class="number">1</span> 到现在的秒数</span><br><span class="line">SELECT <span class="title function_">UNIX_TIMESTAMP</span><span class="params">()</span> FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- FROM_UNIXTIME() 可以把unix_timestamp 秒数 转成指定格式的日期</span><br><span class="line">-- %Y-%m-%d %H:%i:%s 固顶格式 表示年月日时分秒</span><br><span class="line">-- 意义：在开发中，存放一个整数，然后表示时间，通过FROM_UNIXTIME转换</span><br><span class="line">SELECT <span class="title function_">FROM_UNIXTIME</span><span class="params">(UNIX_TIMESTAMP()</span>, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) FROM DUAL;</span><br></pre></td></tr></table></figure><h4 id="加密和系统函数"><a href="#加密和系统函数" class="headerlink" title="加密和系统函数"></a>加密和系统函数</h4><div class="table-container"><table><thead><tr><th>USER()</th><th>查询用户</th></tr></thead><tbody><tr><td><strong>DATABASE()</strong></td><td><strong>数据库名称</strong></td></tr><tr><td><strong>MD5(str)</strong></td><td><strong>为字符串算出一个MD5 32位的字符串, (用户密码)加密</strong></td></tr><tr><td><strong>PASSWORD(str)</strong></td><td><strong>从原文密码str计算并返回密码字符串，通常用于对mysql数据库的用户密码加密</strong></td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-- 加密和系统函数使用</span><br><span class="line"></span><br><span class="line">-- USER() 查询用户</span><br><span class="line">-- 可以查看登入到mysql的有哪些用户，以及登入的IP</span><br><span class="line">SELECT <span class="title function_">USER</span><span class="params">()</span> FROM DUAL;-- 用户<span class="meta">@IP</span>地址</span><br><span class="line">-- DATABASE() 查询当前使用数据库的名称</span><br><span class="line">SELECT <span class="title function_">DATABASE</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">-- MD5(str)  为字符串算出一个MD5 <span class="number">32</span>的字符串 常用(用户密码加密)</span><br><span class="line">-- root 密码是 <span class="number">123456</span>--&gt; 加密md5 -&gt; 在数据库中存放的加密后的密码</span><br><span class="line">SELECT <span class="title function_">MD5</span><span class="params">(<span class="string">&#x27;123456&#x27;</span>)</span> FROM DUAL;</span><br><span class="line">SELECT <span class="title function_">LENGTH</span><span class="params">(MD5(<span class="string">&#x27;123456&#x27;</span>)</span>) FROM DUAL;</span><br><span class="line"></span><br><span class="line">-- 演示用户表 存放密码是md5</span><br><span class="line">CREATE TABLE <span class="title function_">zb_user</span></span><br><span class="line"><span class="params">(id INT,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">psw <span class="title function_">CHAR</span><span class="params">(<span class="number">32</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">INSERT INTO zb_user <span class="title function_">VALUES</span><span class="params">(<span class="number">1</span>,<span class="string">&#x27;执笔&#x27;</span>, MD5(<span class="string">&#x27;123456&#x27;</span>)</span>);</span><br><span class="line"></span><br><span class="line">SELECT * FROM zb_user;</span><br><span class="line"></span><br><span class="line">SELECT * FROM zb_user</span><br><span class="line">WHERE `name` = <span class="string">&#x27;执笔&#x27;</span> <span class="type">AND</span> <span class="variable">psw</span> <span class="operator">=</span> MD5(<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line">-- PASSWORD(str) 加密函数 mysql数据库的用户密码就是PASSWORD函数加密</span><br><span class="line">SELECT <span class="title function_">PASSWORD</span><span class="params">(<span class="string">&#x27;123456&#x27;</span>)</span> FROM DUAL;</span><br><span class="line">-- mysql.user 表示 数据库.表</span><br><span class="line">SELECT * FROM mysql.user;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h4><div class="table-container"><table><thead><tr><th>IF(expr1, expr2, expr3)</th><th>如果expr1为true,则返回expr2否则返回expr3</th></tr></thead><tbody><tr><td><strong>IFNULL(expr1, expr2)</strong></td><td><strong>如果expr1不为空，则返回expr1，否则返回expr2</strong></td></tr><tr><td><strong>SELECT CASE WHERE expr1 THEN expr2 WHERE expr3 THEN expr4 ELSE expr5 END;[类似多重分支]</strong></td><td><strong>如果expr1为true，则返回expr2，如果expr2为true，返回expr4，否则返回expr5</strong></td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-- 流程控制语句</span><br><span class="line"></span><br><span class="line">-- IF(expr1,expr2,expr3) 如果expr1为<span class="literal">true</span> 就返回expr2 否则返回expr3</span><br><span class="line">SELECT <span class="title function_">IF</span><span class="params">(TRUE,<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>)</span> FROM DUAL;</span><br><span class="line">-- IFNULL(expr1,expr2) 如果expr1不为空<span class="literal">null</span>，则返回expr1 否则返回expr2</span><br><span class="line">SELECT <span class="title function_">IFNULL</span><span class="params">(NULL, <span class="string">&#x27;执笔&#x27;</span>)</span> FROM DUAL;</span><br><span class="line">-- #SELECT CASE WHEN expr1 THEN expr2 WHEN expr3 THEN expr4 ELSB expr5 END;[类似多重分支]</span><br><span class="line">-- 如果expr1为TRUE,则返回expr2,如果expr3为t，返回expr4，否则返回expr5</span><br><span class="line">SELECT CASE </span><br><span class="line">WHEN TRUE THEN <span class="string">&#x27;jack&#x27;</span> </span><br><span class="line">WHEN FALSE THEN <span class="string">&#x27;tom&#x27;</span> </span><br><span class="line">ELSE <span class="string">&#x27;mary&#x27;</span> END;</span><br><span class="line"></span><br><span class="line">-- <span class="number">1.</span> 查询emp表 如果 comm是<span class="literal">null</span> 则显示<span class="number">0.0</span></span><br><span class="line">SELECT ename, IFNULL(comm,<span class="number">0.0</span>) FROM emp;</span><br><span class="line">-- 判断是否为<span class="literal">null</span> 要使用 is <span class="literal">null</span> 半段不为空 使用 is not</span><br><span class="line">SELECT ename,IF(comm IS NULL,<span class="number">0.0</span>,comm) FROM emp;</span><br><span class="line"></span><br><span class="line">-- <span class="number">2.</span> 如果emp 表是job是CLERK 则显示职员 MANAGER显示经理 SALESMAN显示销售人员 其他正常</span><br><span class="line">SELECT ename,(SELECT CASE </span><br><span class="line"><span class="type">WHEN</span> <span class="variable">job</span> <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span> THEN <span class="string">&#x27;职员&#x27;</span> </span><br><span class="line"><span class="type">WHEN</span> <span class="variable">job</span> <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> THEN <span class="string">&#x27;经理&#x27;</span> </span><br><span class="line"><span class="type">WHEN</span> <span class="variable">job</span> <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> THEN <span class="string">&#x27;销售人员&#x27;</span> </span><br><span class="line">ELSE job END) AS <span class="string">&#x27;job&#x27;</span>,job</span><br><span class="line">FROM emp;</span><br></pre></td></tr></table></figure><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><ul><li>即单张表查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 查询加强</span><br><span class="line">-- 使用where子句</span><br><span class="line">-- 如何查找<span class="number">1992.1</span><span class="number">.1</span>后入职的员工</span><br><span class="line">-- 在mysql中，日期类型可以直接比较</span><br><span class="line">SELECT * FROM emp</span><br><span class="line">WHERE hiredate &gt; <span class="string">&#x27;1992-01-01&#x27;</span></span><br><span class="line">-- 如何使用like操作符</span><br><span class="line">-- %表示<span class="number">0</span>到多个字符  </span><br><span class="line">-- _表示单个字符 </span><br><span class="line"></span><br><span class="line">-- 如何显示首字符为s的员工姓名和工资</span><br><span class="line">SELECT ename, sal FROM emp </span><br><span class="line">WHERE ename LIKE <span class="string">&#x27;S%&#x27;</span>;</span><br><span class="line">-- 如何显示第三个字符为大写o的所有员工的姓名和工资</span><br><span class="line">SELECT ename, sal FROM emp</span><br><span class="line">WHERE ename LIKE <span class="string">&#x27;__o%&#x27;</span>;</span><br><span class="line">-- 如何显示没有上级的雇员的情况</span><br><span class="line">SELECT * FROM emp</span><br><span class="line">WHERE mgr IS NULL;</span><br><span class="line">-- 查询表结构</span><br><span class="line">DESC emp;</span><br></pre></td></tr></table></figure><h3 id="limit分页查询"><a href="#limit分页查询" class="headerlink" title="limit分页查询"></a>limit分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 公式</span><br><span class="line">SELECT * FROM emp</span><br><span class="line">ORDER BY empno</span><br><span class="line">LIMIT 每页显示记录数 * (第几页-<span class="number">1</span>), 每页显示的记录数;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 按照雇员的empno号降序取出 每页显示<span class="number">5</span>条记录 分别显示第<span class="number">3</span>页 第<span class="number">5</span>页对应的sql语句</span><br><span class="line">-- 第三页</span><br><span class="line">SELECT * FROM emp</span><br><span class="line">ORDER BY empno DESC</span><br><span class="line">LIMIT <span class="number">10</span>,<span class="number">5</span>;</span><br><span class="line">-- 第五页</span><br><span class="line">SELECT * FROM emp</span><br><span class="line">ORDER BY empno DESC</span><br><span class="line">LIMIT <span class="number">20</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h3><p><img src="/undefined/4a1b/数据分组顺序.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 请统计各个部门的平均工资，并且是大于<span class="number">1000</span>的,并且按照平均工资从高到纸排序，</span><br><span class="line">-- 取出前两行记录.</span><br><span class="line">SELECT <span class="title function_">AVG</span><span class="params">(sal)</span> AS avg_sal, deptno</span><br><span class="line">FROM emp</span><br><span class="line">GROUP BY deptno </span><br><span class="line">HAVING avg_sal &gt; <span class="number">1000</span></span><br><span class="line">ORDER BY avg_sal DESC</span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ul><li>基于多个表进行查询</li></ul><h3 id="笛卡尔集"><a href="#笛卡尔集" class="headerlink" title="笛卡尔集"></a>笛卡尔集</h3><p><img src="/undefined/4a1b/笛卡尔集.png" alt></p><ul><li><p>在默认情况下，当两个表查询时，规则：</p><ul><li><p>从第一张表中取出一行和第二张表中的每一行进行组合，返回结果[含有两张表的所有列]</p></li><li><p>一共返回的记录数第一张表行数 * 第二张表的行数</p></li><li><p>多表默查询返回的结果，称为笛卡尔集</p></li></ul></li><li><p>解决方案：</p><ul><li><strong>添加过滤条件where</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename, sal, dname,emp.deptno </span><br><span class="line">FROM emp,dept</span><br><span class="line">WHERE emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><ul><li>指在同一张表的连接查询[将一张表看做两张表]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--  多表查询  自连接</span><br><span class="line">-- 显示公司员工 和他的上级的名字</span><br><span class="line">-- 员工名字在emp 上级的名字在emp </span><br><span class="line">-- 员工和上级是通过 emp表 的mgr列关联</span><br><span class="line">-- 自连接特点：</span><br><span class="line">-- <span class="number">1.</span> 把同一张表当做两张表使用</span><br><span class="line">-- <span class="number">2.</span> 需要给表取别名 格式： 表 别名</span><br><span class="line"></span><br><span class="line">SELECT worker.ename AS <span class="string">&#x27;职员名&#x27;</span>, boss.ename AS <span class="string">&#x27;上级名&#x27;</span></span><br><span class="line">FROM emp worker, emp boss</span><br><span class="line">WHERE worker.mgr = boss.empno;</span><br><span class="line"></span><br><span class="line">SELECT * FROM emp;</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li>指嵌入在其他sql语句中的select语句，也叫嵌套查询</li></ul><h4 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h4><ul><li>指只返回一行数据的子查询语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 子查询使用 嵌套查询</span><br><span class="line">-- 如何显示与SMITH同一部门的所有员工</span><br><span class="line">-- 单行子查询</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1. 先把查询到的SMITH的部门得到</span></span><br><span class="line"><span class="comment">2. 把上面查询的select 语句当做一个子查询来使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">SELECT deptno</span><br><span class="line">FROM emp</span><br><span class="line"><span class="type">WHERE</span> <span class="variable">ename</span> <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span></span><br><span class="line"></span><br><span class="line">SELECT * </span><br><span class="line">FROM emp</span><br><span class="line"><span class="type">WHERE</span> <span class="variable">deptno</span> <span class="operator">=</span> (</span><br><span class="line">SELECT deptno</span><br><span class="line">FROM emp</span><br><span class="line"><span class="type">WHERE</span> <span class="variable">ename</span> <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h4><ul><li>返回多行数据的子查询 使用<strong>关键字in</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 多行子查询</span><br><span class="line">-- 如何查询和部门<span class="number">10</span>的工作相同的雇员</span><br><span class="line">-- 名字、岗位、工资、部门号，但是不含<span class="number">10</span>号部门自己的雇员</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 先获取10号部门有哪些职位</span></span><br><span class="line"><span class="comment">2. 名字、岗位、工资、部门号，但是不含10号部门自己的雇员</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">SELECT * FROM emp;</span><br><span class="line">SELECT DISTINCT job </span><br><span class="line">FROM emp</span><br><span class="line"><span class="type">WHERE</span> <span class="variable">deptno</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">SELECT ename, job,sal,deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE job <span class="title function_">IN</span> <span class="params">(</span></span><br><span class="line"><span class="params">SELECT DISTINCT job </span></span><br><span class="line"><span class="params">FROM emp</span></span><br><span class="line"><span class="params">WHERE deptno = <span class="number">20</span></span></span><br><span class="line"><span class="params">)</span> AND deptno != <span class="number">20</span>; -- 不等于也可以换成 &lt;&gt;</span><br></pre></td></tr></table></figure><h4 id="临时表查询"><a href="#临时表查询" class="headerlink" title="临时表查询"></a>临时表查询</h4><ul><li>将子查询当做一张临时表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT temp.ename, emp.empno </span><br><span class="line"><span class="title function_">FROM</span> <span class="params">(SELECT ename, empno FROM emp)</span> temp, emp;</span><br></pre></td></tr></table></figure><h4 id="all操作符"><a href="#all操作符" class="headerlink" title="all操作符"></a>all操作符</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- all </span><br><span class="line">-- 显示工资比部门<span class="number">30</span>的所有员工的工资高的员工姓名、工资和部门号</span><br><span class="line">SELECT ename,sal,deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE sal &gt; ALL(</span><br><span class="line">SELECT sal</span><br><span class="line">FROM emp</span><br><span class="line"><span class="type">WHERE</span> <span class="variable">deptno</span> <span class="operator">=</span> <span class="number">30</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="any操作符"><a href="#any操作符" class="headerlink" title="any操作符"></a>any操作符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 显示工资比部门<span class="number">30</span>的其中一个高员工的工资高的员工姓名、工资和部门号</span><br><span class="line">SELECT ename,sal,deptno</span><br><span class="line">FROM emp</span><br><span class="line">WHERE sal &gt; ANY(</span><br><span class="line">SELECT sal</span><br><span class="line">FROM emp</span><br><span class="line"><span class="type">WHERE</span> <span class="variable">deptno</span> <span class="operator">=</span> <span class="number">30</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h4><ul><li>返回多个列数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 多列子查询</span><br><span class="line">-- 查询与smith 的部门和岗位完全相同的所有雇员(并且不含smith本人)</span><br><span class="line">-- <span class="number">1.</span> 先获取smith本人你的部门和岗位信息</span><br><span class="line">SELECT deptno, job</span><br><span class="line">FROM emp</span><br><span class="line"><span class="type">WHERE</span> <span class="variable">ename</span> <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br><span class="line"></span><br><span class="line">-- <span class="number">2.</span> 查询与smith 的部门和岗位完全相同的所有雇员(并且不含smith本人)</span><br><span class="line">SELECT *</span><br><span class="line">FROM EMP</span><br><span class="line"><span class="title function_">WHERE</span> <span class="params">(deptno, job)</span> = (</span><br><span class="line">SELECT deptno, job</span><br><span class="line">FROM emp</span><br><span class="line"><span class="type">WHERE</span> <span class="variable">ename</span> <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span></span><br><span class="line">) AND ename != <span class="string">&#x27;SMITH&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h2><h3 id="union-all"><a href="#union-all" class="headerlink" title="union all"></a>union all</h3><ul><li>用于取得两个结果集的并集，使用该操作符时，不会取消重复行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- union all 将两个查询结果合并 不会去重</span><br><span class="line">SELECT ename,sal,job FROM emp WHERE sal &gt; <span class="number">2500</span></span><br><span class="line">UNION ALL</span><br><span class="line">SELECT ename,sal,job FROM emp WHERE job=<span class="string">&#x27;MANAGER&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><ul><li>用于取得两个结果集的并集，使用该操作符时，会取消重复行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- union 将两个查询结果合并 会去重</span><br><span class="line">SELECT ename,sal,job FROM emp WHERE sal &gt; <span class="number">2500</span></span><br><span class="line">UNION</span><br><span class="line">SELECT ename,sal,job FROM emp WHERE job=<span class="string">&#x27;MANAGER&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3><ul><li>左侧的表完全显示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 左外连接 </span><br><span class="line">SELECT `name`, stu.id,grade</span><br><span class="line">FROM stu LEFT JOIN exam</span><br><span class="line">ON stu.id = exam.id;</span><br></pre></td></tr></table></figure><h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><ul><li>右侧的表完全显示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 右外连接(显示所有成绩 如果没有名字匹配 显示空)</span><br><span class="line">-- 即：右边的表(exam) 和左表没有匹配的记录 也会把右表的记录显示出来</span><br><span class="line">SELECT `name`, stu.id,grade</span><br><span class="line">FROM stu RIGHT JOIN exam</span><br><span class="line">ON stu.id = exam.id;</span><br></pre></td></tr></table></figure><h2 id="Mysql约束"><a href="#Mysql约束" class="headerlink" title="Mysql约束"></a>Mysql约束</h2><ul><li>约束用于确保数据库满足特定的商业规则</li></ul><h3 id="primary-key（主键）"><a href="#primary-key（主键）" class="headerlink" title="primary key（主键）"></a>primary key（主键）</h3><p><img src="/undefined/4a1b/主键.png" alt></p><div class="note info flat"><p>一张表的主键一般情况下设计原则：与业务无关，无实际意义，使用自增链 AUOT_INCREMENT</p></div><ul><li>用于唯一标示表行的数据，当定义主键约束后，该列不能重复，且不能为null</li><li>一张表最多只能有一个主键，但是可以有多个复合主键</li><li>主键的指定方式：<ul><li>直接在字段名后指定：字段名 primary key</li><li>在表定义最后写：primary key(列名);</li></ul></li><li>使用desc 表名 可以查看primary key 的情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="title function_">t17</span></span><br><span class="line"><span class="params">(id INT PRIMARY KEY,-- 表示id列是主键</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span>,</span><br><span class="line">email <span class="title function_">VARCHAR</span><span class="params">(<span class="number">32</span>)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 主键使用细节</span><br><span class="line">-- <span class="number">1.</span> primary key不能重复而且不能为<span class="literal">null</span>。</span><br><span class="line">INSERT INTO t17</span><br><span class="line"><span class="title function_">VALUES</span><span class="params">(NULL,<span class="string">&#x27;zb&#x27;</span>,<span class="string">&#x27;zb@sohu.com&#x27;</span>)</span>;</span><br><span class="line">-- <span class="number">2.</span> 一张表最多只能有一个主键,但可以是复合主键</span><br><span class="line">CREATE TABLE <span class="title function_">t18</span></span><br><span class="line"><span class="params">(id INT PRIMARY KEY,-- 表示id列是主键</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span> PRIMARY KEY,</span><br><span class="line">email <span class="title function_">VARCHAR</span><span class="params">(<span class="number">32</span>)</span></span><br><span class="line">);-- 错误写法</span><br><span class="line"></span><br><span class="line">-- 复合主键 (id和name做成复合主键 只有Id和 name都相同才不能添加进去) </span><br><span class="line">CREATE TABLE <span class="title function_">t19</span></span><br><span class="line"><span class="params">(id INT,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span>,</span><br><span class="line">email <span class="title function_">VARCHAR</span><span class="params">(<span class="number">32</span>)</span>,</span><br><span class="line">PRIMARY <span class="title function_">KEY</span><span class="params">(id,`name`)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- <span class="number">3.</span> 主键的指定方式有两种</span><br><span class="line">--    直接在字段名后指定:字段名primakry key   </span><br><span class="line">CREATE TABLE <span class="title function_">t20</span></span><br><span class="line"><span class="params">(id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span>,</span><br><span class="line">email <span class="title function_">VARCHAR</span><span class="params">(<span class="number">32</span>)</span></span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">--    在表定义最后写primary <span class="title function_">key</span><span class="params">(列名)</span>;</span><br><span class="line">CREATE TABLE <span class="title function_">t21</span></span><br><span class="line"><span class="params">(id INT,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span>,</span><br><span class="line">email <span class="title function_">VARCHAR</span><span class="params">(<span class="number">32</span>)</span>,</span><br><span class="line">PRIMARY <span class="title function_">KEY</span><span class="params">(id,`name`)</span></span><br><span class="line">);</span><br><span class="line">-- <span class="number">4.</span> 使用desc表名，可以看到primary key的情况.</span><br><span class="line">DESC t21;</span><br></pre></td></tr></table></figure><h3 id="not-null-非空"><a href="#not-null-非空" class="headerlink" title="not null(非空)"></a>not null(非空)</h3><p><img src="/undefined/4a1b/非空.png" alt></p><ul><li>列上定义了not null 表示插入数据时，必须为列提供数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table <span class="title function_">student</span> <span class="params">(</span></span><br><span class="line"><span class="params">id <span class="type">int</span> not <span class="literal">null</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="unique-唯一"><a href="#unique-唯一" class="headerlink" title="unique(唯一)"></a>unique(唯一)</h3><p><img src="/undefined/4a1b/唯一.png" alt></p><ul><li>当该列定义了唯一约束，该列值不能重复</li><li>如果没有指定not null，则unique字段可以有多个null</li><li>一张表可以有多个unique字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="title function_">t22</span></span><br><span class="line"><span class="params">(id INT UNIQUE, -- 表示id列是不可以重复的</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span>,</span><br><span class="line">email <span class="title function_">VARCHAR</span><span class="params">(<span class="number">32</span>)</span>);</span><br><span class="line"></span><br><span class="line">-- unique 使用细节</span><br><span class="line">-- 如果没有指定not <span class="literal">null</span> 则 unique 字段可以有多个<span class="literal">null</span></span><br><span class="line">-- 如果一个列(字段) 是 unique not <span class="literal">null</span> 使用效果类似 primary key</span><br><span class="line">INSERT INTO t22 </span><br><span class="line"><span class="title function_">VALUES</span><span class="params">(NULL, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;tom@sohu.com&#x27;</span>)</span>;</span><br><span class="line"></span><br><span class="line">SELECT * FROM t22;</span><br><span class="line">-- 一张表可以有多个unique</span><br><span class="line">CREATE TABLE <span class="title function_">t23</span></span><br><span class="line"><span class="params">(id INT UNIQUE, -- 表示id列是不可以重复的</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span>UNIQUE,-- 表示name不可以重复</span><br><span class="line">email <span class="title function_">VARCHAR</span><span class="params">(<span class="number">32</span>)</span>);</span><br></pre></td></tr></table></figure><h3 id="foreign-key-外键"><a href="#foreign-key-外键" class="headerlink" title="foreign key(外键)"></a>foreign key(外键)</h3><p><img src="/undefined/4a1b/外键.png" alt></p><ul><li>用于定义主表和从表之间的关系：外键约束要定义在从表上，主表则必须具有主键约束或是unique约束,当定义外键约束后，要求外键列数据必须在主表的主键列存在或是为null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">-- foreign key 外键</span><br><span class="line"># 这里是给订单表设置一个外键，外键是用户表的id字段</span><br><span class="line">    CONSTRAINT `FK_orders_id` FOREIGN <span class="title function_">KEY</span> <span class="params">(`user_id`)</span> REFERENCES `user` (`id`) </span><br><span class="line">    ON DELETE NO ACTION ON UPDATE NO ACTION</span><br><span class="line"># 外键约束的格式</span><br><span class="line">    CONSTRAINT `外键约束的名称` FOREIGN <span class="title function_">KEY</span> <span class="params">(`从表字段`)</span> REFERENCES `主表名` (`主表字段`) </span><br><span class="line">    约束规则...</span><br><span class="line"></span><br><span class="line">-- 创建 主表 my_class</span><br><span class="line">CREATE TABLE <span class="title function_">my_class</span></span><br><span class="line"><span class="params">(id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">-- 创建从表 my_stu</span><br><span class="line">CREATE TABLE <span class="title function_">my_stu</span></span><br><span class="line"><span class="params">(id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">class_id INT,</span><br><span class="line">-- 下面指定外键关系</span><br><span class="line">FOREIGN <span class="title function_">KEY</span> <span class="params">(class_id)</span> REFERENCES <span class="title function_">my_class</span><span class="params">(id)</span>);</span><br><span class="line"></span><br><span class="line">-- 测试数据</span><br><span class="line">INSERT INTO my_class</span><br><span class="line"><span class="title function_">VALUES</span><span class="params">(<span class="number">100</span>,<span class="string">&#x27;java&#x27;</span>)</span>,(<span class="number">200</span>,<span class="string">&#x27;web&#x27;</span>);</span><br><span class="line"></span><br><span class="line">SELECT * FROM my_class;</span><br><span class="line">INSERT INTO my_stu</span><br><span class="line"><span class="title function_">VALUES</span><span class="params">(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">100</span>)</span>;</span><br><span class="line">INSERT INTO my_stu</span><br><span class="line"><span class="title function_">VALUES</span><span class="params">(<span class="number">2</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="number">200</span>)</span>;</span><br><span class="line">INSERT INTO my_stu</span><br><span class="line"><span class="title function_">VALUES</span><span class="params">(<span class="number">3</span>,<span class="string">&#x27;zb&#x27;</span>,<span class="number">300</span>)</span>; -- 这里会失败 因为<span class="number">300</span>号班级不存在</span><br><span class="line">SELECT * FROM my_stu;</span><br><span class="line"></span><br><span class="line">INSERT INTO my_stu</span><br><span class="line"><span class="title function_">VALUES</span><span class="params">(<span class="number">4</span>,<span class="string">&#x27;zb&#x27;</span>,NULL)</span>;-- 可以加入</span><br><span class="line"></span><br><span class="line">-- 一旦建立主外键关系就不能随意删除了</span><br><span class="line">DELETE FROM my_class</span><br><span class="line"><span class="type">WHERE</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><p><img src="/undefined/4a1b/check.png" alt></p><ul><li>用于强制行数据必须满足的条件</li><li>mysql5.7目前还不支持check，只做语法校验，不会生效</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- check 的使用</span><br><span class="line">-- mysql <span class="number">5.7</span> 目前还不支持check 只做语法校验 但不会生效</span><br><span class="line">-- oracle sql server 这两个数据库会生效</span><br><span class="line"></span><br><span class="line">-- 测试</span><br><span class="line">CREATE TABLE <span class="title function_">t24</span> <span class="params">(</span></span><br><span class="line"><span class="params">id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">sex <span class="title function_">VARCHAR</span><span class="params">(<span class="number">6</span>)</span> CHECK (sex <span class="title function_">IN</span><span class="params">(<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;woman&#x27;</span>)</span>),</span><br><span class="line">sal DOUBLE <span class="title function_">CHECK</span> <span class="params">(sal &gt; <span class="number">1000</span> AND sal &lt; <span class="number">2000</span>)</span></span><br></pre></td></tr></table></figure><h2 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h2><ul><li>从1开始自动增长的整数</li></ul><p><img src="/undefined/4a1b/自增长.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加自增长方式</span></span><br><span class="line">insert into <span class="title function_">xxx</span><span class="params">(字段<span class="number">1</span>, 字段<span class="number">2.</span>...)</span> values(<span class="literal">null</span>,<span class="string">&#x27;值&#x27;</span>...);</span><br><span class="line">insert into <span class="title function_">xxx</span><span class="params">(字段<span class="number">2.</span>.….)</span> values(值<span class="number">1</span><span class="string">&#x27;，&quot;值2&#x27;</span>..…);</span><br><span class="line">insert into xxx <span class="title function_">values</span><span class="params">(<span class="literal">null</span>,<span class="string">&#x27;值1&#x27;</span>.....)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//细节</span></span><br><span class="line"><span class="comment">//(1)一般来说自增长是和primary key配合使用</span></span><br><span class="line"><span class="comment">//(2)自增长也可以单独使用[但是需要配合一个unique]</span></span><br><span class="line"><span class="comment">//(3)自增长修饰的字段为整数型的(虽然小数也可以但是非常非常少这样使用)</span></span><br><span class="line"><span class="comment">//(4)自增长默认从1开爱:你新的升始直;table表名auto increment =新的开始值;</span></span><br><span class="line"><span class="comment">//(5)如果你添加数据时，给自增长字段（(列)指定的有值，则以指定的值为准,如果指定了自增长，一般来说，就按照自增长的规则来添加数据</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 自增长</span><br><span class="line">-- 创建表</span><br><span class="line">CREATE TABLE <span class="title function_">t25</span><span class="params">(</span></span><br><span class="line"><span class="params">id INT PRIMARY KEY AUTO_INCREMENT, -- 自增长</span></span><br><span class="line"><span class="params">email VARCHAR(<span class="number">32</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`name` VARCHAR(<span class="number">32</span>) NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li>添加索引可提高查询速率</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="/undefined/4a1b/索引原理.png" alt></p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li><strong>主键索引</strong>（primary key）：主键自动的为主索引</li><li><strong>唯一索引</strong>（unique）</li><li><strong>普通索引</strong>（indext）</li><li><strong>全文索引</strong>（fulltext）：适用于MyISAM,一般情况下不适用mysql自带的全文索引，而是使用全文搜索Solr和ElasticSearch（ES）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">-- mysql的索引使用</span><br><span class="line">-- 创建索引</span><br><span class="line">CREATE TABLE <span class="title function_">t25</span><span class="params">(</span></span><br><span class="line"><span class="params">id INT,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span>); </span><br><span class="line"></span><br><span class="line">-- 查询表是否有索引</span><br><span class="line">SHOW INDEXES FROM t25; </span><br><span class="line">-- 添加索引</span><br><span class="line">-- 添加唯一索引  </span><br><span class="line">CREATE UNIQUE INDEX id_index ON <span class="title function_">t25</span><span class="params">(id)</span>;</span><br><span class="line">-- 添加普通索引方式<span class="number">1</span></span><br><span class="line">CREATE INDEX id_index ON <span class="title function_">t25</span><span class="params">(id)</span>;</span><br><span class="line">-- <span class="number">1.</span> 如果某列的值，是不会重复的 则优先考虑使用unqiue索引 否则使用普通索引</span><br><span class="line"></span><br><span class="line">-- 添加普通索引方式<span class="number">2</span></span><br><span class="line">ALTER TABLE t25 ADD INDEX <span class="title function_">id_index</span> <span class="params">(id)</span></span><br><span class="line"></span><br><span class="line">-- 添加主键索引</span><br><span class="line">-- <span class="number">1.</span> 在创建表的时候指定主键</span><br><span class="line">-- <span class="number">2.</span> 建表后添加`hzy_db02`</span><br><span class="line">CREATE TABLE <span class="title function_">t26</span><span class="params">(</span></span><br><span class="line"><span class="params">id INT,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE t26 ADD PRIMARY <span class="title function_">KEY</span> <span class="params">(id)</span></span><br><span class="line"></span><br><span class="line">SHOW INDEXES FROM t26;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">DROP INDEX id_index ON t25;</span><br><span class="line"></span><br><span class="line">-- 删除主键索引</span><br><span class="line">ALTER TABLE t26 DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">-- 修改索引  先删除再添加新的索引</span><br><span class="line"></span><br><span class="line">-- 查询索引</span><br><span class="line">-- <span class="number">1.</span> 方式<span class="number">1</span></span><br><span class="line">SHOW INDEXES FROM t26;</span><br><span class="line">-- <span class="number">2.</span> 方式<span class="number">2</span></span><br><span class="line">SHOW INDEX FROM t26;</span><br><span class="line">-- <span class="number">3.</span> 方式<span class="number">3</span></span><br><span class="line">SHOW KEYS FROM t26;</span><br><span class="line">-- <span class="number">4.</span> 方式<span class="number">4</span></span><br><span class="line">DESC t26;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>用于保证数据的一致性，它由一组相关的dml语句组成，该组的dml语句要么全部成功，要么全部失败</li></ul><h3 id="事务和锁"><a href="#事务和锁" class="headerlink" title="事务和锁"></a>事务和锁</h3><ul><li>当执行事务操作时(dml语句),mysql会在表上加锁,防止其它用户改表的数据.这对用户来讲是非常重要的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mysql数据库控制台事务的几个重要操作</span></span><br><span class="line">(<span class="number">1</span>) start transaction <span class="comment">//开始一个事务</span></span><br><span class="line">(<span class="number">2</span>) savepoint<span class="comment">//保存点名--设置保存点</span></span><br><span class="line">(<span class="number">3</span>) rollback to<span class="comment">//保存点名--回退事务</span></span><br><span class="line">(<span class="number">4</span>) rollback <span class="comment">//回退全部事务</span></span><br><span class="line">(<span class="number">5</span>) commit<span class="comment">//提交事务,所有的操作生效,不能回退</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-- 事务操作</span><br><span class="line"></span><br><span class="line">-- 创建表</span><br><span class="line">CREATE TABLE <span class="title function_">t27</span><span class="params">(</span></span><br><span class="line"><span class="params">id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">-- 开启事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line">-- 设置事务保存点</span><br><span class="line">SAVEPOINT a;</span><br><span class="line"></span><br><span class="line">-- 执行dml语句</span><br><span class="line">INSERT INTO t27 <span class="title function_">VALUES</span><span class="params">(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>)</span>;</span><br><span class="line"></span><br><span class="line">SELECT * FROM t27;</span><br><span class="line">-- 执行dml语句</span><br><span class="line">SAVEPOINT b;</span><br><span class="line">INSERT INTO t27 <span class="title function_">VALUES</span><span class="params">(<span class="number">2</span>,<span class="string">&#x27;jack&#x27;</span>)</span>;</span><br><span class="line"></span><br><span class="line">-- 回退事务</span><br><span class="line">ROLLBACK TO a;</span><br><span class="line"></span><br><span class="line">-- 回退全部事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//细节</span></span><br><span class="line"><span class="number">1</span>．如果不开始事务，默认情况下，dml操作是自动提交的，不能回滚</span><br><span class="line"><span class="number">2</span>．如果开始一个事务，你没有创建保存点.你可以执行rollback，默认就是回退到你事务开始的状态.</span><br><span class="line"><span class="number">3.</span>你也可以在这个事务中(还没有提交时).创建多个保存点.比如:savepoint aaa;执行dml , savepoint bbb;</span><br><span class="line"><span class="number">4.</span>你可以在事务没有提交前，选择回退到哪个保存点.</span><br><span class="line"><span class="number">5.</span> mysql的事务机制需要innodb的存储引擎还可以使用,myisam不好使.</span><br><span class="line"><span class="number">6</span>．开始一个事务start transaction, set autocommit=off;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 事务细节</span><br><span class="line"></span><br><span class="line">-- <span class="number">1.</span> 如果不开启事务，默认情况下 dml操作是自动提交的 不能回滚</span><br><span class="line">INSERT INTO t27 <span class="title function_">VALUES</span><span class="params">(<span class="number">3</span>,<span class="string">&#x27;mary&#x27;</span>)</span>;-- 自动提交 commit</span><br><span class="line">SELECT * FROM t27;</span><br><span class="line"></span><br><span class="line">-- <span class="number">2.</span> 如果开启一个事务，没有创建保存点 执行rollback </span><br><span class="line">-- 默认回退到事务开始的状态</span><br><span class="line">START TRANSACTION;</span><br><span class="line">INSERT INTO t27 <span class="title function_">VALUES</span><span class="params">(<span class="number">4</span>,<span class="string">&#x27;smith&#x27;</span>)</span>;</span><br><span class="line"></span><br><span class="line">INSERT INTO t27 <span class="title function_">VALUES</span><span class="params">(<span class="number">5</span>,<span class="string">&#x27;kin&#x27;</span>)</span>;</span><br><span class="line">ROLLBACK -- 直接回退到事务开始的状态</span><br><span class="line">COMMIT;</span><br><span class="line">-- <span class="number">3.</span> 在事务没提交前可以创建 多个保存点 savepoint aaa  savepoint bbb</span><br><span class="line">-- <span class="number">4.</span> 事务没有提交前 可以选择回退到那个保存点</span><br><span class="line">-- <span class="number">5.</span> Innodb 存储引擎支持事务  MyISAM不支持</span><br><span class="line">-- <span class="number">6.</span> 开始一个事务 start transaction, set autocommit=off;</span><br><span class="line"><span class="type">SET</span> <span class="variable">autocommit</span> <span class="operator">=</span>off;</span><br></pre></td></tr></table></figure><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><ul><li><p>多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性。如果不考虑隔离性，可能会引发如下问题：<strong>脏读、不可重复读、幻读</strong></p></li><li><p><strong>脏读(dirty read)：</strong>当一个事务读取另一个事务尚未提交的修改时，产生脏读</p></li><li><strong>不可重复读(nonrepeatable read)：</strong>同一查询在同一事务中多次进行，由于其他提交事务所做的修改或删除，每次返回不同的结果集，此时发生不可重复读。</li><li><strong>幻读(phantom read)：</strong>同一查询在同一事务中多次进行，由于其他提交事务所做的插入操作,每次返回不同的结果集，此时发生幻读。</li></ul><p><img src="/undefined/4a1b/隔离级别.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-- mysql事务  隔离级别</span><br><span class="line">-- <span class="number">1.</span> 登入mysql</span><br><span class="line">mysql -u root -p;</span><br><span class="line"></span><br><span class="line">-- <span class="number">2.</span> 查询当前事务的隔离级别</span><br><span class="line">SELECT @<span class="meta">@tx_isolation</span>;</span><br><span class="line"></span><br><span class="line">-- mysql&gt; SELECT @<span class="meta">@tx_isolation</span>;</span><br><span class="line">-- +-----------------+</span><br><span class="line">-- | @<span class="meta">@tx_isolation</span>  |</span><br><span class="line">-- +-----------------+</span><br><span class="line">-- | REPEATABLE-READ |</span><br><span class="line">-- +-----------------+</span><br><span class="line"></span><br><span class="line">-- <span class="number">3.</span> 把其中一个控制台的隔离级别设置为 Read uncommitted</span><br><span class="line">SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line"></span><br><span class="line">-- <span class="number">4.</span> 选择数据库 </span><br><span class="line">USE 数据库名</span><br><span class="line"></span><br><span class="line">-- <span class="number">5.</span> 创建表</span><br><span class="line">CREATE TABLE `account`(</span><br><span class="line">id INT,</span><br><span class="line">`name` VARCHAR(<span class="number">32</span>),</span><br><span class="line">money INT);</span><br><span class="line"></span><br><span class="line">-- 查看当前会话隔离级别</span><br><span class="line">SELECT @<span class="meta">@tx_isolation</span>;</span><br><span class="line">-- 查看系统当前会话级别</span><br><span class="line">SELECT @<span class="meta">@global</span>.tx_isolation;</span><br><span class="line">-- 设置当前会话级别</span><br><span class="line">SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line"></span><br><span class="line">-- 设置系统当前隔离级别</span><br><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL [设置的级别]</span><br></pre></td></tr></table></figure><ul><li>全局修改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改mysql.ini配置文件，在最后加上</span></span><br><span class="line">#可选参数有:READ-UNCOMMITTED,READ-COMMITTED,REPEATABLE-READ,SERIALIZABLE.</span><br><span class="line">[mysqld]</span><br><span class="line">transaction-isolation = REPEATABLE-READ</span><br></pre></td></tr></table></figure><h3 id="acid特性"><a href="#acid特性" class="headerlink" title="acid特性"></a>acid特性</h3><h4 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h4><ul><li>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</li></ul><h4 id="一致性-Consistency"><a href="#一致性-Consistency" class="headerlink" title="一致性(Consistency)"></a>一致性(Consistency)</h4><ul><li>事务必须使数据库从一个一致性状态变换到另外一个一致性状态</li></ul><h4 id="隔离性-lsolation"><a href="#隔离性-lsolation" class="headerlink" title="隔离性(lsolation)"></a>隔离性(lsolation)</h4><ul><li>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离</li></ul><h4 id="持久性-Durability"><a href="#持久性-Durability" class="headerlink" title="持久性(Durability)"></a>持久性(Durability)</h4><ul><li>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</li></ul><h3 id="表类型和存储引擎"><a href="#表类型和存储引擎" class="headerlink" title="表类型和存储引擎"></a>表类型和存储引擎</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>MySQL的表类型由存储引擎(Storage Engines)决定,主要包括MylSANinnoDB、Memory等。</li><li>MySQL数据表主要支持六种类型，分别是:CSV、Memory、ARCHIVE、MRG MYISAM、MYISAM、 InnoBDB。</li><li>这六种又分为两类，一类是”事务安全型”(transaction-safe)，比如：InnoDB；其余都属于第二类，称为”非事务安全型”(non-transaction-safe)[mysiam 和memory].</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示当前数据库支持的 存储引擎</span></span><br><span class="line">show engines;</span><br><span class="line"><span class="comment">//修改存储引擎</span></span><br><span class="line">ALTER TABLE `表名` ENGINE = 存储引擎;</span><br></pre></td></tr></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><div class="table-container"><table><thead><tr><th>特点</th><th>Myisam</th><th>Innodb</th><th>Memory</th><th>Archive</th></tr></thead><tbody><tr><td>批量插入的速度</td><td>高</td><td>低</td><td>高</td><td>非常高</td></tr><tr><td>事务安全</td><td></td><td>支持</td><td></td><td></td></tr><tr><td>全文索引</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>表锁</td><td>行锁</td><td>表锁</td><td>行锁</td></tr><tr><td>存储限制</td><td>没有</td><td>64TB</td><td>有</td><td>没有</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td></td></tr><tr><td>哈希索引</td><td></td><td>支持</td><td>支持</td><td></td></tr><tr><td>集群索引</td><td></td><td>支持</td><td></td><td></td></tr><tr><td>数据缓存</td><td></td><td>支持</td><td>支持</td><td></td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td></td></tr><tr><td>数据可压缩</td><td>支持</td><td></td><td></td><td>支持</td></tr><tr><td>空间使用</td><td>低</td><td>高</td><td>N/A</td><td>非常低</td></tr><tr><td>内存使用</td><td>低</td><td>高</td><td>中等</td><td>低</td></tr><tr><td>支持外键</td><td></td><td>支持</td><td></td></tr></tbody></table></div><ul><li><p>MyISAM不支持事务、也不支持外键，但其访问速度快，对事务完整性没有要求</p></li><li><p>InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是比起MylSAM存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。</p></li><li><p>MEMORY存储引擎使用存在内存中的内容来创建表。每个MEMORY表只实际对应一个磁盘文件。MEMORY类型的表访问非常得快，因为它的数据是放在内存中的，并且默认使用HASH索引。但是一旦服务关闭，表中的数据就会丢失掉，表的结构还在。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">-- 显示所有引擎</span><br><span class="line">SHOW ENGINES</span><br><span class="line"></span><br><span class="line">-- innodb 存储引擎 </span><br><span class="line">-- <span class="number">1.</span> 支持事务</span><br><span class="line">-- <span class="number">2.</span> 支持外键</span><br><span class="line">-- <span class="number">3.</span> 支持行级锁</span><br><span class="line"></span><br><span class="line">-- myisam 存储引擎</span><br><span class="line">CREATE TABLE <span class="title function_">t28</span> <span class="params">(</span></span><br><span class="line"><span class="params">id INT,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span>) ENGINE MYISAM;</span><br><span class="line"></span><br><span class="line">-- <span class="number">1.</span> 添加速度快</span><br><span class="line">-- <span class="number">2.</span> 不支持外键和事务</span><br><span class="line">-- <span class="number">3.</span> 支持表级锁</span><br><span class="line"></span><br><span class="line">START TRANSACTION;</span><br><span class="line">SAVEPOINT t1;</span><br><span class="line">INSERT INTO t28 <span class="title function_">VALUES</span><span class="params">(<span class="number">1</span>, <span class="string">&#x27;jack&#x27;</span>)</span>;</span><br><span class="line">SELECT * FROM t28;</span><br><span class="line">ROLLBACK TO t1;</span><br><span class="line"></span><br><span class="line">-- memory 存储引擎</span><br><span class="line">-- <span class="number">1.</span> 数据存储在内存中[关闭mysql服务，数据丢失，但是表结构仍存在]</span><br><span class="line">-- <span class="number">2.</span> 执速度很快(没有IO读写)</span><br><span class="line">-- <span class="number">3.</span> 默认支持索引(hash表)</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="title function_">t29</span> <span class="params">(</span></span><br><span class="line"><span class="params">id INT,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span>) ENGINE MEMORY;</span><br><span class="line"></span><br><span class="line">-- 修改存储引擎</span><br><span class="line">ALTER TABLE <span class="type">t29</span> <span class="variable">ENGINE</span> <span class="operator">=</span> INNODB;</span><br></pre></td></tr></table></figure><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><ul><li>如果你的应用不需要事务，处理的只是基本的CRUD操作，那么MylSAM是不二选择,速度快</li><li>如果需要支持事务，选择lnnoDB</li><li>Memory存储引擎就是将数据存储在内存中，由于没有磁盘I./O的等待，速度极快。但由于是内存存储引擎，所做的任何修改在服务器重启后都将消失。(经典用法用户的在线状态().)</li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>视图是一个虚拟表，其内容由查询定义，视图包含列，其数据来自对应的基表</li></ul><h3 id="视图和基表的关系"><a href="#视图和基表的关系" class="headerlink" title="视图和基表的关系"></a>视图和基表的关系</h3><p><img src="/undefined/4a1b/视图和基表的关系.png" alt></p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本使用</span></span><br><span class="line"><span class="number">1.</span> create view视图名as select语句</span><br><span class="line"><span class="number">2.</span> alter view视图名as select语句</span><br><span class="line"><span class="number">3.</span> SHoW CREATE VIEW 视图名</span><br><span class="line"><span class="number">4.</span> drop view视图名<span class="number">1</span>,视图名<span class="number">2</span></span><br><span class="line"> </span><br><span class="line">-- 视图的使用</span><br><span class="line">-- 创建一个视图emp_view01，只能查询emp表的(empno、ename. job和deptno)信息</span><br><span class="line">-- 创建视图</span><br><span class="line">CREATE VIEW emp_view01</span><br><span class="line">AS</span><br><span class="line">SELECT empno, ename, job, deptno FROM emp;</span><br><span class="line"></span><br><span class="line">-- 查看视图</span><br><span class="line">DESC emp_view01;</span><br><span class="line">SELECT * FROM emp_view01;</span><br><span class="line"></span><br><span class="line">-- 查看创建视图的指令</span><br><span class="line">SHOW CREATE VIEW emp_view01;</span><br><span class="line"></span><br><span class="line">-- 删除视图</span><br><span class="line">DROP VIEW emp_view01;</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul><li><p>创建视图后，查询数据库文件，视图只有一个结构文件(形式：视图名.frm)</p></li><li><p>视图的数据变化会影响到基表，基表的数据变化也会影响到视图</p></li><li>视图中可以在使用视图</li></ul><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>安全</strong>。一些数据表有着重要的信息。有些字段是保密的，不能让用户直接看到。这时就可以创建一个视图，在这张视图中只保留一部分字段。这样，用户就可以查询自己需要的字段，不能查看保密的字段。</li><li><strong>性能</strong>。关系数据库的数据常常会分表存储，使用外键建立这些表的之间关系。这时,数据库查询通常会用到连接(JOIN)。这样做不但麻烦，效率相对也比较低。如果建立一个视图，将相关的表和字段组合在一起，就可以避免使用JOIN查询数据。</li><li>灵活。如果系统中有一张旧的表，这张表由于设计的问题，即将被废弃。然而，很多应用都是基于这张表，不易修改。这时就可以建立一张视图，视图中的数据直接映射到新建的表。这样，就可以少做很多改动，也达到了升级数据表的目的。</li></ul><h2 id="Mysql管理"><a href="#Mysql管理" class="headerlink" title="Mysql管理"></a>Mysql管理</h2><ul><li>mysql中的用户，都存储在系统数据库mysql中user表中</li></ul><img src="/undefined/4a1b/4a1b/mysql%E7%94%A8%E6%88%B7%E8%A1%A8.png" class title="mysql用户表"><ul><li>host：允许登入的地址，localhost表示该用户只允许本机登入，也可以指定ip地址登入如：192.168.1.100</li><li>user：用户名</li><li>authentication_string：密码，是通过mysql的password()函数加密之后的密码</li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建用户 同时指定密码</span></span><br><span class="line">create user <span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;允许登入的位置&#x27;</span> identified by <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//删除用户</span></span><br><span class="line">drop user <span class="string">&#x27;用户名&#x27;</span> @<span class="string">&#x27;允许登入的位置&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改用户密码(需要权限)</span></span><br><span class="line"><span class="comment">//修改自己的密码</span></span><br><span class="line"><span class="type">set</span> <span class="variable">password</span> <span class="operator">=</span> password(<span class="string">&#x27;密码&#x27;</span>);</span><br><span class="line"><span class="comment">//修改他人密码(需要有修改权限)</span></span><br><span class="line">set password <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;登入位置&#x27;</span> = password(密码);</span><br></pre></td></tr></table></figure><h3 id="mysql权限"><a href="#mysql权限" class="headerlink" title="mysql权限"></a>mysql权限</h3><p><img src="/undefined/4a1b/Mysql权限.png" alt></p><h4 id="给用户授权"><a href="#给用户授权" class="headerlink" title="给用户授权"></a>给用户授权</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant 权限列表 on 库.对象名to<span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;登录位置&#x27;</span>[identified by<span class="string">&#x27;密码&#x27;</span>]</span><br></pre></td></tr></table></figure><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 权限列表，多个权限用逗号分开</span></span><br><span class="line">grant select on .......</span><br><span class="line">grant select,delete,create on .....</span><br><span class="line">grant all 【privileges】on .....<span class="comment">//表示赋予该用户在该对象上的所有权限</span></span><br><span class="line"><span class="comment">//2. 特别说明</span></span><br><span class="line">*.*：代表本系统中的所有数据库的所有对象(表，视图，存储过程)</span><br><span class="line">库.*：表示某个数据库中的所有数据对象(表，视图，存储过程等)</span><br><span class="line"><span class="comment">//3. identified by可以省略，也可以写出.</span></span><br><span class="line"><span class="comment">//(1)如果用户存在，就是修改该用户的密码。</span></span><br><span class="line"><span class="comment">//(2)如果该用户不存在，就是创建该用户!</span></span><br></pre></td></tr></table></figure><h4 id="回收用户授权"><a href="#回收用户授权" class="headerlink" title="回收用户授权"></a>回收用户授权</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke 权限列表 on 库.对象名 from <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;登入位置&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="权限生效指令"><a href="#权限生效指令" class="headerlink" title="权限生效指令"></a>权限生效指令</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ul><li>在创建用户的时候，如果不指定Host,则为%，%表示表示所有IP都有连接权限create user xxX</li><li>你也可以这样指定create user ‘xxx’ @’192.168.1.%’表示xxx用户在192.168.1.*的ip可以登录mysql</li><li>在删除用户的时候，如果host 不是%需要明确指定‘用户’@’host值’</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">-- 设学校环境如下:一个系有若干个专业，每个专业一年只招一个班，每个班有若干个学生。</span><br><span class="line">-- 现要建立关于系、学生、班级的数据库，关系模式为:</span><br><span class="line">-- 班CLASS (班号classid，专业名subject，系名deptname，入学年份enrolltime，人数num)</span><br><span class="line">CREATE TABLE <span class="title function_">class</span><span class="params">(</span></span><br><span class="line"><span class="params">classid INT PRIMARY KEY NOT NULL,</span></span><br><span class="line"><span class="params">`subject` VARCHAR(<span class="number">32</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">deptname <span class="title function_">VARCHAR</span><span class="params">(<span class="number">32</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">enroltime YEAR NOT NULL,</span><br><span class="line">num INT NOT NULL DEFAULT <span class="number">0</span>,</span><br><span class="line">FOREIGN <span class="title function_">KEY</span> <span class="params">(deptname)</span> REFERENCES <span class="title function_">department</span><span class="params">(deptname)</span>);</span><br><span class="line"></span><br><span class="line">SELECT * FROM class;</span><br><span class="line">DROP TABLE class;</span><br><span class="line"></span><br><span class="line">-- 学生STUDENT (学号studentid，姓名name，年龄age，班号classid)</span><br><span class="line">CREATE TABLE <span class="title function_">students</span> <span class="params">(</span></span><br><span class="line"><span class="params">studentid INT PRIMARY KEY NOT NULL,</span></span><br><span class="line"><span class="params">`name` VARCHAR(<span class="number">32</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">age INT NOT NULL DEFAULT <span class="number">0</span>,</span><br><span class="line">classid INT NOT NULL,</span><br><span class="line">FOREIGN <span class="title function_">KEY</span> <span class="params">(classid)</span> REFERENCES <span class="title function_">class</span><span class="params">(classid)</span>);</span><br><span class="line">SELECT * FROM students;</span><br><span class="line">DROP TABLE students;</span><br><span class="line"></span><br><span class="line">-- 系DEPARTMENT(系号departmentid，系名deptname)</span><br><span class="line">CREATE TABLE <span class="title function_">department</span><span class="params">(</span></span><br><span class="line"><span class="params">departmentid VARCHAR(<span class="number">32</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">deptname <span class="title function_">VARCHAR</span><span class="params">(<span class="number">32</span>)</span> PRIMARY KEY NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">DESC department;</span><br><span class="line">SELECT * FROM department;</span><br><span class="line">DROP TABLE department;</span><br><span class="line"></span><br><span class="line">-- 添加</span><br><span class="line">INSERT INTO department <span class="title function_">VALUES</span><span class="params">(<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>)</span>,(<span class="string">&#x27;002&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>),(<span class="string">&#x27;003&#x27;</span>,<span class="string">&#x27;化学&#x27;</span>),(<span class="string">&#x27;004&#x27;</span>,<span class="string">&#x27;中文&#x27;</span>),(<span class="string">&#x27;005&#x27;</span>,<span class="string">&#x27;经济&#x27;</span>);</span><br><span class="line">DELETE FROM department;</span><br><span class="line"></span><br><span class="line">INSERT INTO <span class="keyword">class</span> </span><br><span class="line"><span class="title class_">VALUES</span>(<span class="number">101</span>,<span class="string">&#x27;软件&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">1995</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">102</span>,<span class="string">&#x27;微电子&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">1996</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">111</span>,<span class="string">&#x27;无机化学&#x27;</span>,<span class="string">&#x27;化学&#x27;</span>,<span class="number">1995</span>,<span class="number">29</span>),</span><br><span class="line">(<span class="number">112</span>,<span class="string">&#x27;高分子化学&#x27;</span>,<span class="string">&#x27;化学&#x27;</span>,<span class="number">1996</span>,<span class="number">25</span>),</span><br><span class="line">(<span class="number">121</span>,<span class="string">&#x27;统计数学&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="number">1995</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">131</span>,<span class="string">&#x27;现代语言&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="number">1996</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">141</span>,<span class="string">&#x27;国际贸易&#x27;</span>,<span class="string">&#x27;经济&#x27;</span>,<span class="number">1997</span>,<span class="number">30</span>),</span><br><span class="line">(<span class="number">142</span>,<span class="string">&#x27;国际金融&#x27;</span>,<span class="string">&#x27;经济&#x27;</span>,<span class="number">1996</span>,<span class="number">14</span>);</span><br><span class="line"></span><br><span class="line">INSERT INTO students </span><br><span class="line"><span class="title function_">VALUES</span><span class="params">(<span class="string">&#x27;8101&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,<span class="number">101</span>)</span>,</span><br><span class="line">(<span class="string">&#x27;8102&#x27;</span>,<span class="string">&#x27;钱四&#x27;</span>,<span class="number">16</span>,<span class="number">121</span>),</span><br><span class="line">(<span class="string">&#x27;8103&#x27;</span>,<span class="string">&#x27;王玲&#x27;</span>,<span class="number">17</span>,<span class="number">131</span>),</span><br><span class="line">(<span class="string">&#x27;8105&#x27;</span>,<span class="string">&#x27;李飞&#x27;</span>,<span class="number">19</span>,<span class="number">102</span>),</span><br><span class="line">(<span class="string">&#x27;8109&#x27;</span>,<span class="string">&#x27;赵四&#x27;</span>,<span class="number">18</span>,<span class="number">141</span>),</span><br><span class="line">(<span class="string">&#x27;8110&#x27;</span>,<span class="string">&#x27;李可&#x27;</span>,<span class="number">20</span>,<span class="number">142</span>),</span><br><span class="line">(<span class="string">&#x27;8201&#x27;</span>,<span class="string">&#x27;张飞&#x27;</span>,<span class="number">18</span>,<span class="number">111</span>),</span><br><span class="line">(<span class="string">&#x27;8302&#x27;</span>,<span class="string">&#x27;周瑜&#x27;</span>,<span class="number">16</span>,<span class="number">112</span>),</span><br><span class="line">(<span class="string">&#x27;8203&#x27;</span>,<span class="string">&#x27;王亮&#x27;</span>,<span class="number">17</span>,<span class="number">111</span>),</span><br><span class="line">(<span class="string">&#x27;8305&#x27;</span>,<span class="string">&#x27;董庆&#x27;</span>,<span class="number">19</span>,<span class="number">102</span>),</span><br><span class="line">(<span class="string">&#x27;8409&#x27;</span>,<span class="string">&#x27;赵龙&#x27;</span>,<span class="number">18</span>,<span class="number">101</span>),</span><br><span class="line">(<span class="string">&#x27;8510&#x27;</span>,<span class="string">&#x27;李丽&#x27;</span>,<span class="number">20</span>,<span class="number">142</span>);</span><br><span class="line"></span><br><span class="line">-- (<span class="number">3</span>)完成以下查询功能</span><br><span class="line">-- <span class="number">3.1</span>找出所有姓李的学生。</span><br><span class="line">SELECT * FROM students</span><br><span class="line">WHERE `name` LIKE <span class="string">&#x27;李%&#x27;</span>;</span><br><span class="line">-- <span class="number">3.2</span> 列出所有开设超过<span class="number">1</span>个专业的系的名字。</span><br><span class="line">SELECT * FROM department;</span><br><span class="line">SELECT * FROM class;</span><br><span class="line"></span><br><span class="line">SELECT <span class="title function_">COUNT</span><span class="params">(*)</span> AS nums,deptname</span><br><span class="line">FROM <span class="keyword">class</span></span><br><span class="line"><span class="title class_">GROUP</span> BY deptname HAVING nums &gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">-- <span class="number">3.3</span>列出人数大于等于<span class="number">30</span>的系的编号和名字。</span><br><span class="line">-- <span class="number">1.</span> 先查出各个系有多少个人</span><br><span class="line">SELECT <span class="title function_">SUM</span><span class="params">(num)</span> AS nums,deptname</span><br><span class="line">FROM <span class="keyword">class</span></span><br><span class="line"><span class="title class_">GROUP</span> BY deptname HAVING nums &gt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">-- <span class="number">2.</span> 看成零时表进行与department 组合查找</span><br><span class="line">SELECT departmentid, department.deptname,nums</span><br><span class="line">FROM department,(</span><br><span class="line">SELECT <span class="title function_">SUM</span><span class="params">(num)</span> AS nums,deptname</span><br><span class="line">FROM <span class="keyword">class</span></span><br><span class="line"><span class="title class_">GROUP</span> BY deptname HAVING nums &gt; <span class="number">30</span></span><br><span class="line">) tem</span><br><span class="line">WHERE tem.deptname = department.deptname;</span><br><span class="line"></span><br><span class="line">-- (<span class="number">4</span>)学校又新增加了一个物理系，编号为<span class="number">006</span></span><br><span class="line">INSERT INTO department <span class="title function_">VALUES</span><span class="params">(<span class="string">&#x27;006&#x27;</span>,<span class="string">&#x27;物理系&#x27;</span>)</span>;</span><br><span class="line"></span><br><span class="line">-- (<span class="number">5</span>)学生张三退学，请更新相关的表</span><br><span class="line">-- 分析：<span class="number">1.</span> 张三所在班级的人数-<span class="number">1</span> <span class="number">2.</span> 将张三从学生表删除 <span class="number">3.</span> 需要使用事务控制</span><br><span class="line">-- 开启事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 张三所在班级的人数-<span class="number">1</span></span><br><span class="line">UPDATE <span class="keyword">class</span> <span class="title class_">SET</span> num = num - <span class="number">1</span></span><br><span class="line"><span class="type">WHERE</span> <span class="variable">classid</span> <span class="operator">=</span> (</span><br><span class="line">SELECT classid</span><br><span class="line">FROM students</span><br><span class="line">WHERE `name` = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DELETE FROM students</span><br><span class="line">WHERE `name` = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">SELECT * FROM students;</span><br><span class="line">SELECT * FROM class;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（十三） - 常用类</title>
      <link href="/undefined/e82f.html"/>
      <url>/undefined/e82f.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、包装类"><a href="#一、包装类" class="headerlink" title="一、包装类"></a>一、包装类</h2><h3 id="1-基本数据类型的包装类"><a href="#1-基本数据类型的包装类" class="headerlink" title="1. 基本数据类型的包装类"></a>1. 基本数据类型的包装类</h3><ul><li>八种基本数据类型相应的引用类型—包装类</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">基本数据类型</th><th style="text-align:center">包装类</th></tr></thead><tbody><tr><td style="text-align:center">boolean</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">Character</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">Long</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">Double</td></tr></tbody></table></div><h3 id="2-包装类和基本数据类型转换"><a href="#2-包装类和基本数据类型转换" class="headerlink" title="2. 包装类和基本数据类型转换"></a>2. 包装类和基本数据类型转换</h3><h3 id="2-1-int-lt-——-gt-Integer"><a href="#2-1-int-lt-——-gt-Integer" class="headerlink" title="2.1 int &lt;——&gt; Integer"></a>2.1 int &lt;——&gt; Integer</h3><h4 id="2-1-1-手动装箱"><a href="#2-1-1-手动装箱" class="headerlink" title="2.1.1 手动装箱"></a>2.1.1 手动装箱</h4><ul><li><p>在jdk5前为手动装箱和手动拆箱 装箱：基本数据类型 —&gt; 包装类型；反之拆箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本数据类型 -----&gt; 包装类型 [手动装箱]</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.valueOf(i); </span><br><span class="line"></span><br><span class="line"><span class="comment">//包装类型 ------&gt; 基本数据类型[手动拆箱]</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">99</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">j1</span> <span class="operator">=</span> j.intValue();</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-1-2-自动装箱"><a href="#2-1-2-自动装箱" class="headerlink" title="2.1.2 自动装箱"></a>2.1.2 自动装箱</h4><ul><li><p>jdk5及以后进行自动装箱和自动拆箱，自动装箱底层调用 valueOf()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="comment">//自动装箱 int-&gt;Integer</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> n2;<span class="comment">//底层调用的是 Integer.valueOf(n2);</span></span><br><span class="line"><span class="comment">//自动拆箱 Integer-&gt;int</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> integer2;<span class="comment">//底层调用 intValue()方法</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2-String-和-包装类"><a href="#2-2-String-和-包装类" class="headerlink" title="2.2 String 和 包装类"></a>2.2 String 和 包装类</h4><h4 id="2-2-1-包装类型-gt-String"><a href="#2-2-1-包装类型-gt-String" class="headerlink" title="2.2.1 包装类型 -&gt; String"></a>2.2.1 包装类型 -&gt; String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包装类型 -&gt; String 类型</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> i.toString();</span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> i + <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-String-gt-包装类"><a href="#2-2-2-String-gt-包装类" class="headerlink" title="2.2.2 String - &gt;包装类"></a>2.2.2 String - &gt;包装类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String - &gt;包装类</span></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(s1);</span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">j2</span> <span class="operator">=</span> Integer.valueOf(s2);</span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">j3</span> <span class="operator">=</span> Integer.parseInt(s3);</span><br></pre></td></tr></table></figure><h3 id="3-Integer类常用方法"><a href="#3-Integer类常用方法" class="headerlink" title="3. Integer类常用方法"></a>3. Integer类常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.MIN_VALUE);<span class="comment">//返回最小值</span></span><br><span class="line">System.out.println(Integer.MAX_VALUE);<span class="comment">//返回最大值</span></span><br></pre></td></tr></table></figure><h3 id="4-Character类常用方法"><a href="#4-Character类常用方法" class="headerlink" title="4. Character类常用方法"></a>4. Character类常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Character.isDigit(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是数字</span></span><br><span class="line">System.out.println(Character.isLetter(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是字母</span></span><br><span class="line">System.out.println(Character.isUpperCase(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是大写</span></span><br><span class="line">System.out.println(Character.isLowerCase(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是小写</span></span><br><span class="line">System.out.println(Character.isWhitespace(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//判断是不是空格</span></span><br><span class="line">System.out.println(Character.toUpperCase(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//转成大写</span></span><br><span class="line">System.out.println(Character.toLowerCase(<span class="string">&#x27;A&#x27;</span>));<span class="comment">//转成小写</span></span><br></pre></td></tr></table></figure><h2 id="二、String类"><a href="#二、String类" class="headerlink" title="二、String类"></a>二、String类</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><ul><li>String 对象用于保存字符串，也就是一组字符序列</li><li>字符串常量对象是用双引号括起来的字符序列，如”你好”</li><li>字符串的字符常用Unicode编码，一个字符(不区分字母还是汉字)占两个字节</li><li>String 类常用的构造方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(String original);</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="type">char</span>[] a);</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="type">char</span>[] a,<span class="type">int</span> startIndext, <span class="type">int</span> count);</span><br></pre></td></tr></table></figure><ul><li>String 是final类 不能被继承</li><li>String 有属性 private final char value[]; 用于存放字符串内容</li><li>value 是一个final类型，不能被修改：即value不能指向新的地址，但是单个字符内容可以变化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">name = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">char</span>[] value = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span>[] v2 = &#123;<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;m&#x27;</span>&#125;;</span><br><span class="line">value[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line"><span class="comment">//value = v2; 错误 不可以修改value的地址</span></span><br></pre></td></tr></table></figure><h3 id="2-创建String-对象"><a href="#2-创建String-对象" class="headerlink" title="2. 创建String 对象"></a>2. 创建String 对象</h3><h4 id="2-1-直接赋值"><a href="#2-1-直接赋值" class="headerlink" title="2.1 直接赋值"></a>2.1 直接赋值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = &quot;执笔&quot;;</span><br></pre></td></tr></table></figure><ul><li>先从常量池查看是否有”执笔” 数据空间，如果有，直接指向；没有就从新创建，然后指向。s最终指向的是常量池的空间地址</li></ul><img src="/undefined/e82f/e82f/String%E7%9B%B4%E6%8E%A5%E8%B5%8B%E5%80%BC%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83.png" class title="String直接赋值创建对象内存分布"><h4 id="2-2-调用构造器"><a href="#2-2-调用构造器" class="headerlink" title="2.2 调用构造器"></a>2.2 调用构造器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s2 = new String(&quot;执笔&quot;);</span><br></pre></td></tr></table></figure><ul><li>先在堆中创建空间，里面维护了value属性，指向常量池的执笔空间，如果常量池没有“执笔”，重新创建；如果有，直接通过value指向。最终指向的是堆中的空间地址</li></ul><img src="/undefined/e82f/e82f/String%E8%B0%83%E7%94%A8%E6%9E%84%E9%80%A0%E5%99%A8%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83.png" class title="String调用构造器创建对象内存分布"><h4 id="2-3-字符串的特性"><a href="#2-3-字符串的特性" class="headerlink" title="2.3 字符串的特性"></a>2.3 字符串的特性</h4><ul><li>String 是一个final类，代表不可变的字符序列</li><li><p>字符串是不可变的。一个字符串对象一旦被分配，其内容是不可变的</p></li><li><p>intern()方法指向对应字符串的常量池</p></li></ul><h3 id="3-常用方法"><a href="#3-常用方法" class="headerlink" title="3. 常用方法"></a>3. 常用方法</h3><h4 id="第一组"><a href="#第一组" class="headerlink" title="第一组"></a>第一组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">equals <span class="comment">//区分大小写，判断内容是否相等</span></span><br><span class="line">equalslgnoreCase<span class="comment">//忽略大小写的判断内容是否相等</span></span><br><span class="line">length<span class="comment">//获取字符的个数，字符串的长度</span></span><br><span class="line">indexOf <span class="comment">//获取字符在字符串中第1次出现的索引,索引从0开始,如果找不到,返回-1</span></span><br><span class="line">lastIndexOf<span class="comment">//获取字符在字符串中最后1次出现的索引,索引从0开始,如找不到,返回-1</span></span><br><span class="line">substring<span class="comment">//截取指定范围的子串</span></span><br><span class="line">trim<span class="comment">//去前后空格</span></span><br><span class="line">charAt<span class="comment">//获取某索引处的字符,注意不能使用Str[index]这种方式.</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. equals 区分大小写，判断内容是否相等</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">System.out.println(str1.equals(str2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. equalsIgnoreCase 忽略大小写的判断内容是否相等</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;john&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;john&quot;</span>.equalsIgnoreCase(username))&#123;</span><br><span class="line">System.out.printin(<span class="string">&quot;sucess! &quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println( <span class="string">&quot;Failure ! &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. length获取字符的个数，字符串的长度</span></span><br><span class="line">System.out.println(<span class="string">&quot;执笔&quot;</span>.length());</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. index0f 获取字符在字符串对象中第一次出现的索引，索引从0开始，如果找不到就返回-1 </span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;wer@terwe@g&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> s1.indexOf( <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">system.out.println(index); <span class="comment">// 3</span></span><br><span class="line">System.out.println(<span class="string">&quot;weIndex=&quot;</span> + s1.indexOf(<span class="string">&quot;we&quot;</span>));<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.lastIndexOf 获取字符在字符串中最后一次出现的索引，索引从0开始，如果找不到，返回-1</span></span><br><span class="line">s1 = <span class="string">&quot;wer@terwe@g@&quot;</span>;</span><br><span class="line">index = s1.lastIndexOf( <span class="string">&#x27; @&#x27;</span>);</span><br><span class="line">System.out.println(index);<span class="comment">//11</span></span><br><span class="line">System.out.println(<span class="string">&quot;ter的位置=&quot;</span> + s1.lastIndexOf( <span class="string">&quot;ter &quot;</span>));<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.substring截取指定范围的子串</span></span><br><span class="line"><span class="type">string</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;hello,张三&quot;</span>;</span><br><span class="line"><span class="comment">//下面name.substring(6)从索引6开始截取后面所有的内容</span></span><br><span class="line">System.out.println(name.substring(<span class="number">6</span>));<span class="comment">//截取后面的字符</span></span><br><span class="line"><span class="comment">//name.substring(0,5)表示从索引@开始截取，截取到索引5-1=4位置</span></span><br><span class="line">System.out.println(name.substring(<span class="number">2</span>,<span class="number">5</span>));<span class="comment">//llo</span></span><br></pre></td></tr></table></figure><h4 id="第二组"><a href="#第二组" class="headerlink" title="第二组"></a>第二组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">toUpperCase<span class="comment">//转换成大写</span></span><br><span class="line">toLowerCase<span class="comment">//转换成小写</span></span><br><span class="line">concat<span class="comment">//拼接字符串</span></span><br><span class="line">replace<span class="comment">//替换字符串中的字符</span></span><br><span class="line">split<span class="comment">//分割字符串，对于某些分割字符，如| \\</span></span><br><span class="line">compareTo <span class="comment">//比较两个字符串的大小</span></span><br><span class="line">toCharArray <span class="comment">//转换成字符数组</span></span><br><span class="line">format <span class="comment">//格式字符串，%s字符串 %c字符 %d整型 %.2f浮点型</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. toUpperCase转换成大写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;heLLo&quot;</span>;</span><br><span class="line">System.out.println(s.toUpperCase();<span class="comment">//HELLO</span></span><br><span class="line">                   </span><br><span class="line"><span class="comment">//2. toLowerCase 转换成小写</span></span><br><span class="line">System.out.println(s.toLowerCase();<span class="comment">//hello</span></span><br><span class="line">                   </span><br><span class="line"><span class="comment">//3. concat拼接字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span><span class="string">&quot;宝玉&quot;</span>;</span><br><span class="line">s1 = s1.concat(<span class="string">&quot;林黛玉&quot;</span>).concat(<span class="string">&quot;薛宝钗&quot;</span>).concat( <span class="string">&quot;together&quot;</span>);</span><br><span class="line">System.out.println(s1);<span class="comment">//宝玉林黛玉薛宝钗</span></span><br><span class="line">                   </span><br><span class="line"><span class="comment">//4. replace替换字符串中的字符</span></span><br><span class="line">s1 =<span class="string">&quot;宝玉 and 林黛玉林黛玉林黛玉&quot;</span>;</span><br><span class="line"><span class="comment">//在s1中，将 所有的林黛玉替换成薛宝钗</span></span><br><span class="line"><span class="comment">// s1.replace()方法执行后，返回的结果才是替换过的,注意对s1没有任何影响</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s11</span> <span class="operator">=</span> s1.replace(<span class="string">&quot;宝玉&quot;</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">System.out.printLn(s1);<span class="comment">//宝玉 and 林黛玉 林黛玉 林黛玉</span></span><br><span class="line">System.out.printin(s11);<span class="comment">//jack and 林黛玉 林黛玉 林黛玉</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. split分割字符串，对于某些分割字符，我们需要转义比如| \\等</span></span><br><span class="line"><span class="type">String</span> <span class="variable">poem</span> <span class="operator">=</span>“锄禾日当午,汗滴禾下土,谁知盘中餐,粒粒皆辛苦<span class="string">&quot;;</span></span><br><span class="line"><span class="string">//(1) 以，为标准对 poem进行分割，返回一个数组</span></span><br><span class="line"><span class="string">//(2) 在对字符串进行分割时，如果有特殊字符，需要加入转义符 \</span></span><br><span class="line"><span class="string">String[] split = poem.split(&quot;</span> , <span class="string">&quot;);</span></span><br><span class="line"><span class="string">poem = &quot;</span>E:\\laaa\\bbb<span class="string">&quot;;</span></span><br><span class="line"><span class="string">split =poem.split(&quot;</span>\\\\<span class="string">&quot;);</span></span><br><span class="line"><span class="string">// string[] split = poem.split(&quot;</span>\\\\ <span class="string">&quot;);</span></span><br><span class="line"><span class="string">System.out.println(&quot;</span>==分割后内容===<span class="string">&quot;);</span></span><br><span class="line"><span class="string">for (int i = 0; i&lt; split.length; i++) &#123;</span></span><br><span class="line"><span class="string">System.out.println(split[i]);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">                   </span></span><br><span class="line"><span class="string">//6. toCharArray 转换成数组</span></span><br><span class="line"><span class="string">s = &quot;</span>happy<span class="string">&quot;;</span></span><br><span class="line"><span class="string">char[] chs = s.toCharArray();</span></span><br><span class="line"><span class="string">for(int i = 0; i &lt; chs.length; i++) &#123;</span></span><br><span class="line"><span class="string">    System.out.println(chs[i]);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">                   </span></span><br><span class="line"><span class="string">//7. compareTo 比较两个字符串的大小，如果前者大，则返回正数，后者大，则返回负数，如果相等，返回0</span></span><br><span class="line"><span class="string">//(1) 如果长度相同，并且每个字符也相同，就返回0</span></span><br><span class="line"><span class="string">//(2) 如果长度相同或者不相同，但是在进行比较时，可以区分大小</span></span><br><span class="line"><span class="string">//就返回if (c1 != c2) &#123;</span></span><br><span class="line"><span class="string">//return c1 - c2;</span></span><br><span class="line"><span class="string">// &#125;</span></span><br><span class="line"><span class="string">//(3) 如果前面的部分都相同，就返回str1.len - str.len</span></span><br><span class="line"><span class="string">String a = &quot;</span>jcck<span class="string">&quot;;// len = 3</span></span><br><span class="line"><span class="string">String b = &quot;</span>jack<span class="string">&quot;; // len = 4</span></span><br><span class="line"><span class="string">System.out.println(a.compareTo(b));//返回值是&#x27;c&#x27; - &#x27;a&#x27; =2的值</span></span><br><span class="line"><span class="string">                   </span></span><br><span class="line"><span class="string">//8. format //格式字符串，%s字符串 %c字符 %d整型 %.2f浮点型</span></span><br><span class="line"><span class="string">//(1) %s, %d , %.2f %c称为占位符</span></span><br><span class="line"><span class="string">//(2) 位符由后面变量来替换</span></span><br><span class="line"><span class="string">//(3) %s 表示后面由字符串来替换</span></span><br><span class="line"><span class="string">//(4) %d是整数来替换</span></span><br><span class="line"><span class="string">//(5) %.2f 表示使用小数来替换，替换后，只会保留小数点两位，并且进行四舍五入的处理</span></span><br><span class="line"><span class="string">//(6) %c使用char类型来替换</span></span><br><span class="line"><span class="string">String formatStr = &quot;</span>我的姓名是%s年龄是%d，成绩是%<span class="number">.2f</span> 性别是%c.希望大家喜欢我!<span class="string">&quot;;</span></span><br><span class="line"><span class="string">String info2 = String.format(formatstr，name,age，scdre,gender);</span></span><br><span class="line"><span class="string">system.out.println( &quot;</span>info2=<span class="string">&quot; + info2);                   </span></span><br></pre></td></tr></table></figure><h2 id="三、StringBuffer"><a href="#三、StringBuffer" class="headerlink" title="三、StringBuffer"></a>三、StringBuffer</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><ul><li>java.lang.StringBuffer代表可变的字符序列,可以对字符串内容进行增删</li><li>很多方法与String相同，但StringBuffer是可变长度的</li><li><p>StringBuffer是一个者器</p></li><li><p>StringBuffer是final类</p></li><li>实现了Serializable接口，可以保存到文件，或者网络传输 </li><li>继承了抽象类AbstractStringBulider，AbstractStringBulider属性char[] value 存放的字符序列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. StringBuffer的直接父类是 AbstractStringBuilder</span></span><br><span class="line"><span class="comment">//2. StringBuffer实现了Serializable, 即StringBUffer的对象可以串行化</span></span><br><span class="line"><span class="comment">//3．在父类中 AbstractStringBuilder有属性 char[] value ,不是final；该value 数组存放字符串内容</span></span><br><span class="line"><span class="comment">//4. StringBuffer是一个 final类，不能被继承</span></span><br><span class="line"><span class="comment">//5，因为StringBuffer字符内容是存在 char[] value，所有在变化(增加/删除)；不用每次都更换地址(即不是每次创建新对象)，所以效率高于String]</span></span><br><span class="line">StringBufferstringBuffer = <span class="keyword">new</span> <span class="title class_">StringBuffer</span>( <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-String-和-StringBuffer对比"><a href="#2-String-和-StringBuffer对比" class="headerlink" title="2. String 和 StringBuffer对比"></a>2. String 和 StringBuffer对比</h3><ul><li><p>String保存的是字符串常量，里面的值不能更改，每次String类的更新实际上就是更改地址，效率较低</p></li><li><p>StringBuffer保存的是字符串变量，里面的值可以更改，每次StringBuffer的更新实际上可以更新内容，不用更新地址，效率较高</p></li></ul><h3 id="3-构造器"><a href="#3-构造器" class="headerlink" title="3. 构造器"></a>3. 构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个大小为16的char[] ,用于存放字符内容</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>() ;</span><br><span class="line"><span class="comment">//2. 通过构造器指定char[] 大小</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//3. 通过给一个String 创建StringBuffer, char[] 大小就是str.Length() + 16</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;heLlo&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-String-和-StringBuffer互相转换"><a href="#4-String-和-StringBuffer互相转换" class="headerlink" title="4. String 和 StringBuffer互相转换"></a>4. String 和 StringBuffer互相转换</h3><h4 id="4-1-String-—-gt-StringBuffer"><a href="#4-1-String-—-gt-StringBuffer" class="headerlink" title="4.1 String —&gt; StringBuffer"></a>4.1 String —&gt; StringBuffer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String --&gt; StringBuffer</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello tom&quot;</span>;</span><br><span class="line"><span class="comment">//方式1使用构造器</span></span><br><span class="line"><span class="comment">//注意：返回的才是StringBuffer对象，对str本身没有影响</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str);</span><br><span class="line"><span class="comment">//方式2使用的是append方法</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">stringBuffer1 = stringBuffer1.append(str);</span><br></pre></td></tr></table></figure><h4 id="4-2-StringBuffer-—-gt-String"><a href="#4-2-StringBuffer-—-gt-String" class="headerlink" title="4.2 StringBuffer —&gt; String"></a>4.2 StringBuffer —&gt; String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StringBuffer -&gt;String</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;执笔&quot;</span>);</span><br><span class="line"><span class="comment">//方式1：使用StringBuffer提供的toString方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> stringBuffer3.toString();</span><br><span class="line"><span class="comment">//方式2：使用构造器</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(stringBuffer3); </span><br></pre></td></tr></table></figure><h3 id="5-常用方法"><a href="#5-常用方法" class="headerlink" title="5. 常用方法"></a>5. 常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) append<span class="comment">//增加</span></span><br><span class="line"><span class="number">2</span>) delete(start,end)<span class="comment">//删除</span></span><br><span class="line"><span class="number">3</span>) replace(start,end,string)<span class="comment">//修改，将start----end间的内容替换掉,不含end</span></span><br><span class="line"><span class="number">4</span>) indexOf <span class="comment">//查找子串在字符串第1次出现的索引,如果找不到返回-1</span></span><br><span class="line"><span class="number">5</span>) insert<span class="comment">//插入</span></span><br><span class="line"><span class="number">6</span>) length<span class="comment">//获取长度</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//增加</span></span><br><span class="line">s.append(<span class="string">&#x27;,&#x27;</span>);<span class="comment">//&quot;hello,&quot;</span></span><br><span class="line">s.append(<span class="string">&quot;你好&quot;</span>);<span class="comment">//&quot;hello,你好&quot;</span></span><br><span class="line">s.append(<span class="string">&quot;执笔&quot;</span>).append(<span class="literal">true</span>).append(<span class="number">10</span>);<span class="comment">//&quot;hello,你好执笔true10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除 索引为 &gt;= strat &amp;&amp; &lt;end处的字符</span></span><br><span class="line"><span class="comment">//删除 5~8的字符</span></span><br><span class="line">s.delete(<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,执笔true10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="comment">//使用jack替换索引9-12的字符[9,12)</span></span><br><span class="line">s.replace(<span class="number">9</span>,<span class="number">12</span>,<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,执笔jack10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找子串在字符串第1次出现的索引,如果找不到返回-1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">indexOf</span> <span class="operator">=</span> s.indexOf(<span class="string">&quot;执笔&quot;</span>);</span><br><span class="line">System.out.println(indexOf);<span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="comment">//在索引为6的位置插入 &quot;你好&quot; 原来索引为6的内容自动后移</span></span><br><span class="line">s.insert(<span class="number">6</span>,<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,你好执笔jack10&quot;</span></span><br><span class="line"><span class="comment">//长度</span></span><br><span class="line">System.out.println(s.length);<span class="comment">//16</span></span><br></pre></td></tr></table></figure><h2 id="四、StringBuilder"><a href="#四、StringBuilder" class="headerlink" title="四、StringBuilder"></a>四、StringBuilder</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><ul><li>StringBuilder 继承AbstractStringBuilder 类</li><li>实现了Serializable，说明StringBuilder对象是可以串行化(对象可以网络传输，可以保存到文件)</li><li>StringBuilder 是final类，不能被继承</li><li>StringBuilder 对象字符序列仍然是存放在其父类AbstractStringBuilder的 char[] vaLue；因此，字符序列是堆中</li><li>StringBuilder 的方法，没有做互斥的处理,即没有synchronized 关键字，因此在单线程的情况下使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br></pre></td></tr></table></figure><h3 id="2-String、StringBuffer、StringBuilder比较"><a href="#2-String、StringBuffer、StringBuilder比较" class="headerlink" title="2. String、StringBuffer、StringBuilder比较"></a>2. String、StringBuffer、StringBuilder比较</h3><ul><li>StringBuilder和StringBuffer非常类似，均代表可变的字符序列，而且方法也一样<br>2) String：不可变字符序列，效率低，但是复用率高<br>3) StringBuffer：可变字符序列、效率较高(增删)、线程安全<br>4) StringBuilder：可变字符序列、效率最高、线程不安全</li><li>String使用注意说明：<ul><li>string s=”a”; //创建了一个字符串</li><li>s += “b”; //实际上原来的” a”字符串对象已经丢弃了，现在又产生了一个字符串s+ “b” (也就是”ab”)。如果多次执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能=&gt;结论：<strong>如果我们对String做大量修改，不要使用String</strong></li></ul></li></ul><h3 id="3-String、StringBuffer、StringBuilder的选择"><a href="#3-String、StringBuffer、StringBuilder的选择" class="headerlink" title="3. String、StringBuffer、StringBuilder的选择"></a>3. String、StringBuffer、StringBuilder的选择</h3><ul><li>如果字符串存在大量的修改操作，一般使用<strong>StringBuffer</strong>或<strong>StringBuilder</strong></li><li>如果字符串存在大量的修改操作，并在单线程的情况，使用<strong>StringBuilder</strong></li><li>如果字符串存在大量的修改操作，并在多线程的情况，使用<strong>StringBuffer</strong></li><li>如果我们字符串很少修改，被多个对象引用，使用<strong>String</strong>， 比如配置信息等</li></ul><h2 id="五、Math类"><a href="#五、Math类" class="headerlink" title="五、Math类"></a>五、Math类</h2><ul><li>包含执行基本数学运算的方法</li></ul><h3 id="1-方法"><a href="#1-方法" class="headerlink" title="1. 方法"></a>1. 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) abs<span class="comment">//绝对值</span></span><br><span class="line"><span class="number">2</span>) pow<span class="comment">//求幂</span></span><br><span class="line"><span class="number">3</span>) ceil<span class="comment">//向上取整</span></span><br><span class="line"><span class="number">4</span>) floor<span class="comment">//向下取整</span></span><br><span class="line"><span class="number">5</span>) round<span class="comment">//四舍五入</span></span><br><span class="line"><span class="number">6</span>) sqrt<span class="comment">//求开方</span></span><br><span class="line"><span class="number">7</span>) random<span class="comment">//求随机数</span></span><br><span class="line"><span class="number">8</span>) max<span class="comment">//求两个数的最大值</span></span><br><span class="line"><span class="number">9</span>) min<span class="comment">//求两个数的最小值</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.abs绝对值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">abs</span> <span class="operator">=</span> Math.abs(<span class="number">9</span>);</span><br><span class="line">        System.out.println(abs);</span><br><span class="line">        <span class="comment">//2.pow求幂</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">pow</span> <span class="operator">=</span> Math.pow(-<span class="number">3.5</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(pow);</span><br><span class="line">        <span class="comment">//3.ceil向上取整,返回&gt;=该参数的最小整数(转成double);</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">ceil</span> <span class="operator">=</span> Math.ceil(-<span class="number">3.0001</span>);</span><br><span class="line">        System.out.println(ceil);</span><br><span class="line">        <span class="comment">//4.floor向下取整，返回&lt;=该参数的最大整数(转成double)</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">floor</span> <span class="operator">=</span> Math.floor(-<span class="number">4.999</span>);</span><br><span class="line">        System.out.println(floor);</span><br><span class="line">        <span class="comment">//5.round四舍五入Math.floor(该参数+0.5)</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">round</span> <span class="operator">=</span> Math.round(-<span class="number">5.001</span>);</span><br><span class="line">        System.out.println(round);</span><br><span class="line">        <span class="comment">//6.sqrt求开方</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">sqrt</span> <span class="operator">=</span> Math.sqrt(-<span class="number">9.0</span>);</span><br><span class="line">        System.out.println(sqrt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.random返回随机数[0—1)</span></span><br><span class="line">        <span class="comment">//获取a-b之间的一个随机整数，a,b均为整数(2,7)</span></span><br><span class="line">        <span class="comment">//1、先取左边 = a：(int)a</span></span><br><span class="line">        <span class="comment">//2、[a-b):int num = (int)(Math.random()*(b-a+1) +a)</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">random</span> <span class="operator">=</span> Math.random();</span><br><span class="line">        System.out.println(random);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println((<span class="type">int</span>)(<span class="number">2</span> + Math.random() * (<span class="number">7</span> - <span class="number">2</span> + <span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//max min返回最大值 和最小值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Math.min(<span class="number">1</span>, <span class="number">9</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Math.max(<span class="number">5</span>, <span class="number">9</span>);</span><br><span class="line">        System.out.println(min);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、Arrays类"><a href="#六、Arrays类" class="headerlink" title="六、Arrays类"></a>六、Arrays类</h2><h3 id="1-方法-1"><a href="#1-方法-1" class="headerlink" title="1. 方法"></a>1. 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1) toString 返回数组的字符串形式</span></span><br><span class="line">Arrays.toString(arr);</span><br><span class="line"><span class="comment">//(2) sort排序(自然排序和定制排序)</span></span><br><span class="line">Integer arr[] = &#123;<span class="number">1</span>,-<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">89</span>&#125;</span><br><span class="line"><span class="comment">//(3) binarySearch通过二分搜索法进行查找，要求必须排好序</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//(4) copyOf数组元素的复制</span></span><br><span class="line">Integer[] newArr = Arrays.copyOf(arr,arr.length);</span><br><span class="line"><span class="comment">//(5) fill数组元素的填充</span></span><br><span class="line">Integer[] num = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>&#125;;</span><br><span class="line">Arrays.fill(num,<span class="number">99</span>);</span><br><span class="line"><span class="comment">//(6) equals比较两个数组元素的内容是否完全一致</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">equals</span> <span class="operator">=</span> Arrays.equals(arr,arr2);</span><br><span class="line"><span class="comment">//(7) asList将一组值，转换成list</span></span><br><span class="line">List&lt;Integer&gt; asList = Arrays.asList(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraysMethod02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">89</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、使用binarySearch 二叉查找</span></span><br><span class="line">        <span class="comment">//2、要求数组是有序的 ；无序不能使用</span></span><br><span class="line">        <span class="comment">//3、如果数组中不存在该元素，就返回 return -(low + 1); //key not found;</span></span><br><span class="line">             <span class="comment">//即为该元素应该存在的位置 - 1 取负数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr, <span class="number">99</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;index= &quot;</span> + index);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//copyOf 数组元素的复制</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、如果拷贝的长度 &gt; arr.length 就在新数组的后面 增加null</span></span><br><span class="line">        <span class="comment">//2、如果拷贝的长度 &lt; 0 就抛出异常NegativeArraySizeException</span></span><br><span class="line">        Integer[] newArr = Arrays.copyOf(arr, arr.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(newArr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//fill 数组元素的填充</span></span><br><span class="line">        <span class="comment">//1、使用9去填充数组 即为替换原来的元素</span></span><br><span class="line">        Integer[] num = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        Arrays.fill(num, <span class="number">9</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;====填充后的数组====&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(num));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//equals 比较两个数组的内容是否一致</span></span><br><span class="line">        <span class="comment">//1、相等为true 不相等为false</span></span><br><span class="line">        Integer[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">89</span>&#125;;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">equals</span> <span class="operator">=</span> Arrays.equals(arr, arr2);</span><br><span class="line">        System.out.println(<span class="string">&quot;比较后的数组：&quot;</span> + equals);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//asList 将一组值，转成list</span></span><br><span class="line">        <span class="comment">//1、asList 方法 会将(2, 3, 4, 5, 6)数据转成一个List集合</span></span><br><span class="line">        <span class="comment">//2、返回的asList 编译类型 List(接口)</span></span><br><span class="line">        <span class="comment">//3、运行类型 java.util.Arrays$ArrayList 是Arrays类的静态内部类</span></span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">asList</span> <span class="operator">=</span> Arrays.asList(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;asList= &quot;</span> + asList);</span><br><span class="line">        System.out.println(<span class="string">&quot;asList的运行类型：&quot;</span> + asList.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-排序"><a href="#2-排序" class="headerlink" title="2. 排序"></a>2. 排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraysSortCustom</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">5</span>, -<span class="number">1</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        bubble01(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="comment">//向上转型 自动拆箱 Integer 转成int 类型</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> (Integer) o1;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> (Integer) o2;</span><br><span class="line">                <span class="keyword">return</span> i2 - i1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冒泡排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble02</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">//从小到大排序</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冒泡排序 + 定制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble01</span><span class="params">(<span class="type">int</span>[] arr, Comparator c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">//从小到大排序</span></span><br><span class="line">                <span class="keyword">if</span> (c.compare(arr[j], arr[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、System类"><a href="#七、System类" class="headerlink" title="七、System类"></a>七、System类</h2><h3 id="1-方法-2"><a href="#1-方法-2" class="headerlink" title="1. 方法"></a>1. 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) exit<span class="comment">//退出当前程序</span></span><br><span class="line">(<span class="number">2</span>) arraycopy<span class="comment">//复制数组元素，适合底层使用，一般使用Arrays.copyOf完成数组复制</span></span><br><span class="line"><span class="type">int</span>[] src = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] dest = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]</span><br><span class="line">    System.arraycopy(src,<span class="number">0</span>,dest,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">(<span class="number">3</span>) currentTimeMillens<span class="comment">//返回当前时间距离1970-1-1的毫秒数</span></span><br><span class="line">(<span class="number">4</span>) gc<span class="comment">//运行垃圾回收机制 System.gc();</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//exit</span></span><br><span class="line"><span class="comment">//1. exit(0) 表示程序退出</span></span><br><span class="line"><span class="comment">//2. 0表示一个状态，正常的状态</span></span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//源数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//* @param src the source array .</span></span><br><span class="line"><span class="comment">// srcPos: 从源数组的哪个索引位置开始拷贝</span></span><br><span class="line"><span class="comment">//* @param srcPos starting position in the source array 。</span></span><br><span class="line"><span class="comment">// dest:目标数组，即把源数组的数据拷贝到哪个数组</span></span><br><span class="line"><span class="comment">//* @param dest the destination array .</span></span><br><span class="line"><span class="comment">// destPos:把源数组的数据拷贝到目标数组的哪个索引</span></span><br><span class="line"><span class="comment">//* @param destPos starting position in the destination data 。</span></span><br><span class="line"><span class="comment">//Length:从源数组拷贝多少个数据到目标数组</span></span><br><span class="line"><span class="comment">//* @param Length the number of array eLements to be copied.</span></span><br><span class="line">System.arraycopy(src, <span class="number">0</span>,dest, <span class="number">0</span>, src.Length);</span><br><span class="line"><span class="comment">// int[] src=&#123;1,2,3&#125;;</span></span><br><span class="line">System.out.printLn(<span class="string">&quot;dest=&quot;</span> + Arrays.toString(dest));<span class="comment">//[0, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="八、BigInteger-BigDecimal类"><a href="#八、BigInteger-BigDecimal类" class="headerlink" title="八、BigInteger BigDecimal类"></a>八、BigInteger BigDecimal类</h2><ul><li>BigInteger适合保存比较大的整型</li><li>BigDecimal适合保存精度更高的浮点型(小数)</li></ul><h3 id="1-方法-3"><a href="#1-方法-3" class="headerlink" title="1. 方法"></a>1. 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add<span class="comment">//加</span></span><br><span class="line">subtract<span class="comment">//减</span></span><br><span class="line">multiply<span class="comment">//乘</span></span><br><span class="line">divide<span class="comment">//除</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot; 1234567890&quot;</span>);</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot; 200&quot;</span>);</span><br><span class="line"><span class="comment">// 2.调用常见的运算方法</span></span><br><span class="line"><span class="comment">// System.out.println(b1+ b2);不能使用这样的+方法运行</span></span><br><span class="line">System.out.println(b1.add(b2));<span class="comment">//加</span></span><br><span class="line">System.out.println(b1.subtract(b2));<span class="comment">//减</span></span><br><span class="line">System.out.println(b1.multiply(b2));<span class="comment">//乘</span></span><br><span class="line">System.out.println(b1.divide(b2));<span class="comment">//除</span></span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1234567890.567&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="comment">// 2.调用常见的运算方法</span></span><br><span class="line"><span class="comment">// System.out.println(b1 + b2);不能使用+号运算.</span></span><br><span class="line">System.out.println(b1.add(b2));<span class="comment">//加</span></span><br><span class="line">System.out.println(b1.subtract(b2));<span class="comment">//减</span></span><br><span class="line">System.out.println(b1.multiply(b2));<span class="comment">//乘</span></span><br><span class="line"><span class="comment">//后面这个BigDecimal.ROUND CEILING 需要指定，是精度</span></span><br><span class="line"><span class="comment">//没有这个参数，则会提示:错误</span></span><br><span class="line">System.out.println(b1.divide(b2, BigDecimal.ROUND_CEILING);<span class="comment">// 除</span></span><br></pre></td></tr></table></figure><h2 id="九、日期类"><a href="#九、日期类" class="headerlink" title="九、日期类"></a>九、日期类</h2><h3 id="1-第一代日期类"><a href="#1-第一代日期类" class="headerlink" title="1. 第一代日期类"></a>1. 第一代日期类</h3><ul><li>Date：精确到毫秒，代表特定的瞬间</li><li>SimpleDateFormat：格式和解析日期的类，允许进行格式化(日期 - &gt; 文本)，解析(文本 - &gt; 日期)和规范化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Date01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、这里的Date 类在java.util包</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//获取当前日期</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前日期：&quot;</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">123456</span>);<span class="comment">//通过毫秒数来指定时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;date1=&quot;</span> + date1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、创建SimpleDateFormat对象 可以指定相应的格式</span></span><br><span class="line">        <span class="comment">//2、格式字母是规定好的</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 hh:mm:ss E&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(date);<span class="comment">//format：将日期转换成指定的格式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;转换后的时间：&quot;</span> + format);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、可以把一个格式化的String 转成相应的Date</span></span><br><span class="line">        <span class="comment">//2、得到Date 默认为国外的格式 指定输出需要转换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;2022年01月18日 21:35:30 星期二&quot;</span>;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> sdf.parse(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串转换后的时间：&quot;</span> + parse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-第二代日期"><a href="#2-第二代日期" class="headerlink" title="2. 第二代日期"></a>2. 第二代日期</h3><ul><li>主要是Calendar（日历）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Calendar</span> <span class="keyword">extends</span> <span class="title class_">Object</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>,</span><br><span class="line">Cloneable, Comparable &lt; Calendar &gt;</span><br></pre></td></tr></table></figure><ul><li>Calendar类是一个抽象类，它为特定瞬间与一组诸如YEAR、MONTH、DAY OF MONTH、HOUR等日历字段之间的转换提供了一些方法，并为操作日历字段(例如获得下星期的日期)提供了一些方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">C</span> <span class="operator">=</span> Calendar.getInstance(); <span class="comment">//创建日历类对象//比较简单，自由</span></span><br><span class="line">System.out.println(c);</span><br><span class="line"><span class="comment">//2.获取日历对象的某个日历字段</span></span><br><span class="line">System.out.println(<span class="string">&quot;年: &quot;</span>+c.get(Calendar.YEAR));</span><br><span class="line">System.out.println(<span class="string">&quot;月: &quot;</span>+(c.get(Calendar.MONTH)+<span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;日: &quot;</span>+c.get(Calendar.DAY_ OF_MONTH));</span><br><span class="line">System.out.println(<span class="string">&quot;小时: &quot;</span>+c.get(Calendar.HOUR));</span><br><span class="line">System.out.println(<span class="string">&quot;分钟: &quot;</span>+c.get(Calendar.MINUTE));</span><br><span class="line">System.out.println(<span class="string">&quot;秒: &quot;</span>+c.get(Calendar.SECOND));</span><br><span class="line"><span class="comment">//Calender没有专门的格式化方法，所以需要程序员自己来组合显示</span></span><br><span class="line">System.out.println(c.get(Calendar.YEAR) + <span class="string">&quot;年&quot;</span> + (c.get(Calendar.MONTH)+<span class="number">1</span>) +<span class="string">&quot;月&quot;</span> + C.get(Calendar.DAY OF MONTH)+<span class="string">&quot;日&quot;</span>); </span><br></pre></td></tr></table></figure><h3 id="3-第三代日期类"><a href="#3-第三代日期类" class="headerlink" title="3. 第三代日期类"></a>3. 第三代日期类</h3><h4 id="1-方法-4"><a href="#1-方法-4" class="headerlink" title="1. 方法"></a>1. 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) LocalDate<span class="comment">//获取日期字段</span></span><br><span class="line">(<span class="number">2</span>) LocalTime<span class="comment">//获取时间字段</span></span><br><span class="line">(<span class="number">3</span>) LocalDateTime<span class="comment">//获取日期和时间字段</span></span><br><span class="line">(<span class="number">4</span>) DateTimeFormatter<span class="comment">//格式日期类</span></span><br><span class="line">    <span class="type">DateTimeFormat</span> <span class="variable">dft</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(格式);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> dtf.format(日期对象);</span><br><span class="line">(<span class="number">5</span>) Instant<span class="comment">//时间戳</span></span><br><span class="line"><span class="comment">//Instant--&gt;Date</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(instant);</span><br><span class="line"><span class="comment">//Date--&gt;Instant</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> date.toInstant();</span><br><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="comment">//1. 通过静态方法now()获取表示当前时间戳的对象</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">System.out.printLn(now);</span><br><span class="line"><span class="comment">//2. 通过from 可以把Instant转成Date</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> Date.from(now);</span><br><span class="line"><span class="comment">//3. 通过date的toInstant() 可以把date转成Instant对象</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> date.toIhstant();</span><br><span class="line">(<span class="number">6</span>) MonthDay<span class="comment">//类检查重复事件</span></span><br><span class="line">(<span class="number">7</span>) plus()<span class="comment">//测试增加时间的某个部分</span></span><br><span class="line">(<span class="number">8</span>) minus()<span class="comment">//查看一年前和一年后的日期</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记（十五）-- 泛型</title>
      <link href="/undefined/9b45.html"/>
      <url>/undefined/9b45.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><ul><li>泛型又称参数化类型，是jdk5.0出现的新特性，解决数据类型的安全性问题</li><li>在类声明或实例化时只需要指定好需要的具体的类型即可</li><li>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常，使代码更加健壮、简洁</li></ul><h2 id="二、泛型的作用"><a href="#二、泛型的作用" class="headerlink" title="二、泛型的作用"></a>二、泛型的作用</h2><ul><li><p>可以在类声明时通过一个标识表示类中某个属性的类型，或者是某个方法的返回值的类型，或者是参数类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Person&lt;String&gt; tom = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;&gt;(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//泛型的作用：可以在类声明时通过一个标识标识类中的某个属性的类型，</span></span><br><span class="line"><span class="comment">// 或者是某个方法的返回值的类型，或者是参数类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;E&gt; &#123;</span><br><span class="line">   <span class="comment">//E 表示 S 的数据类型，该数据类型在定义Person对象的时候指定，即在编译期间就确定了E是什么类型 </span></span><br><span class="line">    E s;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(E s)</span> &#123;<span class="comment">//E 也可以是参数类型</span></span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">f</span><span class="params">()</span> &#123;<span class="comment">//返回类型</span></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、泛型的语法"><a href="#三、泛型的语法" class="headerlink" title="三、泛型的语法"></a>三、泛型的语法</h2><h3 id="1-泛型的声明"><a href="#1-泛型的声明" class="headerlink" title="1. 泛型的声明"></a>1. 泛型的声明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">interface 接口&lt;T&gt; &#123;&#125;<span class="comment">// T K V不代表值，而是代表类型</span></span><br><span class="line">class 类&lt;K,V&gt; &#123;&#125;<span class="comment">//任意字母都可以 T 是 Type的缩写</span></span><br></pre></td></tr></table></figure><h3 id="2-泛型的实例化"><a href="#2-泛型的实例化" class="headerlink" title="2. 泛型的实例化"></a>2. 泛型的实例化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在类后面指定类型参数的值(类型)</span></span><br><span class="line">List&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">Iterator&lt;Customer&gt; iterator = customers.iterator();</span><br></pre></td></tr></table></figure><h2 id="四、泛型的使用"><a href="#四、泛型的使用" class="headerlink" title="四、泛型的使用"></a>四、泛型的使用</h2><h3 id="1-注意事项和细节"><a href="#1-注意事项和细节" class="headerlink" title="1. 注意事项和细节"></a>1. 注意事项和细节</h3><ul><li>传入的泛型类型：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) <span class="keyword">interface</span> <span class="title class_">List</span>&lt;T&gt;&#123;&#125;; <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt;&#123;&#125;...<span class="comment">//T E只能是引用类型</span></span><br></pre></td></tr></table></figure><ul><li>在指定泛型具体的类型后，可以传入该类型或者其子类型</li><li>使用形式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;integer&gt;();</span><br><span class="line">List&lt;integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><ul><li>若不填写 默认泛型是<E> E 就是 Object</E></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br></pre></td></tr></table></figure><h2 id="五、自定义泛型"><a href="#五、自定义泛型" class="headerlink" title="五、自定义泛型"></a>五、自定义泛型</h2><h3 id="1-自定义泛型类"><a href="#1-自定义泛型类" class="headerlink" title="1. 自定义泛型类"></a>1. 自定义泛型类</h3><h4 id="1-1-基本语法"><a href="#1-1-基本语法" class="headerlink" title="1.1 基本语法"></a>1.1 基本语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class 类名&lt;T,R...&gt; &#123;<span class="comment">//...表示可以有多个泛型</span></span><br><span class="line">    <span class="comment">//成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-注意细节"><a href="#1-2-注意细节" class="headerlink" title="1.2 注意细节"></a>1.2 注意细节</h4><ul><li>普通成员可以使用泛型(属性、方法)</li><li>使用泛型的数组不能初始化</li><li>静态方法中不能使用类的泛型</li><li>泛型类的类型是在创建对象的时候确定的(因为创建对象时，需要指定确定的类型)</li><li>如果在创建对象时，没有指定类型，默认为Object</li></ul><h4 id="1-3-使用"><a href="#1-3-使用" class="headerlink" title="1.3 使用"></a>1.3 使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>&lt;T,R,M&gt; &#123;</span><br><span class="line"> String name;</span><br><span class="line">    R r;</span><br><span class="line">    M m;</span><br><span class="line">    T t;</span><br><span class="line">    T[] ts;<span class="comment">//泛型数组不能初始化，因为数组在new 不能确定T的类型，就无法在内存中开空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-自定义泛型接口"><a href="#2-自定义泛型接口" class="headerlink" title="2. 自定义泛型接口"></a>2. 自定义泛型接口</h3><h4 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名 &lt;T,R&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-注意细节"><a href="#2-2-注意细节" class="headerlink" title="2.2 注意细节"></a>2.2 注意细节</h4><ul><li>接口中，静态成员也不能使用泛型</li><li>泛型接口的类型，在继承接口或者实现接口时确定</li><li>没有指定类型，默认为Object</li></ul><h4 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IUsb</span>&lt;U,R&gt; &#123;</span><br><span class="line">    <span class="comment">//普通方法中可以使用接口泛型</span></span><br><span class="line">    R <span class="title function_">get</span><span class="params">(U u)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(R r)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(R r1, R r2, U u1, U u2)</span>;</span><br><span class="line">    <span class="comment">//在jdk8中，可以在接口中使用默认方法</span></span><br><span class="line">    <span class="keyword">default</span> R <span class="title function_">method</span><span class="params">(U u)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-自定义泛型方法"><a href="#3-自定义泛型方法" class="headerlink" title="3. 自定义泛型方法"></a>3. 自定义泛型方法</h3><h4 id="3-1-基本语法"><a href="#3-1-基本语法" class="headerlink" title="3.1 基本语法"></a>3.1 基本语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;T,R...&gt; 返回类型 方法名 (参数列表) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-注意细节"><a href="#3-2-注意细节" class="headerlink" title="3.2 注意细节"></a>3.2 注意细节</h4><ul><li>泛型方法可以定义在普通方法中，也可以定义在泛型类中</li><li>当泛型方法被调用时，类型会确定</li><li>public void eat(E e){} 修饰符后没有<T,R...> , eat方法不是泛型方法，而是使用了泛型</T,R...></li></ul><h4 id="3-3-使用"><a href="#3-3-使用" class="headerlink" title="3.3 使用"></a>3.3 使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;&#125;<span class="comment">//普通方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T,R&gt; <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">(T t, R r)</span>&#123;&#125;<span class="comment">//泛型方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、泛型的继承"><a href="#六、泛型的继承" class="headerlink" title="六、泛型的继承"></a>六、泛型的继承</h2><ul><li><strong>泛型不具备继承性</strong></li></ul><h2 id="七、泛型的通配符"><a href="#七、泛型的通配符" class="headerlink" title="七、泛型的通配符"></a>七、泛型的通配符</h2><ul><li>&lt;?&gt; 表示支持任意泛型</li><li>&lt;? extends A&gt; 表示支持A类以及A类的子类，规定了泛型的上限</li><li>&lt;? super A&gt; 表示支持A类及A类的父类，不限于直接父类，规定了泛型的下限</li></ul><p>八、JUnit</p><h3 id="8-1-基本介绍"><a href="#8-1-基本介绍" class="headerlink" title="8.1 基本介绍"></a>8.1 基本介绍</h3><ul><li>JUnit是一个Java语言的单元测试框架</li><li>多数Java的开发环境都已经集成了JUnit作为单元测试的工具</li></ul>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（二十三）- 反射</title>
      <link href="/undefined/511d.html"/>
      <url>/undefined/511d.html</url>
      
        <content type="html"><![CDATA[<h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><ul><li>反射机制（Java Refection）允许程序在执行期借助与Refection API取得任何类的内部信息（如：成员变量、构造器、成员方法等），并能直接操作对象的属性及方法</li></ul><h3 id="1、应用"><a href="#1、应用" class="headerlink" title="1、应用"></a>1、应用</h3><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时得到任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>生成动态代理</li></ul><h3 id="相关的类"><a href="#相关的类" class="headerlink" title="相关的类"></a>相关的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)java.lang.Class<span class="comment">//代表一个类，Class对象表示某个类加载后再堆中的对象</span></span><br><span class="line">(<span class="number">2</span>)java.lang.reflect.Method<span class="comment">//代表类的方法，Method对象表示某个类的方法</span></span><br><span class="line">(<span class="number">3</span>)java.lang.reflect.Field<span class="comment">//代表类的成员变量，Filed对象表示某个类的成员变量</span></span><br><span class="line">(<span class="number">4</span>)java.lang.reflect.Constructor<span class="comment">//代表类的构造方法，Constructor对象表示构造器</span></span><br></pre></td></tr></table></figure><h3 id="3、优点和缺点"><a href="#3、优点和缺点" class="headerlink" title="3、优点和缺点"></a>3、优点和缺点</h3><ul><li><p>优点：</p><ul><li>可以动态的创建和使用对象(框架底层核心)，使用灵活</li></ul></li><li><p>缺点：</p><ul><li>使用反射基本是解释执行，对执行速度有影响</li></ul></li></ul><h3 id="调用优化"><a href="#调用优化" class="headerlink" title="调用优化"></a>调用优化</h3><ul><li><p><strong>关闭访问检查</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setAccessble(<span class="literal">true</span>)<span class="comment">//点前面加Method、Filed、Constructor对象</span></span><br></pre></td></tr></table></figure></li><li><p><strong>开启访问检查</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setAccessble(<span class="literal">false</span>)<span class="comment">//点前面加Method、Filed、Constructor对象，默认开启访问检查</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li><p>Class类也是类，继承了Object类</p></li><li><p>Class类对象不是new出来的，而是系统创建的</p></li><li><p>对于某个类的Class对象，在内存中只有一份，因为<strong>类只加载一次</strong></p></li><li><p>通过Class对象可以得到一个类的完整结构</p></li><li><p>Class对象存放在堆中</p></li><li><p>类的字节码二进制数据，是放在方法区（或者称为类的元数据（包括方法代码、变量名、方法名、访问权限等）</p><p><img src="/undefined/511d/java程序在计算机中的三个阶段.png" alt="java程序在计算机中的三个阶段"></p></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//定义类名路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classAllPath</span> <span class="operator">=</span> <span class="string">&quot;com.hzy.study.Car&quot;</span>;</span><br><span class="line">        <span class="comment">//1. 获取到 Car类 对应的 Class对象</span></span><br><span class="line">        <span class="comment">//&lt;?&gt; 泛型通配符 表示不确定Java的类型</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(classAllPath);</span><br><span class="line">        <span class="comment">//2. 输出 cls</span></span><br><span class="line">        System.out.println(cls);<span class="comment">//显示cls 对象，是哪个类的 Class对象 com.hzy.study.Car</span></span><br><span class="line">        System.out.println(cls.getClass());<span class="comment">//输出cls运行类型 java.lang.Class</span></span><br><span class="line">        <span class="comment">//3. 得到包名</span></span><br><span class="line">        System.out.println(cls.getPackage().getName());</span><br><span class="line">        <span class="comment">//4. 得到全类名</span></span><br><span class="line">        System.out.println(cls.getName());</span><br><span class="line">        <span class="comment">//5. 通过cls创建实例对象</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)cls.newInstance();</span><br><span class="line">        System.out.println(car);<span class="comment">//car.toString</span></span><br><span class="line">        <span class="comment">//6. 通过反射获取属性 brand</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">brand</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;brand&quot;</span>);</span><br><span class="line">        System.out.println(brand.get(car));<span class="comment">//宝马</span></span><br><span class="line">        <span class="comment">//7. 通过反射给属性赋值</span></span><br><span class="line">        brand.set(car,<span class="string">&quot;奔驰&quot;</span>);</span><br><span class="line">        System.out.println(brand.get(car));<span class="comment">//奔驰</span></span><br><span class="line">        <span class="comment">//8. 获取到所有的属性(字段)</span></span><br><span class="line">        Field[] fields = cls.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            System.out.println(f.getName());<span class="comment">//名称</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><h4 id="Class-forName"><a href="#Class-forName" class="headerlink" title="Class.forName"></a>Class.forName</h4><ul><li>前提：已知一个类的全类名，且该类在类的路径下，可通过Class类的静态方法forName()获取</li><li>应用场景：多用于配置文件，读取类全路径，加载类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. Class.forName</span></span><br><span class="line"><span class="type">String</span> <span class="variable">classAllPath</span> <span class="operator">=</span> <span class="string">&quot;com.hzy.study.Car&quot;</span>;<span class="comment">//通过读取配置文件获取</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(classAllPath);</span><br><span class="line">System.out.println(cls);</span><br></pre></td></tr></table></figure><h4 id="类名-Class"><a href="#类名-Class" class="headerlink" title="类名.Class"></a>类名.Class</h4><ul><li>前提：已知具体的类，通过类的Class获取，该方式<strong>最为安全可靠，程序性能最高</strong></li><li>应用场景：多用于参数传递</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 类名.class 多用于参数从传递</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">cls2</span> <span class="operator">=</span> Car.class;</span><br><span class="line">System.out.println(cls2);</span><br></pre></td></tr></table></figure><h4 id="对象-getClass"><a href="#对象-getClass" class="headerlink" title="对象.getClass()"></a>对象.getClass()</h4><ul><li>前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象</li><li>应用场景：通过创建好的对象，获取Class对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. 对象.getClass() 已知对象实例</span></span><br><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Car</span>&gt; cls3 = car.getClass();</span><br><span class="line">System.out.println(cls3);</span><br></pre></td></tr></table></figure><h4 id="通过类加载器-4种"><a href="#通过类加载器-4种" class="headerlink" title="通过类加载器[4种]"></a>通过类加载器[4种]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ClassLoader cl = 对象.getClass.getClassLoader();</span></span><br><span class="line"><span class="comment">//Class class4 = cl.loadClass(&quot;类的全类名&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 通过类加载器[4种] 来获取到类的Class对象</span></span><br><span class="line"><span class="comment">//(1) 先得到类</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> car.getClass().getClassLoader();</span><br><span class="line"><span class="comment">//(2) 通过类加载器得到Class对象</span></span><br><span class="line">Class&lt;?&gt; cls4 = classLoader.loadClass(classAllPath);</span><br><span class="line">System.out.println(cls4);</span><br></pre></td></tr></table></figure><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Class cls = 基本数据类型.class</span></span><br><span class="line"><span class="comment">//5. 基本数据类型(int, char, boolean, float, double, byte, long, short) 得到Class对象方式</span></span><br><span class="line">Class&lt;Integer&gt; integerClass = <span class="type">int</span>.class;</span><br><span class="line">Class&lt;Character&gt; characterClass = <span class="type">char</span>.class;</span><br><span class="line">Class&lt;Boolean&gt; booleanClass = <span class="type">boolean</span>.class;</span><br><span class="line">System.out.println(integerClass);<span class="comment">//int  自动装箱 自动拆箱</span></span><br></pre></td></tr></table></figure><h4 id="基本数据类型的包装类"><a href="#基本数据类型的包装类" class="headerlink" title="基本数据类型的包装类"></a>基本数据类型的包装类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Class cls = 包装类.TYPE</span></span><br><span class="line"><span class="comment">//6. 基本数据类型对应的包装类 通过 .TYPE 得到 Class对象</span></span><br><span class="line">Class&lt;Integer&gt; type1 = Integer.TYPE;</span><br><span class="line">Class&lt;Character&gt; type2 = Character.TYPE;</span><br><span class="line">System.out.println(type1);</span><br></pre></td></tr></table></figure><h3 id="拥有Class对象的类型"><a href="#拥有Class对象的类型" class="headerlink" title="拥有Class对象的类型"></a>拥有Class对象的类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; cls = String.class;<span class="comment">//外部类，成员内部类，静态内部类，局部内部类，匿名内部类</span></span><br><span class="line">Class&lt;Serializable&gt; cls2 = Serializable.class;<span class="comment">//interface接口</span></span><br><span class="line">Class&lt;Integer[]&gt; cls3 = Integer[].class;<span class="comment">//数组</span></span><br><span class="line">Class&lt;<span class="type">float</span>[][]&gt; cls4 = <span class="type">float</span>[][].class;<span class="comment">//二维数组</span></span><br><span class="line">Class&lt;Deprecated&gt; cls5 = Deprecated.class;<span class="comment">//annotation注解</span></span><br><span class="line"><span class="comment">//enum枚举</span></span><br><span class="line">Class&lt;Thread.State&gt; cls6 = Thread.State.class;<span class="comment">//线程里面的State</span></span><br><span class="line">Class&lt;Float&gt; cls7 = <span class="type">float</span>.class;<span class="comment">//基本数据类型</span></span><br><span class="line">Class&lt;Void&gt; cls8 = <span class="keyword">void</span>.class;<span class="comment">//返回类型</span></span><br><span class="line">Class&lt;Class&gt; cls9 = Class.class;</span><br></pre></td></tr></table></figure><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><h4 id="静态加载"><a href="#静态加载" class="headerlink" title="静态加载"></a>静态加载</h4><ul><li>编译时加载相关的类，如果没有就报错，依赖性强</li><li>场景：<ul><li>当创建对象时(new)</li><li>当子类被夹在时，父类也加载</li><li>调用类中的静态成员</li></ul></li></ul><h4 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h4><ul><li>运行时加载需要的类，如果不运行时不用该类，即使不存在该类也不报错，降低了依赖性</li><li>场景：反射</li></ul><h4 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h4><p><img src="/undefined/511d/类加载过程.png" alt="类加载过程"></p><h5 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h5><ul><li>将字节码从不同的数据源(class文件、jar包、网络)转化为二进制字节流加载到内存中，并生成一个代表该类的java.lang.Class对象</li></ul><h5 id="连接阶段"><a href="#连接阶段" class="headerlink" title="连接阶段"></a>连接阶段</h5><h6 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h6><ul><li>目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全</li><li>包括：问价格式验证（是否以魔数 oxcafebabe开头）、元数据验证、字节码验证和符号引用验证</li><li>缩短虚拟机类加载时间：-Xverify:none 参数来关闭大部分的类验证措施</li></ul><h6 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h6><ul><li>对静态变量分配内存并初始化（对应数据类型的默认初始值：如0、0L、null、false等），这些变量所使用的的内存都将在方法区中进行分配</li></ul><h6 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h6><ul><li>虚拟机将常量池内的符号引用替换为直接引用的过程</li></ul><h5 id="初始化（initialization"><a href="#初始化（initialization" class="headerlink" title="初始化（initialization)"></a>初始化（initialization)</h5><ul><li>到初始化阶段,才真正开始执行类中定义的Java程序代码，此阶段是执行<clinit>(0)方法的过程</clinit></li><li><clinit>()方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中的所有静态变量的赋值动作和静态代码块中的语句,并进行合并</clinit></li><li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行<clinit>()方法完毕</clinit></clinit></clinit></li></ul><h2 id="反射获取类结构信息"><a href="#反射获取类结构信息" class="headerlink" title="反射获取类结构信息"></a>反射获取类结构信息</h2><h3 id="java-lang-Class类"><a href="#java-lang-Class类" class="headerlink" title="java.lang.Class类"></a>java.lang.Class类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">api_01</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;com.hzy.study.reflection.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//1. getName 获取全类名</span></span><br><span class="line">        System.out.println(personCls.getName());<span class="comment">//com.hzy.study.reflection.Person</span></span><br><span class="line">        <span class="comment">//2. getSimpleName 获取简单类名</span></span><br><span class="line">        System.out.println(personCls.getSimpleName());<span class="comment">//Person</span></span><br><span class="line">        <span class="comment">//3. getFields 获取所有public 修饰的属性 包含本类以及父类</span></span><br><span class="line">        Field[] fields = personCls.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类public 修饰的属性 &quot;</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. getDeclaredFields 获取本类中所有的属性</span></span><br><span class="line">        Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有的属性=&quot;</span> + declaredField.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. getMethods 获取所有public 修饰的方法 包含本类及父类的</span></span><br><span class="line">        Method[] methods = personCls.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类及父类所有public 修饰的方法=&quot;</span> + method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6. getDeclaredMethods 获取本类中所有的方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有的方法&quot;</span> + declaredMethod.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7. getConstructors 获取所有public 修饰的构造器 本类</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = personCls.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类所有public 修饰的构造器&quot;</span> + constructor.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//8. getDeclaredConstructors 获取本类所有的构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类所有的构造器=&quot;</span> + declaredConstructor.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//9. getPackage 获取包信息</span></span><br><span class="line">        System.out.println(personCls.getPackage());<span class="comment">//com.hzy.study.reflection</span></span><br><span class="line">        <span class="comment">//10. getSuperClass 返回父类信息</span></span><br><span class="line">        Class&lt;?&gt; superclass = personCls.getSuperclass();</span><br><span class="line">        System.out.println(<span class="string">&quot;父类信息=&quot;</span> + superclass.getName());<span class="comment">//A</span></span><br><span class="line">        <span class="comment">//11. getInterfaces 返回接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = personCls.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接口信息=&quot;</span> + interfaces);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//12. getAnnotations 返回注解信息</span></span><br><span class="line">        Annotation[] annotations = personCls.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注解信息=&quot;</span> + annotation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="java-lang-reflect-Field类"><a href="#java-lang-reflect-Field类" class="headerlink" title="java.lang.reflect.Field类"></a>java.lang.reflect.Field类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getModifiers<span class="comment">//以int形式返回修饰符</span></span><br><span class="line"><span class="comment">//默认修饰符 是0, public 是 1, private 是 2, protected 是 4, static 是 8, final 是 16</span></span><br><span class="line">getType<span class="comment">//以Class形式返回类型</span></span><br><span class="line">getName<span class="comment">//返回属性名</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;com.hzy.study.reflection.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//4. getDeclaredFields 获取本类中所有的属性</span></span><br><span class="line">        <span class="comment">//说明 默认修饰是 0 ,public 是 1 , private 是2, protected 是 4, static 是 8</span></span><br><span class="line">        Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有的属性=&quot;</span> + declaredField.getName()</span><br><span class="line">            + <span class="string">&quot; 该属性的修饰值=&quot;</span> + declaredField.getModifiers()</span><br><span class="line">            + <span class="string">&quot; 该属性的类型=&quot;</span> + declaredField.getType());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="java-lang-reflect-Method类"><a href="#java-lang-reflect-Method类" class="headerlink" title="java.lang.reflect.Method类"></a>java.lang.reflect.Method类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getModifiers<span class="comment">//以int形式返回修饰符</span></span><br><span class="line"><span class="comment">//默认修饰符 是0, public 是 1, private 是 2, protected 是 4, static 是 8, final 是 16</span></span><br><span class="line">getReturnType<span class="comment">//以Class形式获取返回类型</span></span><br><span class="line">getName<span class="comment">//返回方法名</span></span><br><span class="line">getParameterTypes<span class="comment">//以Class[]返回参数类型数组</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6. getDeclaredMethods 获取本类中所有的方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有的方法&quot;</span> + declaredMethod.getName() +</span><br><span class="line">            <span class="string">&quot; 该方法的访问修饰符的值=&quot;</span> + declaredMethod.getModifiers()</span><br><span class="line">            + <span class="string">&quot; 该方法的返回类型=&quot;</span> + declaredMethod.getReturnType());</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredMethod.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot; 该方法的返回参数类型=&quot;</span> + parameterType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="java-lang-reflect-Constructor类"><a href="#java-lang-reflect-Constructor类" class="headerlink" title="java.lang.reflect.Constructor类"></a>java.lang.reflect.Constructor类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getModifiers<span class="comment">//以int形式返回修饰符</span></span><br><span class="line">getName<span class="comment">//返回构造器名(全类名)</span></span><br><span class="line">getParameterTypes<span class="comment">//以Class[]返回参数类型数组</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//8. getDeclaredConstructors 获取本类所有的构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类所有的构造器=&quot;</span> + declaredConstructor.getName());</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredConstructor.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot; 该构造器的返回形参类型=&quot;</span> + parameterType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="反射创建对象"><a href="#反射创建对象" class="headerlink" title="反射创建对象"></a>反射创建对象</h2><h3 id="通过类中public修饰的无参构造器"><a href="#通过类中public修饰的无参构造器" class="headerlink" title="通过类中public修饰的无参构造器"></a>通过类中public修饰的无参构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 先获取到User类的Class对象</span></span><br><span class="line">Class&lt;?&gt; userClass = Class.forName(<span class="string">&quot;com.hzy.study.reflection.User&quot;</span>);</span><br><span class="line"><span class="comment">//2. 通过public 的无参构造器创建实例</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">user1</span> <span class="operator">=</span> userClass.newInstance();</span><br><span class="line">System.out.println(user1);</span><br></pre></td></tr></table></figure><h3 id="通过类中public修饰的有参构造器"><a href="#通过类中public修饰的有参构造器" class="headerlink" title="通过类中public修饰的有参构造器"></a>通过类中public修饰的有参构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. 通过public 的有参构造器创建实例</span></span><br><span class="line"><span class="comment">//3.1 获取构造器</span></span><br><span class="line">Constructor&lt;?&gt; constructor = userClass.getConstructor(String.class);</span><br><span class="line"><span class="comment">//3.2 创建对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">user2</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;执笔&quot;</span>);</span><br><span class="line">System.out.println(user2);</span><br></pre></td></tr></table></figure><h3 id="通过非public修饰的有参构造器"><a href="#通过非public修饰的有参构造器" class="headerlink" title="通过非public修饰的有参构造器"></a>通过非public修饰的有参构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4. 通过非public 的有参构造器创建实例</span></span><br><span class="line">Constructor&lt;?&gt; declaredConstructor = </span><br><span class="line">    userClass.getDeclaredConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line">declaredConstructor.setAccessible(<span class="literal">true</span>);<span class="comment">//暴破  关闭检查</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">user3</span> <span class="operator">=</span> declaredConstructor.newInstance(<span class="number">20</span>, <span class="string">&quot;执笔&quot;</span>);</span><br><span class="line">System.out.println(user3);</span><br></pre></td></tr></table></figure><h2 id="反射访问类中成员"><a href="#反射访问类中成员" class="headerlink" title="反射访问类中成员"></a>反射访问类中成员</h2><h3 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据属性名获取Field对象</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> clazz对象.getDeclaredField(属性名);</span><br><span class="line"><span class="comment">//暴破</span></span><br><span class="line">f.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line">f.set(o,值);<span class="comment">//如果是静态属性，o 可以写成null</span></span><br><span class="line">System.out.println(f.get(o));<span class="comment">//如果是静态属性，o 可以写成null</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取Student 对应的Class对象</span></span><br><span class="line">Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;com.hzy.study.reflection.Student&quot;</span>);</span><br><span class="line"><span class="comment">//2. 创建对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stuClass.newInstance();</span><br><span class="line">System.out.println(o.getClass());<span class="comment">//Student</span></span><br><span class="line"><span class="comment">//3. 使用反射得到 age</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> stuClass.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">age.set(o, <span class="number">20</span>);<span class="comment">//通过反射来获取属性</span></span><br><span class="line">System.out.println(age.get(o));</span><br><span class="line">System.out.println(o);</span><br><span class="line"><span class="comment">//4. 使用反射得到name</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> stuClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">name.setAccessible(<span class="literal">true</span>);<span class="comment">//暴破</span></span><br><span class="line">name.set(o,<span class="string">&quot;执笔&quot;</span>);</span><br><span class="line">System.out.println(name.get(o));</span><br><span class="line">name.set(<span class="literal">null</span>,<span class="string">&quot;执笔~&quot;</span>);<span class="comment">//静态属性 与类相关</span></span><br><span class="line">System.out.println(name.get(<span class="literal">null</span>));</span><br></pre></td></tr></table></figure><h3 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据方法名和参数列表获取Method方法对象:</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span>clazz.getDeclaredMethod(方法名，XX.class);</span><br><span class="line"><span class="comment">//获取对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> clazz.newlnstance();</span><br><span class="line"><span class="comment">//暴破</span></span><br><span class="line">m.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//访问:</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> m.invoke(o,实参列表);<span class="comment">//如果是静态方法，则invoke的参数o，可以写成null</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取Boos的Class对象</span></span><br><span class="line">Class&lt;?&gt; boosClass = Class.forName(<span class="string">&quot;com.hzy.study.reflection.Boss&quot;</span>);</span><br><span class="line"><span class="comment">//2. 创建对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> boosClass.newInstance();</span><br><span class="line"><span class="comment">//3. 调用public hi() 方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">hi</span> <span class="operator">=</span> boosClass.getDeclaredMethod(<span class="string">&quot;hi&quot;</span>, String.class);</span><br><span class="line">hi.invoke(o,<span class="string">&quot;执笔&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 调用private static say方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">say</span> <span class="operator">=</span> boosClass.getDeclaredMethod(<span class="string">&quot;say&quot;</span>, <span class="type">int</span>.class, String.class, <span class="type">char</span>.class);</span><br><span class="line">say.setAccessible(<span class="literal">true</span>);<span class="comment">//因为方法私有 需要暴破</span></span><br><span class="line">System.out.println(say.invoke(o, <span class="number">100</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&#x27;男&#x27;</span>));</span><br><span class="line">System.out.println(say.invoke(<span class="literal">null</span>, <span class="number">200</span>, <span class="string">&quot;李四&quot;</span>,<span class="string">&#x27;男&#x27;</span>));<span class="comment">//因为say方法时static 可以传入null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 反射中 如果方法有返回值 统一返回Object 但运行类型与方法定义的返回类型一致</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">reVal</span> <span class="operator">=</span> say.invoke(<span class="literal">null</span>, <span class="number">300</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;reVal 的运行类型= &quot;</span> + reVal.getClass());<span class="comment">//String</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记（二十一）- 网络通信</title>
      <link href="/undefined/198.html"/>
      <url>/undefined/198.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、网络通信"><a href="#一、网络通信" class="headerlink" title="一、网络通信"></a>一、网络通信</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul><li>将数据通过网络从一台设备传输到另一台设备</li></ul><h2 id="二、网络"><a href="#二、网络" class="headerlink" title="二、网络"></a>二、网络</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul><li>两台设备通过一定物理设备连接起来构成了网络</li></ul><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h3><ul><li>根据网络覆盖范围不同进行分类</li></ul><h4 id="2-1-局域网"><a href="#2-1-局域网" class="headerlink" title="2.1 局域网"></a>2.1 局域网</h4><ul><li>覆盖范围最小，仅覆盖一个教室或者一个机房</li></ul><h4 id="2-2-城域网"><a href="#2-2-城域网" class="headerlink" title="2.2 城域网"></a>2.2 城域网</h4><ul><li>覆盖范围较大，可以覆盖一个城市</li></ul><h4 id="2-3-广域网"><a href="#2-3-广域网" class="headerlink" title="2.3 广域网"></a>2.3 广域网</h4><ul><li>覆盖范围最大，可以覆盖全国甚至全球，万维网是广域网的代表</li></ul><h2 id="三、IP地址"><a href="#三、IP地址" class="headerlink" title="三、IP地址"></a>三、IP地址</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul><li>用于唯一标识网络中的每台计算机</li><li>表示形式：点分十进制  xx.xx.xx.xx</li><li>每一个十进制数的范围：0~255</li><li>查看IP地址：dos控制台 输入ipconfig</li></ul><h3 id="2-组成"><a href="#2-组成" class="headerlink" title="2. 组成"></a>2. 组成</h3><ul><li>ip地址的组成=网络地址 + 主机地址，如：192.168.16.69</li></ul><h3 id="3-IPV4"><a href="#3-IPV4" class="headerlink" title="3. IPV4"></a>3. IPV4</h3><ul><li>4个字节（32位）表示，一个字节的范围是0~255</li></ul><h4 id="3-1-分类"><a href="#3-1-分类" class="headerlink" title="3.1 分类"></a>3.1 分类</h4><ul><li>特殊的：<strong>172.0.0.1</strong> 表示本机地址</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">0.0.0.0 到 127.255.255.255</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">128.0.0.0 到 191.255.255.255</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">192.0.0.0 到 223.255.255.255</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">224.0.0.0 到 239.255.255.255</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">240.0.0.0 到 247.255.255.255</td></tr></tbody></table></div><img src="/undefined/198/198/ipv4%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB.png" class title="ipv4地址分类"><h2 id="四、域名"><a href="#四、域名" class="headerlink" title="四、域名"></a>四、域名</h2><ul><li>www.baidu.com 将ip地址映射成域名</li></ul><h2 id="五、端口"><a href="#五、端口" class="headerlink" title="五、端口"></a>五、端口</h2><h3 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul><li>用于标识计算机上的某个特定的网络程序</li></ul><h3 id="2-表示形式"><a href="#2-表示形式" class="headerlink" title="2. 表示形式"></a>2. 表示形式</h3><ul><li>以整数形式，端口范围0~65535[2个字节表示端口0~2^16-1]</li><li>0~1024已经被占用，如ssh 22，ftp 21，smtp 25，http 80</li><li>常见的网络程序端口号：<ol><li>tomcat：8080</li><li>mysql：3306</li><li>oracle：1521</li><li>sqlserver：1433</li></ol></li></ul><h3 id="3-图示"><a href="#3-图示" class="headerlink" title="3.图示"></a>3.图示</h3><img src="/undefined/198/198/%E5%9F%9F%E5%90%8D%E5%92%8C%E7%AB%AF%E5%8F%A3.png" class title="域名和端口"><ul><li><strong>在网络开发中因避免使用1~1024范围中的端口</strong></li></ul><h2 id="六、网络通信协议"><a href="#六、网络通信协议" class="headerlink" title="六、网络通信协议"></a>六、网络通信协议</h2><h3 id="1-TCP-IP协议"><a href="#1-TCP-IP协议" class="headerlink" title="1. TCP/IP协议"></a>1. TCP/IP协议</h3><ul><li><p>英文全称：Transmission Control Protocol/Internet Protocol</p></li><li><p>中文：传输控制协议/因特网互联协议，又叫网络通讯协议</p></li><li><p>是Internet最基本的协议，国际互联网的基础</p></li><li><p>由网络层的IP协议和传输层的TCP协议组成</p><img src="/undefined/198/198/TCP-IP%E5%8D%8F%E8%AE%AE.png" class title="TCP-IP协议"></li></ul><p>​        <img src="/undefined/198/198/%E5%B1%82.png" class title="层"></p><h3 id="2-TCP-传输控制协议"><a href="#2-TCP-传输控制协议" class="headerlink" title="2.  TCP 传输控制协议"></a>2.  TCP 传输控制协议</h3><ul><li>使用TCP协议前,须先建立TCP连接,形成传输数据通道</li><li>传输前，采用”三次握手”方式，是可靠的</li><li>TCP协议进行通信的两个应用进程:客户端、服务端</li><li>在连接中可进行大数据量的传输</li><li>传输完毕,需释放已建立的连接，效率低</li></ul><h3 id="3-UDP-用户数据协议"><a href="#3-UDP-用户数据协议" class="headerlink" title="3. UDP 用户数据协议"></a>3. UDP 用户数据协议</h3><ul><li>将数据、源、目的封装成数据包,不需要建立连接</li><li>每个数据报的<strong>大小限制在64K内</strong>,不适合传输大量数据</li><li>因无需连接，故是不可靠的</li><li>发送数据结束时无需释放资源(因为不是面向连接的)，速度快</li></ul><h2 id="七、InetAddress-类"><a href="#七、InetAddress-类" class="headerlink" title="七、InetAddress 类"></a>七、InetAddress 类</h2><h3 id="1-方法"><a href="#1-方法" class="headerlink" title="1. 方法"></a>1. 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getLockHost<span class="comment">//获取本机InetAddress对象</span></span><br><span class="line">getByName<span class="comment">//根据指定主机名/域名获取ip地址对象</span></span><br><span class="line">getHostName<span class="comment">//获取InetAddress对象主机名</span></span><br><span class="line">getHostAddress<span class="comment">//获取InetAddress对象的地址</span></span><br></pre></td></tr></table></figure><h2 id="八、Socket-套接字"><a href="#八、Socket-套接字" class="headerlink" title="八、Socket 套接字"></a>八、Socket 套接字</h2><h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h3><ul><li>套接字(Socket)开发网络应用程序被广泛采用，以至于成为事实上的标准</li><li>通信的两端都要有Socket，是两台机器间通信的端点</li><li>网络通信其实就是Socket间的通信</li><li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输</li><li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端</li></ul><h3 id="2-用法"><a href="#2-用法" class="headerlink" title="2. 用法"></a>2. 用法</h3><ul><li>根据用户输入在服务端下载指定音乐文件，如果不是则返回下载默认音乐文件</li></ul><h4 id="2-1-Server端"><a href="#2-1-Server端" class="headerlink" title="2.1 Server端"></a>2.1 Server端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 一个凡人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework03Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 创建端口等待连接</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端等待连接....&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 创建Socket对象 如果被连接就返回 Socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">//3. 接收客户端的内容</span></span><br><span class="line">        <span class="comment">//   这里采用字符流的方式接收</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        <span class="comment">//4. 如果客户端发送的内容是 坦克大战背景音乐 就发送tk.mp3给客户端</span></span><br><span class="line">        <span class="comment">//   否则返回默认音乐 7301.mp3</span></span><br><span class="line">        String filePath;<span class="comment">//定义文件路径</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;坦克大战背景&quot;</span>.equals(line)) &#123;</span><br><span class="line">            filePath = <span class="string">&quot;j:\\tk.mp3&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filePath = <span class="string">&quot;j:\\7301.mp3&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  读取文件</span></span><br><span class="line">        <span class="comment">//  给客户端发送音乐 采用字节流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//一边读一边发送</span></span><br><span class="line">        <span class="keyword">while</span>((len = bis.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置结束标记</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        br.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端退出...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-Client端"><a href="#2-2-Client端" class="headerlink" title="2.2 Client端"></a>2.2 Client端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 一个凡人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework03Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 连接端口</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2. 给服务端发送需要下载的音乐名 采用Scanner</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入需要下载的音乐名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">musicName</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        bw.write(musicName);</span><br><span class="line">        bw.flush();<span class="comment">//刷新</span></span><br><span class="line">        socket.shutdownOutput();<span class="comment">//结束标记</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3. 接收服务端发送的文件 并保存到 e:\\</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">destPath</span> <span class="operator">=</span> <span class="string">&quot;e:\\&quot;</span> + musicName + <span class="string">&quot;.mp3&quot;</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destPath));</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//循环读取</span></span><br><span class="line">        <span class="keyword">while</span>((len = inputStream.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(data,<span class="number">0</span>,len);</span><br><span class="line">            bos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        bw.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、netstat-指令"><a href="#九、netstat-指令" class="headerlink" title="九、netstat 指令"></a>九、netstat 指令</h2><ul><li><p>dos控制台下执行 win+r说明:</p></li><li><p>netstat -an可以查看当前主机网络情况，包括端口监听情况和网络连接情况</p></li><li>netstat -an | more 可以分页显示<ul><li>Listening表示某个端口在监听</li><li>如果有一个外部程序(客户端)连接到该端口，就会显示一条连接信息.</li><li>可以输入ctrl +c退出指令</li></ul></li></ul><h2 id="十、UDP-网络通信编程"><a href="#十、UDP-网络通信编程" class="headerlink" title="十、UDP 网络通信编程"></a>十、UDP 网络通信编程</h2><h3 id="1-使用"><a href="#1-使用" class="headerlink" title="1. 使用"></a>1. 使用</h3><ul><li>使用UDP进行发送消息</li></ul><h4 id="1-1-发送端"><a href="#1-1-发送端" class="headerlink" title="1.1 发送端"></a>1.1 发送端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 一个凡人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 发送端  ----&gt;也可以接收数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPSendB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 创建 DatagramSocket对象 接收和发送数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="string">&quot;hello,明天去吃火锅...&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">// 说明：封装的DatagramPacket 对象data 内容字节数组, data.length, 主机(ip), 端口</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, <span class="number">0</span>, data.length, InetAddress.getByName(<span class="string">&quot;192.168.42.96&quot;</span>), <span class="number">9999</span>);</span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 接收</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length);</span><br><span class="line">        socket.receive(packet1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拆包显示内容</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet1.getLength();</span><br><span class="line">        <span class="type">byte</span>[] data1 = packet1.getData();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data1, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;B端退出...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-接收端"><a href="#1-2-接收端" class="headerlink" title="1.2 接收端"></a>1.2 接收端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 一个凡人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 接收端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPReceiveA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 创建一个 DatagramSocket 对象 准备在9999接收数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2. 创建一个 DatagramPacket 对象 准备接收数据</span></span><br><span class="line">        <span class="comment">//   UDP协议一个数据包最大64k</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span> * <span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf,  buf.length);</span><br><span class="line">        <span class="comment">//3. 调用方法 将通过网络传输的 DatagramPacket对象</span></span><br><span class="line">        <span class="comment">//   注意：当有数据包发送到9999端口时，就会接收到数据</span></span><br><span class="line">        <span class="comment">//         如果没有数据包发送，就会阻塞</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收端A 等待接收数据...&quot;</span>);</span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 把packet拆包 取出数据并显示</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        <span class="type">byte</span>[] data = packet.getData();<span class="comment">//接收到的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 发送“好的，明天见”</span></span><br><span class="line">        <span class="type">byte</span>[] data1 = <span class="string">&quot;好的，明天见...&quot;</span>.getBytes();</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet1</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data1, <span class="number">0</span>, data1.length, InetAddress.getByName(<span class="string">&quot;192.168.42.96&quot;</span>), <span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;A端退出...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记（十九）- IO流</title>
      <link href="/undefined/9bca.html"/>
      <url>/undefined/9bca.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、文件"><a href="#一、文件" class="headerlink" title="一、文件"></a>一、文件</h2><ul><li>保存数据的地方</li></ul><h3 id="1-文件流"><a href="#1-文件流" class="headerlink" title="1. 文件流"></a>1. 文件流</h3><ul><li><p>文件在程序中以流的方式来操作</p><img src="/undefined/9bca/9bca/%E6%96%87%E4%BB%B6%E6%B5%81.png" class title="文件流"></li><li><p>流：数据在数据源（文件）和程序（内存）之间经历的路</p><ul><li>输入流：数据从数据源（文件）到程序（内存）的路径</li><li>输出流：数据从程序（内存）到数据源（文件）的路径</li></ul></li><li><p>简化理解</p><img src="/undefined/9bca/9bca/%E6%B5%81%E7%AE%80%E5%8C%96%E7%90%86%E8%A7%A3.png" class title="流简化理解"></li></ul><h3 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="2. 文件操作"></a>2. 文件操作</h3><h4 id="2-1-方法"><a href="#2-1-方法" class="headerlink" title="2.1 方法"></a>2.1 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">File</span>(String pathName)<span class="comment">//根据路径构建一个File对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">File</span>(File parent, String child)<span class="comment">//根据父目录文件 + 子路径构建</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">File</span>(String parent, String child)<span class="comment">//根据父目录 + 子路径创建</span></span><br><span class="line">createNewFile <span class="comment">//创建新文件</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一 newFile(String)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create01</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;j:\\news1.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"></span><br><span class="line">        file.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;文件创建成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式二 new File(File parent, String child)</span></span><br><span class="line">    <span class="comment">//根据父目录文件 + 子路径构建</span></span><br><span class="line">    <span class="comment">//j:\\news2.txt</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">patentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;j:\\&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news2.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(patentFile, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//方式三 new File(String parent, String child)</span></span><br><span class="line">    <span class="comment">//根据父目录+子路径构建</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create03</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">parentPath</span> <span class="operator">=</span> <span class="string">&quot;j:\\&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news3.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentPath, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件创建...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-获取文件信息"><a href="#2-2-获取文件信息" class="headerlink" title="2.2 获取文件信息"></a>2.2 获取文件信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//获取文件信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//先创建文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;j:\\news1.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//调用相应的方法，得到对应信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件名字= &quot;</span> + file.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件绝对路径= &quot;</span> + file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件父级目录= &quot;</span> + file.getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件大小(字节)= &quot;</span> + file.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否存在= &quot;</span> + file.exists());</span><br><span class="line">        System.out.println(<span class="string">&quot;是不是一个文件= &quot;</span> + file.isFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;是不是一个目录= &quot;</span> + file.isDirectory());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="二、IO流"><a href="#二、IO流" class="headerlink" title="二、IO流"></a>二、IO流</h2><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h3><ul><li>I/O（Input/Output）：用于处理数据传输，如读/写文件，网络通讯</li><li>Java程序中，对于数据的输入/输出操作以“流（Stream）”的方式进行</li><li>在java.io 包下提供了各种“流”类和接口，用于获取不同种类的数据，并通过方法输入输出数据</li></ul><h4 id="1-1-IO流体系图"><a href="#1-1-IO流体系图" class="headerlink" title="1.1 IO流体系图"></a>1.1 IO流体系图</h4><img src="/undefined/9bca/9bca/IO%E6%B5%81%E4%BD%93%E7%B3%BB%E5%9B%BE.png" class title="IO流体系图"><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h3><h4 id="2-1-操作单位"><a href="#2-1-操作单位" class="headerlink" title="2.1 操作单位"></a>2.1 操作单位</h4><ul><li><p>字节流（8 bit）二进制文件</p></li><li><p>字符流（按字符）文本文件</p><img src="/undefined/9bca/9bca/%E6%B5%81%E7%9A%84%E5%88%86%E7%B1%BB.png" class title="流的分类"></li></ul><h4 id="2-2-数据流的流向"><a href="#2-2-数据流的流向" class="headerlink" title="2.2 数据流的流向"></a>2.2 数据流的流向</h4><h5 id="2-2-1-输入流"><a href="#2-2-1-输入流" class="headerlink" title="2.2.1 输入流"></a>2.2.1 输入流</h5><h6 id="（1）InputStream：字节输入流"><a href="#（1）InputStream：字节输入流" class="headerlink" title="（1）InputStream：字节输入流"></a>（1）InputStream：字节输入流</h6><ul><li><p>InputStream 抽象类是所有类字节输入流的超类</p></li><li><p>常用子类</p><ol><li><p>FileInputStream : 文件输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;j:\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>];<span class="comment">//一次读取8个字节</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建 FileInputStream 对象 用于读取文件</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//从该输入流读取b.length字节的数据到字节数组, 如果没有输入可用, 此方法将阻止</span></span><br><span class="line">            <span class="comment">//如果返回-1 表示读取完毕</span></span><br><span class="line">            <span class="comment">//读取正常  返回实际读取的字节数</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileInputStream.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buff, <span class="number">0</span>, readLen));<span class="comment">//转成char显示</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭文件流, 释放资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol><li><p>BufferedInputStream : 缓冲字节输入流</p></li><li><p>ObjectInputStream : 对象字节输入流</p><h6 id="（2）FlieReader-字符输入流"><a href="#（2）FlieReader-字符输入流" class="headerlink" title="（2）FlieReader : 字符输入流"></a>（2）FlieReader : 字符输入流</h6></li></ol><ul><li><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) <span class="keyword">new</span> <span class="title class_">FileReader</span>(File/String)</span><br><span class="line">(<span class="number">2</span>) read<span class="comment">//每次读取单个字符，返回该字符，如果到文件末尾就返回-1</span></span><br><span class="line">(<span class="number">3</span>) read(<span class="type">char</span>[])<span class="comment">//批量读取多个字符，返回读取到的字符数，如果到文件末尾返回-1</span></span><br><span class="line"> <span class="comment">//相关API：</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">String</span>(<span class="type">char</span>[])<span class="comment">//将char[]转成String</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">String</span>(<span class="type">char</span>[],off,len)<span class="comment">//将char[]的指定部分转成String</span></span><br></pre></td></tr></table></figure><ol><li><p>单字符读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//方式一 单个字符读取</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fileRead01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;j:\\story.txt&quot;</span>;<span class="comment">//文件路径</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//用于接收是否读取完成判断</span></span><br><span class="line">        <span class="comment">//创建fileRead对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            <span class="comment">//循环读取 每次读取一个字符</span></span><br><span class="line">            <span class="keyword">while</span> ((data = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) data);<span class="comment">//将读取到的内容转换成字符输出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><pre><code>2. 字符数组读取   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//方式二 字符数组读取</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fileRead02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;j:\\story.txt&quot;</span>;<span class="comment">//文件路径</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录读取字符数</span></span><br><span class="line">        <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="comment">//创建FileReader对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            <span class="comment">//循环读取  使用read(buf) 返回的是实际读取到的字符数</span></span><br><span class="line">            <span class="comment">//如果返回-1 就说明文件内容读取结束</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileReader.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen));<span class="comment">//将字符转成字符串输出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h5 id="2-2-2-输出流"><a href="#2-2-2-输出流" class="headerlink" title="2.2.2 输出流"></a>2.2.2 输出流</h5><h6 id="（1）FileOutputStream-文件输出流"><a href="#（1）FileOutputStream-文件输出流" class="headerlink" title="（1）FileOutputStream : 文件输出流"></a>（1）FileOutputStream : 文件输出流</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建 FileOutputStream对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;j:\\a.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. new FileOutputStream(filePath) 创建方式, 当写入内容时, 会覆盖原来的内容</span></span><br><span class="line">            <span class="comment">//2. new FileOutputStream(filePath, true) 创建方式, 写入内容时, 是最佳到文件后面</span></span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//写入一个字符</span></span><br><span class="line">            <span class="comment">//fileOutputStream.write(&#x27;H&#x27;);</span></span><br><span class="line">            <span class="comment">//写入一个字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello,world!&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;执笔&quot;</span>;</span><br><span class="line">            <span class="comment">//str.getBytes() 可以把字符串转成字节数组</span></span><br><span class="line">            <span class="comment">//fileOutputStream.write(str.getBytes());</span></span><br><span class="line">            <span class="comment">//write(byte[] b, int off, int len) 将len字节从位于偏移量off的指定字节数组</span></span><br><span class="line">            <span class="comment">//第二种</span></span><br><span class="line">            fileOutputStream.write(str.getBytes(), <span class="number">0</span>, str.length());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileOutputStream.close();<span class="comment">//流关闭</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>（2）FileWriter ： 字符输出流</p><ul><li><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) <span class="keyword">new</span> <span class="title class_">FielWriter</span>(File/String)<span class="comment">//覆盖模式，相当于流的指针在首端</span></span><br><span class="line">(<span class="number">2</span>) <span class="keyword">new</span> <span class="title class_">FileWriter</span>(File/string,<span class="literal">true</span>)<span class="comment">//追加模式，相当于流的指针在尾端</span></span><br><span class="line">(<span class="number">3</span>) writer(<span class="type">int</span>)<span class="comment">//写入单个字符</span></span><br><span class="line">(<span class="number">4</span>) writer(<span class="type">char</span>[])<span class="comment">//写入指定数组</span></span><br><span class="line">(<span class="number">5</span>) writer(<span class="type">char</span>[],off,len)<span class="comment">//写入数组的指定部分</span></span><br><span class="line">(<span class="number">6</span>) writer(String)<span class="comment">//写入字符串</span></span><br><span class="line">(<span class="number">7</span>) writer(String,off,len)<span class="comment">//写入字符串的指定部分</span></span><br><span class="line"> <span class="comment">//相关API：String 类</span></span><br><span class="line">    toCharArray<span class="comment">//将String 转成char[]</span></span><br></pre></td></tr></table></figure><ul><li><strong>FileWriter 使用后必须要关闭(close)或刷新(flush)，否则写入不到指定的文件</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWrite_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;j:\\fileWriter.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//创建FileWriter对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWrite</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">char</span>[] chars = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;8&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileWrite = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath);<span class="comment">//默认写入是覆盖</span></span><br><span class="line">            <span class="comment">//(1)writer(int) 写入单个字符</span></span><br><span class="line">            fileWrite.write(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">            <span class="comment">//(2)writer(char[]) 写入指定数组</span></span><br><span class="line">            fileWrite.write(chars);</span><br><span class="line">            <span class="comment">//(3)writer(char[], off, len) 写入数组指定部分</span></span><br><span class="line">            fileWrite.write(chars,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//(4)writer(string) 写入整个字符串</span></span><br><span class="line">            fileWrite.write(<span class="string">&quot;今天天气真好...&quot;</span>);</span><br><span class="line">            <span class="comment">//(5)writer(string, off, len) 写入字符串的指定部分</span></span><br><span class="line">            fileWrite.write(<span class="string">&quot;哈喽你好...&quot;</span>,<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;写入完成...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//fileWriter.flush();</span></span><br><span class="line">                <span class="comment">//关闭流 等价于 flush() + close()</span></span><br><span class="line">                fileWrite.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-流的角色"><a href="#2-3-流的角色" class="headerlink" title="2.3 流的角色"></a>2.3 流的角色</h4><img src="/undefined/9bca/9bca/%E8%8A%82%E7%82%B9%E6%B5%81%E5%92%8C%E5%A4%84%E7%90%86%E6%B5%81.png" class title="节点流和处理流"><h5 id="2-3-1-节点流"><a href="#2-3-1-节点流" class="headerlink" title="2.3.1 节点流"></a>2.3.1 节点流</h5><ul><li>可以从一个特定的数据源读写数据</li><li>FileReader、FileWriter</li></ul><h5 id="2-3-2-处理流（包装流）"><a href="#2-3-2-处理流（包装流）" class="headerlink" title="2.3.2 处理流（包装流）"></a>2.3.2 处理流（包装流）</h5><h6 id="（1）功能"><a href="#（1）功能" class="headerlink" title="（1）功能"></a>（1）功能</h6><ol><li>性能的提高：主要以增加缓冲的方式来提高输入输出的效率。</li><li>操作的便捷：处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据,使<br>用更加灵活方便</li></ol><h6 id="（2）BufferedReader"><a href="#（2）BufferedReader" class="headerlink" title="（2）BufferedReader"></a>（2）BufferedReader</h6><h6 id="（3）BufferedWriter"><a href="#（3）BufferedWriter" class="headerlink" title="（3）BufferedWriter"></a>（3）BufferedWriter</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedCopy_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;j:\\story.txt&quot;</span>;<span class="comment">//文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\story.txt&quot;</span>;<span class="comment">//拷贝后路径</span></span><br><span class="line">        <span class="comment">//1. BufferedReader 和 BufferedWriter 字符操作</span></span><br><span class="line">        <span class="comment">//2. 不要去操作二进制文件 [声音、视频、doc、pdf]，可能造成文件损坏</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(srcFilePath));</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(destFilePath));</span><br><span class="line">        String line;<span class="comment">//按行读取</span></span><br><span class="line">        <span class="keyword">while</span>((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//一边读一边写</span></span><br><span class="line">            bufferedWriter.write(line);</span><br><span class="line">            bufferedWriter.newLine();<span class="comment">//换行</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;拷贝完毕...&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用try/catch/finally 捕获异常和 直接throws的区别</span></span><br><span class="line"><span class="comment">         * 前置无论是够异常finally一定会执行</span></span><br><span class="line"><span class="comment">         * 或者如果发生异常就不会执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//关闭处理流</span></span><br><span class="line">        <span class="comment">//先判断再关闭 防止异常 NullPointerException</span></span><br><span class="line">        <span class="keyword">if</span> (bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">            bufferedReader.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bufferedWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">            bufferedWriter.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（4）BufferedInputStream"><a href="#（4）BufferedInputStream" class="headerlink" title="（4）BufferedInputStream"></a>（4）BufferedInputStream</h6><h6 id="（5）BufferedOutputStream"><a href="#（5）BufferedOutputStream" class="headerlink" title="（5）BufferedOutputStream"></a>（5）BufferedOutputStream</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedCopy02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\ct.png&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;j:\\ct.png&quot;</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bufferedOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">//数组读取形式</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bufferedInputStream = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath));</span><br><span class="line">            bufferedOutputStream = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath));</span><br><span class="line">            <span class="comment">//拷贝</span></span><br><span class="line">            <span class="keyword">while</span> ((len = bufferedInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bufferedOutputStream.write(buf, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;拷贝完毕....&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//关闭流</span></span><br><span class="line">                <span class="keyword">if</span>(bufferedInputStream != <span class="literal">null</span>)&#123;</span><br><span class="line">                    bufferedInputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (bufferedOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bufferedOutputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-3-两者关系"><a href="#2-3-3-两者关系" class="headerlink" title="2.3.3 两者关系"></a>2.3.3 两者关系</h5><ul><li>节点流是底层流/低级流,直接跟数据源相接</li><li>处理流(包装流)包装节点流，使用了修饰器设计模式，不会直接与数据源相连<strong>[模拟修饰器设计模式]</strong>，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出</li></ul><h4 id="2-4-对象流"><a href="#2-4-对象流" class="headerlink" title="2.4 对象流"></a>2.4 对象流</h4><ul><li>用于处理对象</li></ul><h5 id="2-4-1-序列化"><a href="#2-4-1-序列化" class="headerlink" title="2.4.1 序列化"></a>2.4.1 序列化</h5><ul><li><p>序列化就是在保存数据时，保存数据的值和数据类型</p></li><li><p>需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Serializable <span class="comment">//这是一个标记接口,没有方法</span></span><br><span class="line">Externalizable <span class="comment">//该接口有方法需要实现，因此我们一般实现上面的</span></span><br></pre></td></tr></table></figure></li><li><p>ObjectOutputStream 提供序列化功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dog类</span></span><br><span class="line"><span class="comment">//需要可序列化 实现 Serializable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//序列化对象时，默认将里面所有的属性都进行序列化，但除了static或transient(临时的)修饰的成员</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String nation;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String color;</span><br><span class="line">    <span class="comment">//序列化对象时，要求里面的属性的类型也需要实现序列化接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Master</span> <span class="variable">master</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Master</span>();</span><br><span class="line">    <span class="comment">//serialVersionUID 序列化的版本号 可以提高兼容性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age, String nation, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span> + nation;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ObjectOutputStream_ 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectOutputStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//.dat 可随意 序列化后 保存的文件格式，不是纯文本 而是它的格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;j:\\data.dat&quot;</span>;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath));</span><br><span class="line">        <span class="comment">//序列化数据到j:\data.dat</span></span><br><span class="line">        oos.writeInt(<span class="number">100</span>); <span class="comment">// int -&gt; Integer (实现了 Serializable) 自动装箱</span></span><br><span class="line">        oos.writeBoolean(<span class="literal">true</span>);<span class="comment">// boolean -&gt; Boolean (实现了 Serializable)</span></span><br><span class="line">        oos.writeChar(<span class="string">&#x27;a&#x27;</span>);<span class="comment">// char -&gt; Character (实现了 Serializable)</span></span><br><span class="line">        oos.writeDouble(<span class="number">9.9</span>);<span class="comment">// double -&gt; Double (实现了 Serializable)</span></span><br><span class="line">        oos.writeUTF(<span class="string">&quot;执笔...&quot;</span>); <span class="comment">//String</span></span><br><span class="line">        <span class="comment">//保存一个Dog对象</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小黑&quot;</span>, <span class="number">3</span>, <span class="string">&quot;日本&quot;</span>, <span class="string">&quot;黑色&quot;</span>));</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;数据保存完毕(序列化)....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//seriaVersionUID 序列化的版本号 可以提高兼容性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-4-2-反序列化"><a href="#2-4-2-反序列化" class="headerlink" title="2.4.2 反序列化"></a>2.4.2 反序列化</h5><ul><li><p>反序列化就是在恢复数据时，恢复数据的值和数据类型</p></li><li><p>ObjectInputStream 提供反序列化功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectInputStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//指定反序列化的文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;j:\\data.dat&quot;</span>;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        <span class="comment">//1. 读取(反序列化)的顺序需要和保存的数据(序列化)的顺序一致</span></span><br><span class="line">        <span class="comment">//2. 否则会出现异常</span></span><br><span class="line">        System.out.println(ois.readInt());</span><br><span class="line">        System.out.println(ois.readBoolean());</span><br><span class="line">        System.out.println(ois.readChar());</span><br><span class="line">        System.out.println(ois.readDouble());</span><br><span class="line">        System.out.println(ois.readUTF());</span><br><span class="line">        <span class="comment">//dog 的编译类型为 Object  运行类型为 Dog</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">dog</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行类型= &quot;</span> + dog.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;dog信息= &quot;</span> + dog);</span><br><span class="line">        <span class="comment">//细节</span></span><br><span class="line">        <span class="comment">//1. 如果我们希望调用Dog的方法，需要向下转型</span></span><br><span class="line">        <span class="comment">//2. 需要我们将Dog类的定义，放在到可以引用的位置</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> (Dog) dog;</span><br><span class="line">        System.out.println(dog1.getName());</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-4-3-注意事项"><a href="#2-4-3-注意事项" class="headerlink" title="2.4.3 注意事项"></a>2.4.3 注意事项</h5><ul><li>读写顺序要一致</li><li>要求序列化或反序列化对象,需要实现 Serializable</li><li>序列化的类中建议添加SerialVersionUID,为了提高版本的兼容性</li><li>列化对象时，默认将里面所有属性都进行序列化，但除了static或transient修饰的成员</li><li>序列化对象时，要求里面属性的类型也需要实现序列化接口</li><li>序列化具备可继承性,也就是如果某类已经实现了序列化，则它的所有子类也已经默认实现了序列化</li></ul><h4 id="2-5-标准输入输出流"><a href="#2-5-标准输入输出流" class="headerlink" title="2.5 标准输入输出流"></a>2.5 标准输入输出流</h4><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">类型</th><th style="text-align:center">默认设备</th></tr></thead><tbody><tr><td style="text-align:center">System.in 标准输入</td><td style="text-align:center">InputStream</td><td style="text-align:center">键盘</td></tr><tr><td style="text-align:center">System.out 标准输出</td><td style="text-align:center">PrintStream</td><td style="text-align:center">显示器</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputAndOutput</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// System 类的public final static InputStream in = null;</span></span><br><span class="line">        <span class="comment">// System.in 的编译类型是InputStream</span></span><br><span class="line">        <span class="comment">// System.in 的运行类型是 BufferedInputStream</span></span><br><span class="line">        <span class="comment">// 表示的是标准输入 键盘</span></span><br><span class="line">        System.out.println(System.in.getClass());</span><br><span class="line">        <span class="comment">// public final static PrintStream out = null;</span></span><br><span class="line">        <span class="comment">// System.out 编译类型是 PrintStream</span></span><br><span class="line">        <span class="comment">// System.out 运行类型是 PrintStream</span></span><br><span class="line">        <span class="comment">// 标准输出 显示器</span></span><br><span class="line">        System.out.println(System.out);</span><br><span class="line">        System.out.println(<span class="string">&quot;执笔...&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入...&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;next= &quot;</span> + next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-转换流"><a href="#2-6-转换流" class="headerlink" title="2.6 转换流"></a>2.6 转换流</h4><h6 id="（1）InputStreamReader"><a href="#（1）InputStreamReader" class="headerlink" title="（1）InputStreamReader"></a>（1）InputStreamReader</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;j:\\a.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//1. 把FileInputStream 转成 InputStreamReader</span></span><br><span class="line">        <span class="comment">//2. 指定编码 gbk</span></span><br><span class="line">        <span class="comment">//InputStreamReader isr = new InputStreamReader(new FileInputStream(filePath), &quot;gbk&quot;);</span></span><br><span class="line">        <span class="comment">//3. 把InputStreamReader 传入 BufferedReader</span></span><br><span class="line">        <span class="comment">//BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line">        <span class="comment">//将2 和3 合在一起</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath), <span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">        <span class="comment">// 4. 读取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取内容：&quot;</span> + s);</span><br><span class="line">        <span class="comment">//5. 关闭外层流</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（2）OutputStreamWriter"><a href="#（2）OutputStreamWriter" class="headerlink" title="（2）OutputStreamWriter"></a>（2）OutputStreamWriter</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;j:\\zb.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">charSet</span> <span class="operator">=</span> <span class="string">&quot;utf8&quot;</span>;</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath), charSet);</span><br><span class="line">        osw.write(<span class="string">&quot;您好，执笔...&quot;</span>);</span><br><span class="line">        osw.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;按照&quot;</span> + charSet + <span class="string">&quot;编码 文件保存成功...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-打印流"><a href="#2-7-打印流" class="headerlink" title="2.7 打印流"></a>2.7 打印流</h4><ul><li><strong>打印流只有输出流没有输入流</strong></li></ul><h6 id="（1）PrintStream"><a href="#（1）PrintStream" class="headerlink" title="（1）PrintStream"></a>（1）PrintStream</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">        <span class="comment">//默认情况下PrintStream 输出数据的位置 标准输出 即显示器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public void print(String s) &#123;</span></span><br><span class="line"><span class="comment">                if (s == null) &#123;</span></span><br><span class="line"><span class="comment">                    s = &quot;null&quot;;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                write(s);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        out.print(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">//因为print 底层调用的是write 所以可以直接调用write进行打印/输出</span></span><br><span class="line">        out.write(<span class="string">&quot;执笔，你好...&quot;</span>.getBytes());</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="comment">//可以修改打印流输出的位置/设备</span></span><br><span class="line">        <span class="comment">// 输出修改到j:\f1.txt</span></span><br><span class="line">        System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;j:\\f1.txt&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;hello，执笔...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（2）PrintWriter"><a href="#（2）PrintWriter" class="headerlink" title="（2）PrintWriter"></a>（2）PrintWriter</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;j:\\test.txt&quot;</span>));</span><br><span class="line">        printWriter.print(<span class="string">&quot;你好，北京...&quot;</span>);</span><br><span class="line">        <span class="comment">//需要关闭流 不然不会刷新</span></span><br><span class="line">        printWriter.close();<span class="comment">//flush + 关闭流   这时才会将数据写入到文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Properties类"><a href="#三、Properties类" class="headerlink" title="三、Properties类"></a>三、Properties类</h2><ul><li><p>专门用于读写配置文件的集合类</p><p>配置文件格式</p><p>键=值</p><p>键=值</p></li><li><p><strong>键值对不需要有空格，值不需要引号，默认类型是String</strong></p></li></ul><h3 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load<span class="comment">//加载配置文件的键值对到Properties对象list:将数据显示到指定设备</span></span><br><span class="line">getProperty(key)<span class="comment">//根据键获取值</span></span><br><span class="line">setProperty(key,value)<span class="comment">//设置键值对到Properties对象</span></span><br><span class="line">store<span class="comment">//将Properties中的键值对存储到配置文件,在idea中,保存信息到配置文件，如果含有中文，会存储为unicode码</span></span><br></pre></td></tr></table></figure><h4 id="1-1-读取"><a href="#1-1-读取" class="headerlink" title="1.1 读取"></a>1.1 读取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 创建Properties</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//2. 加载配置文件</span></span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//3. 把k-v显示在控制台</span></span><br><span class="line">        properties.list(System.out);</span><br><span class="line">        <span class="comment">//4. 根据key 获取对应的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">psw</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;psw&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名：&quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;密码：&quot;</span> + psw);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-创建"><a href="#1-2-创建" class="headerlink" title="1.2  创建"></a>1.2  创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 创建Properties 集合对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//2. 向Properties中添加 键值对信息</span></span><br><span class="line">        <span class="comment">//1. 如果该文件没有key 就是添加</span></span><br><span class="line">        <span class="comment">//2. 如果有就是覆盖</span></span><br><span class="line">        pro.setProperty(<span class="string">&quot;charset&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        pro.setProperty(<span class="string">&quot;port&quot;</span>, <span class="string">&quot;443&quot;</span>);</span><br><span class="line">        pro.setProperty(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        pro.setProperty(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;执笔&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 储存到文件中 (pro ---&gt; 文件)</span></span><br><span class="line">        <span class="comment">// 这里的null 指注释  一般情况下 写成null</span></span><br><span class="line">        pro.store(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;src\\mysql2.properties&quot;</span>), <span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;保存配置文件成功....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
